Index: app/src/main/java/com/guansu/management/wigdet/utils/ScreenUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/utils/ScreenUtils.java	(date 1575452424244)
+++ app/src/main/java/com/guansu/management/wigdet/utils/ScreenUtils.java	(date 1575452424244)
@@ -0,0 +1,122 @@
+package com.guansu.management.wigdet.utils;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.os.IBinder;
+import android.util.DisplayMetrics;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+
+import java.lang.reflect.Field;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class ScreenUtils {
+
+    public static float dp2Px(Context context, float dp) {
+        if (context == null) {
+            return -1;
+        }
+        return dp * density(context);
+    }
+
+    public static float px2Dp(Context context, float px) {
+        if (context == null) {
+            return -1;
+        }
+        return px / density(context);
+    }
+
+    public static float density(Context context) {
+        return context.getResources().getDisplayMetrics().density;
+    }
+
+
+    public static int dp2PxInt(Context context, float dp) {
+        return (int) (dp2Px(context, dp) + 0.5f);
+    }
+
+    public static float px2DpCeilInt(Context context, float px) {
+        return (int) (px2Dp(context, px) + 0.5f);
+    }
+
+
+    public static int sp2px(Context context, float spValue) {
+        float fontScale = context.getResources().getDisplayMetrics().scaledDensity;
+        return (int) (spValue * fontScale + 0.5f);
+    }
+
+    public static int px2sp(Context context, float pxValue) {
+        float fontScale = context.getResources().getDisplayMetrics().scaledDensity;
+        return (int) (pxValue / fontScale + 0.5f);
+    }
+
+    public static DisplayMetrics getDisplayMetrics(Context context) {
+        Activity activity;
+        if (!(context instanceof Activity) && context instanceof ContextWrapper) {
+            activity = (Activity) ((ContextWrapper) context).getBaseContext();
+        } else {
+            activity = (Activity) context;
+        }
+        DisplayMetrics metrics = new DisplayMetrics();
+        activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
+        return metrics;
+    }
+
+    /**
+     * 获取屏幕大小
+     *
+     * @param context
+     * @return
+     */
+    public static int[] getScreenPixelSize(Context context) {
+        DisplayMetrics metrics = getDisplayMetrics(context);
+        return new int[]{metrics.widthPixels, metrics.heightPixels};
+    }
+
+    public static void hideSoftInputKeyBoard(Context context, View focusView) {
+        if (focusView != null) {
+            IBinder binder = focusView.getWindowToken();
+            if (binder != null) {
+                InputMethodManager imd = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
+                imd.hideSoftInputFromWindow(binder, InputMethodManager.HIDE_IMPLICIT_ONLY);
+            }
+        }
+    }
+
+    public static void showSoftInputKeyBoard(Context context, View focusView) {
+        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
+        imm.showSoftInput(focusView, InputMethodManager.SHOW_FORCED);
+    }
+
+    public static int getScreenWidth(Context context) {
+        return context.getResources().getDisplayMetrics().widthPixels;
+    }
+
+    public static int getScreenHeight(Context context) {
+        return context.getResources().getDisplayMetrics().heightPixels;
+    }
+
+    public static int getStatusBarHeight(Context context) {
+        int statusBarHeight = 0;
+        try {
+            Class<?> c = Class.forName("com.android.internal.R$dimen");
+            Object obj = c.newInstance();
+            Field field = c.getField("status_bar_height");
+            int x = Integer.parseInt(field.get(obj).toString());
+            statusBarHeight = context.getResources().getDimensionPixelSize(x);
+        } catch (Exception e1) {
+            e1.printStackTrace();
+        }
+        return statusBarHeight;
+    }
+
+    public static int getAppInScreenheight(Context context) {
+        return getScreenHeight(context) - getStatusBarHeight(context);
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/wigdet/utils/KeyboardConflictCompat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/utils/KeyboardConflictCompat.java	(date 1575452424017)
+++ app/src/main/java/com/guansu/management/wigdet/utils/KeyboardConflictCompat.java	(date 1575452424017)
@@ -0,0 +1,71 @@
+package com.guansu.management.wigdet.utils;
+
+import android.graphics.Rect;
+import android.os.Build;
+import android.view.View;
+import android.view.ViewTreeObserver;
+import android.view.Window;
+import android.widget.FrameLayout;
+
+import com.guansu.management.wigdet.statusbar.StatusBarUtils;
+
+
+/**
+ * 解决沉浸式标题栏下，键盘兼容问题
+ * <p>
+ */
+public class KeyboardConflictCompat {
+    private View mChildOfContent;
+    private FrameLayout.LayoutParams frameLayoutParams;
+    private int usableHeightPrevious;
+    private int contentHeight;
+    private boolean isfirst = true;
+    private int statusBarHeight;
+
+    public static void assistWindow(Window window) {
+        new KeyboardConflictCompat(window);
+    }
+
+    private KeyboardConflictCompat(Window window) {
+        FrameLayout content = (FrameLayout) window.findViewById(android.R.id.content);
+        mChildOfContent = content.getChildAt(0);
+        mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+            public void onGlobalLayout() {
+                if (isfirst) {
+                    contentHeight = mChildOfContent.getHeight();//兼容华为等机型
+                    isfirst = false;
+                }
+                possiblyResizeChildOfContent();
+            }
+        });
+        frameLayoutParams = (FrameLayout.LayoutParams) mChildOfContent.getLayoutParams();
+        statusBarHeight = StatusBarUtils.getStatusBarHeight(window.getContext());
+    }
+
+    private void possiblyResizeChildOfContent() {
+        int usableHeightNow = computeUsableHeight();
+        if (usableHeightNow != usableHeightPrevious) {
+            int usableHeightSansKeyboard = mChildOfContent.getRootView().getHeight();
+            int heightDifference = usableHeightSansKeyboard - usableHeightNow;
+            if (heightDifference > (usableHeightSansKeyboard / 4)) {
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+                    frameLayoutParams.height = usableHeightSansKeyboard - heightDifference + statusBarHeight;
+                } else {
+                    frameLayoutParams.height = usableHeightSansKeyboard - heightDifference;
+                }
+            } else {
+                frameLayoutParams.height = contentHeight;
+            }
+            //7､ 重绘Activity的xml布局
+            mChildOfContent.requestLayout();
+            usableHeightPrevious = usableHeightNow;
+        }
+    }
+
+    private int computeUsableHeight() {
+        Rect r = new Rect();
+        mChildOfContent.getWindowVisibleDisplayFrame(r);
+        // 全屏模式下：直接返回r.bottom，r.top其实是状态栏的高度
+        return (r.bottom - r.top);
+    }
+}
Index: app/src/main/java/com/guansu/management/paymentmoney/SignUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/paymentmoney/SignUtils.java	(date 1577073939801)
+++ app/src/main/java/com/guansu/management/paymentmoney/SignUtils.java	(date 1577073939801)
@@ -0,0 +1,44 @@
+package com.guansu.management.paymentmoney;
+
+import java.security.KeyFactory;
+import java.security.PrivateKey;
+import java.security.spec.PKCS8EncodedKeySpec;
+
+public class SignUtils {
+
+	private static final String ALGORITHM = "RSA";
+
+	private static final String SIGN_ALGORITHMS = "SHA1WithRSA";
+
+	private static final String SIGN_SHA256RSA_ALGORITHMS = "SHA256WithRSA";
+
+	private static final String DEFAULT_CHARSET = "UTF-8";
+
+	private static String getAlgorithms(boolean rsa2) {
+		return rsa2 ? SIGN_SHA256RSA_ALGORITHMS : SIGN_ALGORITHMS;
+	}
+	
+	public static String sign(String content, String privateKey, boolean rsa2) {
+		try {
+			PKCS8EncodedKeySpec priPKCS8 = new PKCS8EncodedKeySpec(
+					Base64.decode(privateKey));
+			KeyFactory keyf = KeyFactory.getInstance(ALGORITHM);
+			PrivateKey priKey = keyf.generatePrivate(priPKCS8);
+
+			java.security.Signature signature = java.security.Signature
+					.getInstance(getAlgorithms(rsa2));
+
+			signature.initSign(priKey);
+			signature.update(content.getBytes(DEFAULT_CHARSET));
+
+			byte[] signed = signature.sign();
+
+			return Base64.encode(signed);
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+
+		return null;
+	}
+
+}
Index: app/src/main/java/com/guansu/management/wigdet/CommonTitleBar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/CommonTitleBar.java	(date 1576819253351)
+++ app/src/main/java/com/guansu/management/wigdet/CommonTitleBar.java	(date 1576819253351)
@@ -0,0 +1,1081 @@
+package com.guansu.management.wigdet;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.content.res.TypedArray;
+import android.graphics.Color;
+import android.os.Build;
+import android.text.Editable;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.guansu.management.R;
+import com.guansu.management.wigdet.statusbar.StatusBarUtils;
+import com.guansu.management.wigdet.utils.ScreenUtils;
+
+/**
+ * 通用标题栏
+ * <p/>
+ * <declare-styleable name="GCommonTitleBar">
+ * <attr name="titleBarBg" format="reference" /> <!-- 标题栏背景 图片或颜色 -->
+ * <attr name="titleBarHeight" format="dimension" /> <!-- 标题栏高度 -->
+ * <attr name="showBottomLine" format="boolean" /> <!-- 显示标题栏分割线 -->
+ * <attr name="bottomLineColor" format="color" /> <!-- 标题栏分割线颜色 -->
+ * <attr name="bottomShadowHeight" format="dimension" /> <!-- 底部阴影高度 showBottomLine = false时有效 -->
+ * <!-- 状态栏模式 -->
+ * <attr name="statusBarMode" format="enum">
+ * <enum name="dark" value="0" />
+ * <enum name="light" value="1" />
+ * </attr>
+ * <p/>
+ * <!-- 左边视图类型 -->
+ * <attr name="leftType">
+ * <enum name="none" value="0" />
+ * <enum name="textView" value="1" />
+ * <enum name="imageButton" value="2" />
+ * <enum name="customView" value="3" />
+ * </attr>
+ * <p/>
+ * <attr name="leftText" format="string" /> <!-- TextView 文字, 对应leftType_TextView -->
+ * <attr name="leftTextColor" format="color" /> <!-- TextView 颜色, 对应leftType_TextView -->
+ * <attr name="leftTextSize" format="dimension" /> <!-- TextView 字体大小, 对应leftType_TextView -->
+ * <attr name="leftDrawable" format="reference" /> <!-- TextView 左边图片, 对应leftType_TextView -->
+ * <attr name="leftDrawablePadding" format="dimension" /> <!-- TextView 左边padding, 对应leftType_TextView -->
+ * <attr name="leftImageResource" format="reference" /> <!-- ImageView 资源, 对应leftType_ImageButton -->
+ * <attr name="leftCustomView" format="reference" /> <!-- 左边自定义布局, 对应leftType_CustomView -->
+ * <p/>
+ * <!-- 右边视图类型 -->
+ * <attr name="rightType">
+ * <enum name="none" value="0" />
+ * <enum name="textView" value="1" />
+ * <enum name="imageButton" value="2" />
+ * <enum name="customView" value="3" />
+ * </attr>
+ * <p/>
+ * <attr name="rightText" format="string" /> <!-- TextView 文字, 对应rightType_TextView -->
+ * <attr name="rightTextColor" format="color" /> <!-- TextView 颜色, 对应rightType_TextView -->
+ * <attr name="rightTextSize" format="dimension" /> <!-- TextView 字体大小, 对应rightType_TextView -->
+ * <attr name="rightImageResource" format="reference" /> <!-- ImageView 资源, 对应rightType_ImageButton -->
+ * <attr name="rightCustomView" format="reference" /> <!-- 右边自定义布局, 对应rightType_CustomView -->
+ * <p/>
+ * <!-- 中间视图类型 -->
+ * <enum name="none" value="0" />
+ * <enum name="textView" value="1" />
+ * <enum name="searchView" value="2" />
+ * <enum name="customView" value="3" />
+ * </attr>
+ * <p/>
+ * <attr name="centerText" format="string" /> <!-- TextView 文字, 对应centerType_TextView -->
+ * <attr name="centerTextColor" format="color" /> <!-- TextView 颜色, 对应centerType_TextView -->
+ * <attr name="centerTextSize" format="dimension" /> <!-- TextView 字体大小, 对应centerType_TextView -->
+ * <attr name="centerTextMarquee" format="boolean" /> <!-- TextView 跑马灯效果, 对应centerType_TextView -->
+ * <attr name="centerSubText" format="string" /> <!-- 子标题TextView 文字, 对应centerType_TextView -->
+ * <attr name="centerSubTextColor" format="color" /> <!-- 子标题TextView 颜色, 对应centerType_TextView -->
+ * <attr name="centerSubTextSize" format="dimension" /> <!-- 子标题TextView 字体大小, 对应centerType_TextView -->
+ * <attr name="centerSearchEdiable" format="boolean" /> <!-- 搜索输入框是否可输入 -->
+ * <attr name="centerCustomView" format="reference" /> <!-- 中间自定义布局, 对应centerType_CustomView -->
+ * </declare-styleable>
+ * <p/>
+ */
+@SuppressWarnings("ResourceType")
+public class CommonTitleBar extends RelativeLayout implements View.OnClickListener {
+    private View viewStatusBarFill;                     // 状态栏填充视图
+    private View viewBottomLine;                        // 分隔线视图
+    private View viewBottomShadow;                      // 底部阴影
+    private RelativeLayout rlMain;                      // 主视图
+
+    private TextView tvLeft;                            // 左边TextView
+    private ImageButton btnLeft;                        // 左边ImageButton
+    private View viewCustomLeft;
+    private TextView tvRight;                           // 右边TextView
+    private ImageButton btnRight;                       // 右边ImageButton
+    private View viewCustomRight;
+    private LinearLayout llMainCenter;
+    private TextView tvCenter;                          // 标题栏文字
+    private TextView tvCenterSub;                       // 副标题栏文字
+    private RelativeLayout rlMainCenterSearch;          // 中间搜索框布局
+    private EditText etSearchHint;
+    private ImageView ivSearch;
+    private ImageView ivDelete;
+    private View centerCustomView;                      // 中间自定义视图
+
+    private boolean fillStatusBar;                      // 是否撑起状态栏, true时,标题栏浸入状态栏
+    private int titleBarColor;                          // 标题栏背景颜色
+    private int titleBarHeight;                         // 标题栏高度
+    private int statusBarColor;                         // 状态栏颜色
+    private int statusBarMode;                          // 状态栏模式
+
+    private boolean showBottomLine;                     // 是否显示底部分割线
+    private int bottomLineColor;                        // 分割线颜色
+    private float bottomShadowHeight;                   // 底部阴影高度
+
+    private int leftType;                               // 左边视图类型
+    private String leftText;                            // 左边TextView文字
+    private int leftTextColor;                          // 左边TextView颜色
+    private float leftTextSize;                         // 左边TextView文字大小
+    private int leftDrawable;                           // 左边TextView drawableLeft资源
+    private float leftDrawablePadding;                  // 左边TextView drawablePadding
+    private int leftImageResource;                      // 左边图片资源
+    private int leftCustomViewRes;                      // 左边自定义视图布局资源
+
+    private int rightType;                              // 右边视图类型
+    private String rightText;                           // 右边TextView文字
+    private int rightTextColor;                         // 右边TextView颜色
+    private float rightTextSize;                        // 右边TextView文字大小
+    private int rightImageResource;                     // 右边图片资源
+    private int rightCustomViewRes;                     // 右边自定义视图布局资源
+
+    private int centerType;                             // 中间视图类型
+    private String centerText;                          // 中间TextView文字
+    private int centerTextColor;                        // 中间TextView字体颜色
+    private float centerTextSize;                       // 中间TextView字体大小
+    private boolean centerTextMarquee;                  // 中间TextView字体是否显示跑马灯效果
+    private String centerSubText;                       // 中间subTextView文字
+    private int centerSubTextColor;                     // 中间subTextView字体颜色
+    private float centerSubTextSize;                    // 中间subTextView字体大小
+    private boolean centerSearchEditable;                // 搜索框是否可输入
+    private int centerSearchBgResource;                 // 搜索框背景图片
+    private int centerSearchRightType;                  // 搜索框右边按钮类型  0: voice 1: delete
+    private int centerCustomViewRes;                    // 中间自定义布局资源
+    private int PADDING_5;
+    private int PADDING_12;
+    private OnTitleBarListener listener;
+    private OnTitleBarDoubleClickListener doubleClickListener;
+    public static final int TYPE_NONE = 0;
+    public static final int TYPE_TEXTVIEW = 1;
+    public static final int TYPE_IMAGEBUTTON_SEARCHVIEW = 2;
+    public static final int TYPE_CUSTOM_VIEW = 3;
+    private static final int TYPE_SEARCH_RIGHT_VOICE = 0;
+    private static final int TYPE_SEARCH_RIGHT_DELETE = 1;
+    public CommonTitleBar(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        loadAttributes(context, attrs);
+        initGlobalViews(context);
+        initMainViews(context);
+    }
+    private void loadAttributes(Context context, AttributeSet attrs) {
+        PADDING_5 = ScreenUtils.dp2PxInt(context, 5);
+        PADDING_12 = ScreenUtils.dp2PxInt(context, 12);
+
+        TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.CommonTitleBar);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+            // notice 未引入沉浸式标题栏之前,隐藏标题栏撑起布局
+            fillStatusBar = array.getBoolean(R.styleable.CommonTitleBar_fillStatusBar, true);
+        }
+        titleBarColor = array.getColor(R.styleable.CommonTitleBar_titleBarColor, Color.parseColor("#ffffff"));
+        titleBarHeight = (int) array.getDimension(R.styleable.CommonTitleBar_titleBarHeight, ScreenUtils.dp2PxInt(context, 40));
+        statusBarColor = array.getColor(R.styleable.CommonTitleBar_statusBarColor, Color.parseColor("#ffffff"));
+        statusBarMode = array.getInt(R.styleable.CommonTitleBar_statusBarMode, 0);
+
+        showBottomLine = array.getBoolean(R.styleable.CommonTitleBar_showBottomLine, true);
+        bottomLineColor = array.getColor(R.styleable.CommonTitleBar_bottomLineColor, Color.parseColor("#FFffff"));
+        bottomShadowHeight = array.getDimension(R.styleable.CommonTitleBar_bottomShadowHeight, ScreenUtils.dp2PxInt(context, 0));
+
+        leftType = array.getInt(R.styleable.CommonTitleBar_leftType, TYPE_NONE);
+        if (leftType == TYPE_TEXTVIEW) {
+            leftText = array.getString(R.styleable.CommonTitleBar_leftText);
+            leftTextColor = array.getColor(R.styleable.CommonTitleBar_leftTextColor, getResources().getColor(R.color.black));
+            leftTextSize = array.getDimension(R.styleable.CommonTitleBar_leftTextSize, ScreenUtils.dp2PxInt(context, 16));
+            leftDrawable = array.getResourceId(R.styleable.CommonTitleBar_leftDrawable, 0);
+            leftDrawablePadding = array.getDimension(R.styleable.CommonTitleBar_leftDrawablePadding, 5);
+        } else if (leftType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+            leftImageResource = array.getResourceId(R.styleable.CommonTitleBar_leftImageResource, R.mipmap.black);
+        } else if (leftType == TYPE_CUSTOM_VIEW) {
+            leftCustomViewRes = array.getResourceId(R.styleable.CommonTitleBar_leftCustomView, 0);
+        }
+
+        rightType = array.getInt(R.styleable.CommonTitleBar_rightType, TYPE_NONE);
+//        if (rightType == TYPE_TEXTVIEW) {
+        rightText = array.getString(R.styleable.CommonTitleBar_rightText);
+        rightTextColor = array.getColor(R.styleable.CommonTitleBar_rightTextColor, getResources().getColor(R.color.black));
+        rightTextSize = array.getDimension(R.styleable.CommonTitleBar_rightTextSize, ScreenUtils.dp2PxInt(context, 16));
+//        } else if (rightType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+        rightImageResource = array.getResourceId(R.styleable.CommonTitleBar_rightImageResource, 0);
+//        } else if (rightType == TYPE_CUSTOM_VIEW) {
+        rightCustomViewRes = array.getResourceId(R.styleable.CommonTitleBar_rightCustomView, 0);
+//        }
+
+        centerType = array.getInt(R.styleable.CommonTitleBar_centerType, TYPE_NONE);
+        if (centerType == TYPE_TEXTVIEW) {
+            centerText = array.getString(R.styleable.CommonTitleBar_centerText);
+            centerTextColor = array.getColor(R.styleable.CommonTitleBar_centerTextColor, Color.parseColor("#333333"));
+            centerTextSize = array.getDimension(R.styleable.CommonTitleBar_centerTextSize, ScreenUtils.dp2PxInt(context, 20));
+            centerTextMarquee = array.getBoolean(R.styleable.CommonTitleBar_centerTextMarquee, true);
+            centerSubText = array.getString(R.styleable.CommonTitleBar_centerSubText);
+            centerSubTextColor = array.getColor(R.styleable.CommonTitleBar_centerSubTextColor, Color.parseColor("#666666"));
+            centerSubTextSize = array.getDimension(R.styleable.CommonTitleBar_centerSubTextSize, ScreenUtils.dp2PxInt(context, 12));
+        } else if (centerType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+            centerSearchEditable = array.getBoolean(R.styleable.CommonTitleBar_centerSearchEditable, true);
+            centerSearchBgResource = array.getResourceId(R.styleable.CommonTitleBar_centerSearchBg, R.drawable.bg_btn_dis);
+            centerSearchRightType = array.getInt(R.styleable.CommonTitleBar_centerSearchRightType, TYPE_SEARCH_RIGHT_VOICE);
+        } else if (centerType == TYPE_CUSTOM_VIEW) {
+            centerCustomViewRes = array.getResourceId(R.styleable.CommonTitleBar_centerCustomView, 0);
+        }
+
+        array.recycle();
+    }
+
+    private final int MATCH_PARENT = ViewGroup.LayoutParams.MATCH_PARENT;
+    private final int WRAP_CONTENT = ViewGroup.LayoutParams.WRAP_CONTENT;
+
+    /**
+     * 初始化全局视图
+     *
+     * @param context 上下文
+     */
+    private void initGlobalViews(Context context) {
+        ViewGroup.LayoutParams globalParams = new ViewGroup.LayoutParams(MATCH_PARENT, WRAP_CONTENT);
+        setLayoutParams(globalParams);
+
+        boolean transparentStatusBar = StatusBarUtils.supportTransparentStatusBar();
+
+        // 构建标题栏填充视图
+        if (fillStatusBar && transparentStatusBar) {
+            int statusBarHeight = StatusBarUtils.getStatusBarHeight(context);
+            viewStatusBarFill = new View(context);
+            viewStatusBarFill.setId(StatusBarUtils.generateViewId());
+            viewStatusBarFill.setBackgroundColor(statusBarColor);
+            LayoutParams statusBarParams = new LayoutParams(MATCH_PARENT, statusBarHeight);
+            statusBarParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+            addView(viewStatusBarFill, statusBarParams);
+        }
+
+        // 构建主视图
+        rlMain = new RelativeLayout(context);
+        rlMain.setId(StatusBarUtils.generateViewId());
+        rlMain.setBackgroundColor(titleBarColor);
+        LayoutParams mainParams = new LayoutParams(MATCH_PARENT, titleBarHeight);
+        if (fillStatusBar && transparentStatusBar) {
+            mainParams.addRule(RelativeLayout.BELOW, viewStatusBarFill.getId());
+        } else {
+            mainParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+        }
+
+        // 计算主布局高度
+        if (showBottomLine) {
+            mainParams.height = titleBarHeight - Math.max(1, ScreenUtils.dp2PxInt(context, 0.4f));
+        } else {
+            mainParams.height = titleBarHeight;
+        }
+        addView(rlMain, mainParams);
+
+        // 构建分割线视图
+        if (showBottomLine) {
+            // 已设置显示标题栏分隔线,5.0以下机型,显示分隔线
+            viewBottomLine = new View(context);
+            viewBottomLine.setBackgroundColor(bottomLineColor);
+            LayoutParams bottomLineParams = new LayoutParams(MATCH_PARENT, Math.max(0, ScreenUtils.dp2PxInt(context, 0.0f)));
+            bottomLineParams.addRule(RelativeLayout.BELOW, rlMain.getId());
+
+            addView(viewBottomLine, bottomLineParams);
+        } else if (bottomShadowHeight != 0) {
+            viewBottomShadow = new View(context);
+            viewBottomShadow.setBackgroundResource(R.color.transparent);
+            LayoutParams bottomShadowParams = new LayoutParams(MATCH_PARENT, ScreenUtils.dp2PxInt(context, bottomShadowHeight));
+            bottomShadowParams.addRule(RelativeLayout.BELOW, rlMain.getId());
+
+            addView(viewBottomShadow, bottomShadowParams);
+        }
+    }
+
+    /**
+     * 初始化主视图
+     *
+     * @param context 上下文
+     */
+    private void initMainViews(Context context) {
+        if (leftType != TYPE_NONE) {
+            initMainLeftViews(context);
+        }
+        if (rightType != TYPE_NONE) {
+            initMainRightViews(context);
+        }
+        if (centerType != TYPE_NONE) {
+            initMainCenterViews(context);
+        }
+    }
+
+    /**
+     * 初始化主视图左边部分
+     * -- add: adaptive RTL
+     *
+     * @param context 上下文
+     */
+    private void initMainLeftViews(Context context) {
+        LayoutParams leftInnerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);
+        leftInnerParams.addRule(RelativeLayout.ALIGN_PARENT_START);
+        leftInnerParams.addRule(RelativeLayout.CENTER_VERTICAL);
+        if (null != tvLeft)
+            tvLeft.setVisibility(GONE);
+        if (null != btnLeft)
+            btnLeft.setVisibility(GONE);
+        if (null != viewCustomLeft)
+            viewCustomLeft.setVisibility(GONE);
+        if (leftType == TYPE_TEXTVIEW) {
+            // 初始化左边TextView
+            tvLeft = new TextView(context);
+            tvLeft.setId(StatusBarUtils.generateViewId());
+            tvLeft.setText(leftText);
+            tvLeft.setTextColor(leftTextColor);
+            tvLeft.setTextSize(TypedValue.COMPLEX_UNIT_PX, leftTextSize);
+            tvLeft.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
+            tvLeft.setSingleLine(true);
+            tvLeft.setOnClickListener(this);
+            // 设置DrawableLeft及DrawablePadding
+            if (leftDrawable != 0) {
+                tvLeft.setCompoundDrawablePadding((int) leftDrawablePadding);
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                    tvLeft.setCompoundDrawablesRelativeWithIntrinsicBounds(leftDrawable, 0, 0, 0);
+                } else {
+                    tvLeft.setCompoundDrawablesWithIntrinsicBounds(leftDrawable, 0, 0, 0);
+                }
+            }
+            tvLeft.setPadding(PADDING_12, 0, PADDING_12, 0);
+
+            rlMain.addView(tvLeft, leftInnerParams);
+
+        } else if (leftType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+            // 初始化左边ImageButton
+            btnLeft = new ImageButton(context);
+            btnLeft.setId(StatusBarUtils.generateViewId());
+            btnLeft.setBackgroundColor(Color.TRANSPARENT);
+            btnLeft.setImageResource(leftImageResource);
+            btnLeft.setPadding(PADDING_12, 0, PADDING_12, 0);
+            btnLeft.setOnClickListener(this);
+
+            rlMain.addView(btnLeft, leftInnerParams);
+
+        } else if (leftType == TYPE_CUSTOM_VIEW) {
+            // 初始化自定义View
+            viewCustomLeft = LayoutInflater.from(context).inflate(leftCustomViewRes, rlMain, false);
+            if (viewCustomLeft.getId() == View.NO_ID) {
+                viewCustomLeft.setId(StatusBarUtils.generateViewId());
+            }
+            rlMain.addView(viewCustomLeft, leftInnerParams);
+        }
+    }
+
+    /**
+     * 初始化主视图右边部分
+     * -- add: adaptive RTL
+     *
+     * @param context 上下文
+     */
+    private void initMainRightViews(Context context) {
+        LayoutParams rightInnerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);
+        rightInnerParams.addRule(RelativeLayout.ALIGN_PARENT_END);
+        rightInnerParams.addRule(RelativeLayout.CENTER_VERTICAL);
+
+        if (null != tvRight)
+            tvRight.setVisibility(GONE);
+        if (null != btnRight)
+            btnRight.setVisibility(GONE);
+        if (null != viewCustomRight)
+            viewCustomRight.setVisibility(GONE);
+
+        if (rightType == TYPE_TEXTVIEW) {
+            // 初始化右边TextView
+            tvRight = new TextView(context);
+            tvRight.setId(StatusBarUtils.generateViewId());
+            tvRight.setText(rightText);
+            tvRight.setTextColor(rightTextColor);
+            tvRight.setTextSize(TypedValue.COMPLEX_UNIT_PX, rightTextSize);
+            tvRight.setGravity(Gravity.END | Gravity.CENTER_VERTICAL);
+            tvRight.setSingleLine(true);
+            tvRight.setPadding(PADDING_12, 0, PADDING_12, 0);
+            tvRight.setOnClickListener(this);
+            rlMain.addView(tvRight, rightInnerParams);
+
+        } else if (rightType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+            // 初始化右边ImageBtn
+            btnRight = new ImageButton(context);
+            btnRight.setId(StatusBarUtils.generateViewId());
+            btnRight.setImageResource(rightImageResource);
+            btnRight.setBackgroundColor(Color.TRANSPARENT);
+            btnRight.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+            btnRight.setPadding(PADDING_12, 0, PADDING_12, 0);
+            btnRight.setOnClickListener(this);
+            rlMain.addView(btnRight, rightInnerParams);
+
+        } else if (rightType == TYPE_CUSTOM_VIEW) {
+            // 初始化自定义view
+            viewCustomRight = LayoutInflater.from(context).inflate(rightCustomViewRes, rlMain, false);
+            if (viewCustomRight.getId() == View.NO_ID) {
+                viewCustomRight.setId(StatusBarUtils.generateViewId());
+            }
+            rlMain.addView(viewCustomRight, rightInnerParams);
+        }
+    }
+
+    /**
+     * 初始化主视图中间部分
+     *
+     * @param context 上下文
+     */
+    private void initMainCenterViews(Context context) {
+        if (null != tvCenter)
+            tvCenter.setVisibility(GONE);
+        if (null != tvCenterSub)
+            tvCenterSub.setVisibility(GONE); if (null != rlMainCenterSearch)
+            rlMainCenterSearch.setVisibility(GONE);
+        if (null != centerCustomView)
+            centerCustomView.setVisibility(GONE);
+        if (centerType == TYPE_TEXTVIEW) {
+            // 初始化中间子布局
+            llMainCenter = new LinearLayout(context);
+            llMainCenter.setId(StatusBarUtils.generateViewId());
+            llMainCenter.setGravity(Gravity.CENTER);
+            llMainCenter.setOrientation(LinearLayout.VERTICAL);
+            llMainCenter.setOnClickListener(this);
+
+            LayoutParams centerParams = new LayoutParams(MATCH_PARENT, MATCH_PARENT);
+//            centerParams.setMarginStart(PADDING_12);
+//            centerParams.setMarginEnd(PADDING_12);
+            if (leftType == TYPE_TEXTVIEW) {
+                centerParams.addRule(RelativeLayout.END_OF, tvLeft.getId());
+            } else if (leftType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+                centerParams.addRule(RelativeLayout.END_OF, btnLeft.getId());
+            } else if (leftType == TYPE_CUSTOM_VIEW) {
+                centerParams.addRule(RelativeLayout.END_OF, viewCustomLeft.getId());
+            } else {
+//                centerParams.setMarginStart(PADDING_12);
+            }
+            rlMain.addView(llMainCenter, centerParams);
+
+            // 初始化标题栏TextView
+            tvCenter = new TextView(context);
+            tvCenter.setText(centerText);
+            tvCenter.setTextColor(centerTextColor);
+            tvCenter.setTextSize(TypedValue.COMPLEX_UNIT_PX, centerTextSize);
+            tvCenter.setGravity(Gravity.CENTER);
+            tvCenter.setSingleLine(true);
+            // 设置跑马灯效果
+//            tvCenter.setMaxWidth((int) (ScreenUtils.getScreenPixelSize(context)[0] * 3 / 5.0));
+            if (centerTextMarquee) {
+                tvCenter.setEllipsize(TextUtils.TruncateAt.MARQUEE);
+                tvCenter.setMarqueeRepeatLimit(-1);
+                tvCenter.requestFocus();
+                tvCenter.setSelected(true);
+            }
+
+            LinearLayout.LayoutParams centerTextParams = new LinearLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
+            llMainCenter.addView(tvCenter, centerTextParams);
+
+            // 初始化副标题栏
+            tvCenterSub = new TextView(context);
+            tvCenterSub.setText(centerSubText);
+            tvCenterSub.setTextColor(centerSubTextColor);
+            tvCenterSub.setTextSize(TypedValue.COMPLEX_UNIT_PX, centerSubTextSize);
+            tvCenterSub.setGravity(Gravity.CENTER);
+            tvCenterSub.setSingleLine(true);
+            if (TextUtils.isEmpty(centerSubText)) {
+                tvCenterSub.setVisibility(View.GONE);
+            }
+
+            LinearLayout.LayoutParams centerSubTextParams = new LinearLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
+            llMainCenter.addView(tvCenterSub, centerSubTextParams);
+        } else if (centerType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+            // 初始化通用搜索框
+            rlMainCenterSearch = new RelativeLayout(context);
+            rlMainCenterSearch.setBackgroundResource(centerSearchBgResource);
+            LayoutParams centerParams = new LayoutParams(MATCH_PARENT, MATCH_PARENT);
+            // 设置边距
+            centerParams.topMargin = ScreenUtils.dp2PxInt(context, 7);
+            centerParams.bottomMargin = ScreenUtils.dp2PxInt(context, 7);
+            // 根据左边的布局类型来设置边距,布局依赖规则
+           /* if (leftType == TYPE_TEXTVIEW) {
+                centerParams.addRule(RelativeLayout.END_OF, tvLeft.getId());
+                centerParams.setMarginStart(PADDING_5);
+            } else if (leftType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+                centerParams.addRule(RelativeLayout.END_OF, btnLeft.getId());
+                centerParams.setMarginStart(PADDING_5);
+            } else if (leftType == TYPE_CUSTOM_VIEW) {
+                centerParams.addRule(RelativeLayout.END_OF, viewCustomLeft.getId());
+                centerParams.setMarginStart(PADDING_5);
+            } else {
+                centerParams.setMarginStart(PADDING_12);
+            }
+            // 根据右边的布局类型来设置边距,布局依赖规则
+            if (rightType == TYPE_TEXTVIEW) {
+                centerParams.addRule(RelativeLayout.START_OF, tvRight.getId());
+                centerParams.setMarginEnd(PADDING_5);
+            } else if (rightType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+                centerParams.addRule(RelativeLayout.START_OF, btnRight.getId());
+                centerParams.setMarginEnd(PADDING_5);
+            } else if (rightType == TYPE_CUSTOM_VIEW) {
+                centerParams.addRule(RelativeLayout.START_OF, viewCustomRight.getId());
+                centerParams.setMarginEnd(PADDING_5);
+            } else {
+                centerParams.setMarginEnd(PADDING_12);
+            }*/
+            rlMain.addView(rlMainCenterSearch, centerParams);
+
+            // 初始化搜索框搜索ImageView
+            ivSearch = new ImageView(context);
+            ivSearch.setId(StatusBarUtils.generateViewId());
+            ivSearch.setOnClickListener(this);
+            int searchIconWidth = ScreenUtils.dp2PxInt(context, 15);
+            LayoutParams searchParams = new LayoutParams(searchIconWidth, searchIconWidth);
+            searchParams.addRule(RelativeLayout.CENTER_VERTICAL);
+            searchParams.addRule(RelativeLayout.ALIGN_PARENT_START);
+//            searchParams.setMarginStart(PADDING_12);
+            rlMainCenterSearch.addView(ivSearch, searchParams);
+//            ivSearch.setImageResource(R.drawable.icon_search);
+
+            // 初始化搜索框语音ImageView
+            ivDelete = new ImageView(context);
+            ivDelete.setId(StatusBarUtils.generateViewId());
+            ivDelete.setOnClickListener(this);
+            LayoutParams voiceParams = new LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
+            voiceParams.addRule(RelativeLayout.CENTER_VERTICAL);
+            voiceParams.addRule(RelativeLayout.ALIGN_PARENT_END);
+//            voiceParams.setMarginEnd(PADDING_12);
+            rlMainCenterSearch.addView(ivDelete, voiceParams);
+            if (centerSearchRightType == TYPE_SEARCH_RIGHT_VOICE) {
+//                ivDelete.setImageResource(R.drawable.comm_titlebar_voice);
+            } else {
+//                ivDelete.setImageResource(R.mipmap.icon_delete);
+                ivDelete.setVisibility(View.GONE);
+            }
+
+            // 初始化文字输入框
+            etSearchHint = new EditText(context);
+            etSearchHint.setBackgroundColor(Color.TRANSPARENT);
+            etSearchHint.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);
+//            etSearchHint.setHint(getResources().getString(R.string.titlebar_search_hint));
+            etSearchHint.setTextColor(Color.parseColor("#666666"));
+            etSearchHint.setHintTextColor(Color.parseColor("#999999"));
+            etSearchHint.setTextSize(TypedValue.COMPLEX_UNIT_PX, ScreenUtils.dp2PxInt(context, 14));
+            etSearchHint.setPadding(PADDING_5, 0, PADDING_5, 0);
+            if (!centerSearchEditable) {
+                etSearchHint.setCursorVisible(false);
+                etSearchHint.clearFocus();
+                etSearchHint.setFocusable(false);
+                etSearchHint.setOnClickListener(this);
+            }
+            etSearchHint.setCursorVisible(false);
+            etSearchHint.setSingleLine(true);
+            etSearchHint.setEllipsize(TextUtils.TruncateAt.END);
+            etSearchHint.setImeOptions(EditorInfo.IME_ACTION_SEARCH);
+            etSearchHint.addTextChangedListener(centerSearchWatcher);
+            etSearchHint.setOnFocusChangeListener(focusChangeListener);
+            etSearchHint.setOnEditorActionListener(editorActionListener);
+            etSearchHint.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    etSearchHint.setCursorVisible(true);
+                }
+            });
+            LayoutParams searchHintParams = new LayoutParams(MATCH_PARENT, MATCH_PARENT);
+            searchHintParams.addRule(RelativeLayout.END_OF, ivSearch.getId());
+            searchHintParams.addRule(RelativeLayout.START_OF, ivDelete.getId());
+            searchHintParams.addRule(RelativeLayout.CENTER_VERTICAL);
+          /*  searchHintParams.setMarginStart(PADDING_5);
+            searchHintParams.setMarginEnd(PADDING_5);*/
+            rlMainCenterSearch.addView(etSearchHint, searchHintParams);
+
+        } else if (centerType == TYPE_CUSTOM_VIEW) {
+            // 初始化中间自定义布局
+            centerCustomView = LayoutInflater.from(context).inflate(centerCustomViewRes, rlMain, false);
+            if (centerCustomView.getId() == View.NO_ID) {
+                centerCustomView.setId(StatusBarUtils.generateViewId());
+            }
+            LayoutParams centerCustomParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);
+          /*  centerCustomParams.setMarginStart(PADDING_12);
+            centerCustomParams.setMarginEnd(PADDING_12);*/
+            centerCustomParams.addRule(RelativeLayout.CENTER_IN_PARENT);
+//            if (leftType == TYPE_TEXTVIEW) {
+//                centerCustomParams.addRule(RelativeLayout.END_OF, tvLeft.getId());
+//            } else if (leftType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+//                centerCustomParams.addRule(RelativeLayout.END_OF, btnLeft.getId());
+//            } else if (leftType == TYPE_CUSTOM_VIEW) {
+//                centerCustomParams.addRule(RelativeLayout.END_OF, viewCustomLeft.getId());
+//            }
+//            if (rightType == TYPE_TEXTVIEW) {
+//                centerCustomParams.addRule(RelativeLayout.START_OF, tvRight.getId());
+//            } else if (rightType == TYPE_IMAGEBUTTON_SEARCHVIEW) {
+//                centerCustomParams.addRule(RelativeLayout.START_OF, btnRight.getId());
+//            } else if (rightType == TYPE_CUSTOM_VIEW) {
+//                centerCustomParams.addRule(RelativeLayout.START_OF, viewCustomRight.getId());
+//            }
+            rlMain.addView(centerCustomView, centerCustomParams);
+        }
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        setUpImmersionTitleBar();
+    }
+
+    private void setUpImmersionTitleBar() {
+        Window window = getWindow();
+        if (window == null) return;
+        // 设置状态栏背景透明
+        StatusBarUtils.transparentStatusBar(window);
+        // 设置图标主题
+        if (statusBarMode == 0) {
+            StatusBarUtils.setDarkMode(window);
+        } else {
+            StatusBarUtils.setLightMode(window);
+        }
+    }
+
+    private Window getWindow() {
+        Context context = getContext();
+        Activity activity;
+        if (context instanceof Activity) {
+            activity = (Activity) context;
+        } else {
+            activity = (Activity) ((ContextWrapper) context).getBaseContext();
+        }
+        if (activity != null) {
+            return activity.getWindow();
+        }
+        return null;
+    }
+
+    private TextWatcher centerSearchWatcher = new TextWatcher() {
+        @Override
+        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+        }
+
+        @Override
+        public void onTextChanged(CharSequence s, int start, int before, int count) {
+        }
+
+        @Override
+        public void afterTextChanged(Editable s) {
+            if (centerSearchRightType == TYPE_SEARCH_RIGHT_VOICE) {
+                if (TextUtils.isEmpty(s)) {
+//                    ivDelete.setImageResource(R.drawable.comm_titlebar_voice);
+                } else {
+//                    ivDelete.setImageResource(R.mipmap.icon_delete);
+                }
+            } else {
+                if (TextUtils.isEmpty(s)) {
+                    ivDelete.setVisibility(View.GONE);
+                } else {
+                    ivDelete.setVisibility(View.VISIBLE);
+                }
+            }
+        }
+    };
+
+    private OnFocusChangeListener focusChangeListener = new OnFocusChangeListener() {
+        @Override
+        public void onFocusChange(View v, boolean hasFocus) {
+            if (centerSearchRightType == TYPE_SEARCH_RIGHT_DELETE) {
+                String input = etSearchHint.getText().toString();
+                if (hasFocus && !TextUtils.isEmpty(input)) {
+                    ivDelete.setVisibility(View.VISIBLE);
+                } else {
+                    ivDelete.setVisibility(View.GONE);
+                }
+            }
+        }
+    };
+
+    private TextView.OnEditorActionListener editorActionListener = new TextView.OnEditorActionListener() {
+        @Override
+        public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
+            if (listener != null && actionId == EditorInfo.IME_ACTION_SEARCH) {
+                listener.onTitleClick(v, ACTION_SEARCH_SUBMIT, etSearchHint.getText().toString());
+            }
+            return false;
+        }
+    };
+
+    private long lastClickMillis = 0;     // 双击事件中，上次被点击时间
+
+    @Override
+    public void onClick(View v) {
+        if (listener == null) return;
+
+        if (v.equals(llMainCenter) && doubleClickListener != null) {
+            long currentClickMillis = System.currentTimeMillis();
+            if (currentClickMillis - lastClickMillis < 500) {
+                doubleClickListener.onClicked(v);
+            }
+            lastClickMillis = currentClickMillis;
+        } else if (v.equals(tvLeft)) {
+            listener.onTitleClick(v, ACTION_LEFT_TEXT, null);
+        } else if (v.equals(btnLeft)) {
+            listener.onTitleClick(v, ACTION_LEFT_BUTTON, null);
+        } else if (v.equals(tvRight)) {
+            listener.onTitleClick(v, ACTION_RIGHT_TEXT, null);
+        } else if (v.equals(btnRight)) {
+            listener.onTitleClick(v, ACTION_RIGHT_BUTTON, null);
+        } else if (v.equals(etSearchHint) || v.equals(ivSearch)) {
+            listener.onTitleClick(v, ACTION_SEARCH, null);
+        } else if (v.equals(ivDelete)) {
+            etSearchHint.setText("");
+            if (centerSearchRightType == TYPE_SEARCH_RIGHT_VOICE) {
+                // 语音按钮被点击
+                listener.onTitleClick(v, ACTION_SEARCH_VOICE, null);
+            } else {
+                listener.onTitleClick(v, ACTION_SEARCH_DELETE, null);
+            }
+        } else if (v.equals(tvCenter)) {
+            listener.onTitleClick(v, ACTION_CENTER_TEXT, null);
+        }
+    }
+
+
+    public void setLeftType(int leftType) {
+        this.leftType = leftType;
+        initMainLeftViews(rlMain.getContext());
+    }
+
+    public void setRightType(int rightType) {
+        this.rightType = rightType;
+        initMainRightViews(rlMain.getContext());
+    }
+
+    public void setCenterType(int centerType) {
+        this.centerType = centerType;
+        initMainCenterViews(rlMain.getContext());
+    }
+
+    /**
+     * 设置背景颜色
+     *
+     * @param color
+     */
+    @Override
+    public void setBackgroundColor(int color) {
+        if (viewStatusBarFill != null) {
+            viewStatusBarFill.setBackgroundColor(color);
+        }
+        rlMain.setBackgroundColor(color);
+    }
+
+    /**
+     * 设置背景图片
+     *
+     * @param resource
+     */
+    @Override
+    public void setBackgroundResource(int resource) {
+        setBackgroundColor(Color.TRANSPARENT);
+        super.setBackgroundResource(resource);
+    }
+
+    /**
+     * 设置状态栏颜色
+     *
+     * @param color
+     */
+    public void setStatusBarColor(int color) {
+        if (viewStatusBarFill != null) {
+            viewStatusBarFill.setBackgroundColor(color);
+        }
+    }
+
+    /**
+     * 是否填充状态栏
+     *
+     * @param show
+     */
+    public void showStatusBar(boolean show) {
+        if (viewStatusBarFill != null) {
+            viewStatusBarFill.setVisibility(show ? View.VISIBLE : View.GONE);
+        }
+    }
+
+    /**
+     * 切换状态栏模式
+     */
+    public void toggleStatusBarMode() {
+        Window window = getWindow();
+        if (window == null) return;
+        StatusBarUtils.transparentStatusBar(window);
+        if (statusBarMode == 0) {
+            statusBarMode = 1;
+            StatusBarUtils.setLightMode(window);
+        } else {
+            statusBarMode = 0;
+            StatusBarUtils.setDarkMode(window);
+        }
+    }
+
+    public RelativeLayout getTitleView() {
+        return rlMain;
+    }
+
+    /**
+     * 获取标题栏底部横线
+     *
+     * @return
+     */
+    public View getBottomLine() {
+        return viewBottomLine;
+    }
+
+    /**
+     * 获取标题栏左边TextView，对应leftType = textView
+     *
+     * @return
+     */
+    public TextView getLeftTextView() {
+        if (null == tvLeft) {
+            setLeftType(TYPE_TEXTVIEW);
+        }
+        return tvLeft;
+    }
+
+    /**
+     * 获取标题栏左边ImageButton，对应leftType = imageButton
+     *
+     * @return
+     */
+    public ImageButton getLeftImageButton() {
+        if (null == btnLeft) {
+            setLeftType(TYPE_IMAGEBUTTON_SEARCHVIEW);
+        }
+        return btnLeft;
+    }
+
+    /**
+     * 获取标题栏右边TextView，对应rightType = textView
+     *
+     * @return
+     */
+    public TextView getRightTextView() {
+        if (null == tvRight) {
+            setRightType(TYPE_TEXTVIEW);
+        }
+        return tvRight;
+    }
+
+    /**
+     * 获取标题栏右边ImageButton，对应rightType = imageButton
+     *
+     * @return
+     */
+    public ImageButton getRightImageButton() {
+        if (null == btnLeft) {
+            setLeftType(TYPE_IMAGEBUTTON_SEARCHVIEW);
+        }
+        return btnRight;
+    }
+
+    public LinearLayout getCenterLayout() {
+        return llMainCenter;
+    }
+
+    /**
+     * 获取标题栏中间TextView，对应centerType = textView
+     *
+     * @return
+     */
+    public TextView getCenterTextView() {
+        if (null == tvCenter) {
+            setLeftType(TYPE_TEXTVIEW);
+        }
+        return tvCenter;
+    }
+
+    public TextView getCenterSubTextView() {
+        return tvCenterSub;
+    }
+
+    /**
+     * 获取搜索框布局，对应centerType = searchView
+     *
+     * @return
+     */
+    public RelativeLayout getCenterSearchView() {
+        return rlMainCenterSearch;
+    }
+
+    /**
+     * 获取搜索框内部输入框，对应centerType = searchView
+     *
+     * @return
+     */
+    public EditText getCenterSearchEditText() {
+        return etSearchHint;
+    }
+
+    /**
+     * 获取搜索框右边图标ImageView，对应centerType = searchView
+     *
+     * @return
+     */
+    public ImageView getCenterSearchRightImageView() {
+        return ivDelete;
+    }
+
+    public ImageView getCenterSearchLeftImageView() {
+        return ivSearch;
+    }
+
+    /**
+     * 获取左边自定义布局
+     *
+     * @return
+     */
+    public View getLeftCustomView() {
+        return viewCustomLeft;
+    }
+
+    /**
+     * 获取右边自定义布局
+     *
+     * @return
+     */
+    public View getRightCustomView() {
+        return viewCustomRight;
+    }
+
+    /**
+     * 获取中间自定义布局视图
+     *
+     * @return
+     */
+    public View getCenterCustomView() {
+        return centerCustomView;
+    }
+
+    /**
+     * @param leftView
+     */
+    public void setLeftView(View leftView) {
+        if (leftView.getId() == View.NO_ID) {
+            leftView.setId(StatusBarUtils.generateViewId());
+        }
+        LayoutParams leftInnerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);
+        leftInnerParams.addRule(RelativeLayout.ALIGN_PARENT_START);
+        leftInnerParams.addRule(RelativeLayout.CENTER_VERTICAL);
+        rlMain.addView(leftView, leftInnerParams);
+    }
+
+    /**
+     * @param centerView
+     */
+    public void setCenterView(View centerView) {
+        if (centerView.getId() == View.NO_ID) {
+            centerView.setId(StatusBarUtils.generateViewId());
+        }
+        LayoutParams centerInnerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);
+        centerInnerParams.addRule(RelativeLayout.CENTER_IN_PARENT);
+        centerInnerParams.addRule(RelativeLayout.CENTER_VERTICAL);
+        rlMain.addView(centerView, centerInnerParams);
+    }
+
+    /**
+     * @param rightView
+     */
+    public void setRightView(View rightView) {
+        if (rightView.getId() == View.NO_ID) {
+            rightView.setId(StatusBarUtils.generateViewId());
+        }
+        LayoutParams rightInnerParams = new LayoutParams(WRAP_CONTENT, MATCH_PARENT);
+        rightInnerParams.addRule(RelativeLayout.ALIGN_PARENT_END);
+        rightInnerParams.addRule(RelativeLayout.CENTER_VERTICAL);
+        rlMain.addView(rightView, rightInnerParams);
+    }
+
+    /**
+     * 显示或隐藏输入法,centerType="searchView"模式下有效
+     *
+     * @return
+     */
+    public void showSoftInputKeyboard(boolean show) {
+        if (centerSearchEditable && show) {
+            etSearchHint.setFocusable(true);
+            etSearchHint.setFocusableInTouchMode(true);
+            etSearchHint.requestFocus();
+            ScreenUtils.showSoftInputKeyBoard(getContext(), etSearchHint);
+        } else {
+            ScreenUtils.hideSoftInputKeyBoard(getContext(), etSearchHint);
+        }
+    }
+
+    /**
+     * 设置搜索框右边图标
+     *
+     * @param res
+     */
+    public void setSearchRightImageResource(int res) {
+        if (ivDelete != null) {
+            ivDelete.setImageResource(res);
+        }
+    }
+
+    /**
+     * 获取SearchView输入结果
+     */
+    public String getSearchKey() {
+        if (etSearchHint != null) {
+            return etSearchHint.getText().toString();
+        }
+        return "";
+    }
+
+    /**
+     * 设置点击事件监听
+     *
+     * @param listener
+     */
+
+    public void setListener(OnTitleBarListener listener) {
+        this.listener = listener;
+    }
+
+    public void setDoubleClickListener(OnTitleBarDoubleClickListener doubleClickListener) {
+        this.doubleClickListener = doubleClickListener;
+    }
+
+    /**
+     * 设置双击监听
+     */
+
+
+    public static final int ACTION_LEFT_TEXT = 1;        // 左边TextView被点击
+    public static final int ACTION_LEFT_BUTTON = 2;      // 左边ImageBtn被点击
+    public static final int ACTION_RIGHT_TEXT = 3;       // 右边TextView被点击
+    public static final int ACTION_RIGHT_BUTTON = 4;     // 右边ImageBtn被点击
+    public static final int ACTION_SEARCH = 5;           // 搜索框被点击,搜索框不可输入的状态下会被触发
+    public static final int ACTION_SEARCH_SUBMIT = 6;    // 搜索框输入状态下,键盘提交触发
+    public static final int ACTION_SEARCH_VOICE = 7;     // 语音按钮被点击
+    public static final int ACTION_SEARCH_DELETE = 8;    // 搜索删除按钮被点击
+    public static final int ACTION_CENTER_TEXT = 9;     // 中间文字点击
+
+    /**
+     * 点击事件
+     */
+    public interface OnTitleBarListener {
+        /**
+         * @param v
+         * @param action 对应ACTION_XXX, 如ACTION_LEFT_TEXT
+         * @param extra  中间为搜索框时,如果可输入,点击键盘的搜索按钮,会返回输入关键词
+         */
+        void onTitleClick(View v, int action, String extra);
+    }
+
+    /**
+     * 标题栏双击事件监听
+     */
+    public interface OnTitleBarDoubleClickListener {
+        void onClicked(View v);
+    }
+}
Index: app/src/main/java/com/guansu/management/base/BaseFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/base/BaseFragment.java	(date 1577180410359)
+++ app/src/main/java/com/guansu/management/base/BaseFragment.java	(date 1577180410359)
@@ -0,0 +1,295 @@
+package com.guansu.management.base;
+
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import androidx.annotation.Nullable;
+import com.guansu.management.R;
+import com.guansu.management.api.APIException;
+import com.guansu.management.api.ServiceException;
+import com.guansu.management.common.ReplaceViewHelper;
+import com.guansu.management.wigdet.CommonTitleBar;
+import java.net.ConnectException;
+import java.net.SocketTimeoutException;
+import java.net.UnknownHostException;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.disposables.Disposable;
+import me.yokeyword.fragmentation_swipeback.SwipeBackFragment;
+
+/**
+ * Created by dongyaoayo
+ */
+
+public abstract class BaseFragment<T extends BasePresenter> extends SwipeBackFragment implements BaseInterface,
+        CommonTitleBar.OnTitleBarListener {
+    private BaseActivity mContext;
+
+    protected CommonTitleBar mTitlebar;
+
+    protected ReplaceViewHelper defaultReplaceViewHelper;
+    public View mContentView;
+    /**
+     * 使用CompositeSubscription来持有所有的Subscriptions
+     */
+    private CompositeDisposable mCompositeDisposable;
+    public T presenter;
+    private View childView;
+    private Unbinder unbinder;
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setParallaxOffset(0.5f);
+        mContext = getBaseActivity();
+
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragement_base, container, false);
+        defaultReplaceViewHelper = new ReplaceViewHelper(getContext());
+        setContentChildView(view);
+        initTitleView(view);
+        initView(view);
+        //返回一个Unbinder值（进行解绑），注意这里的this不能使用getActivity()
+        unbinder = ButterKnife.bind(this, view);
+        return canSwipeBack() ? attachToSwipeBack(view) : view;
+    }
+
+    @Override
+    public void onLazyInitView(@Nullable Bundle savedInstanceState) {
+        super.onLazyInitView(savedInstanceState);
+        bindEvent();
+    }
+
+    public void setContentChildView(View view) {
+        LinearLayout llBaseLayout = view.findViewById(R.id.llBaseLayout);
+        childView = LayoutInflater.from(mContext).inflate(onSetLayoutId(), llBaseLayout, true);
+    }
+
+    public void initTitleView(View view) {
+        mTitlebar = view.findViewById(R.id.titlebar);
+        mTitlebar.showStatusBar(false);
+        mTitlebar.setListener(this);
+    }
+
+    public void setTitle(CharSequence title) {
+        if (null != title) {
+            mTitlebar.getCenterTextView().setText(title);
+        }
+    }
+
+    public void removeTitleAndStatusBar() {
+        mTitlebar.setVisibility(View.GONE);
+    }
+
+    public void hideTitle() {
+        mTitlebar.getTitleView().setVisibility(View.GONE);
+    }
+
+    public void setLoadingContentView(View mContentView) {
+        this.mContentView = mContentView;
+        showLoadingPage();
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        if (null != mCompositeDisposable) {
+            mCompositeDisposable.dispose();
+        }
+        //解绑 presenter
+        if (presenter != null) {
+            presenter.unsubscribe();
+        }
+    }
+
+    /**
+     * 创建相应的 presenter
+     */
+    public void createPresenter(T presenter) {
+        if (presenter != null) {
+            this.presenter = presenter;
+        }
+
+    }
+
+
+    public BaseActivity getBaseActivity() {
+        return (BaseActivity) this.getActivity();
+    }
+
+    /**
+     * 初始化 API  不使用mvp需要初始化
+     */
+    public void initApi() {
+        mCompositeDisposable = new CompositeDisposable();
+    }
+
+    /**
+     * 设置布局文件
+     *
+     * @return 返回布局文件资源Id
+     */
+    public abstract int onSetLayoutId();
+
+    public abstract void initView(View view);
+
+    public abstract void bindEvent();
+
+    public abstract boolean canSwipeBack();
+/*
+    public <T> Subscriber newMySubscriber(final SimpleMyCallBack onNext) {
+        return mContext.newMySubscriber(onNext);
+    }*/
+
+    public void showToast(String content) {
+        mContext.showToast(content);
+    }
+
+    public void showLoadingDialog() {
+        mContext.showLoadingDialog();
+    }
+
+    public void showLoadingDialog(String message) {
+        mContext.showLoadingDialog(message);
+    }
+
+    public void hideLoadingDialog() {
+        mContext.hideLoadingDialog();
+    }
+
+    public void addDisposable(Disposable d) {
+        if (null != mCompositeDisposable) {
+            mCompositeDisposable.add(d);
+        } else {
+            presenter.addDisposable(d);
+        }
+    }
+
+    public void toLogin(String message) {
+        mContext.toLogin(message);
+    }
+
+    public void skipAct(Class clazz) {
+        mContext.skipAct(clazz);
+    }
+
+    public void skipAct(Class clazz, Bundle bundle) {
+        mContext.skipAct(clazz, bundle);
+    }
+
+    public void skipAct(Class clazz, Bundle bundle, int flags) {
+        mContext.skipAct(clazz, bundle, flags);
+    }
+
+    @Override
+    public boolean isLogin() {
+        return mContext.isLogin();
+    }
+
+
+    public void showPage() {
+        defaultReplaceViewHelper.removeView();
+    }
+
+    public void showError(Throwable e) {
+        if (e instanceof UnknownHostException || e instanceof ConnectException || e instanceof SocketTimeoutException) {
+            showNetError();
+        } else if (e instanceof ServiceException || e instanceof APIException) {
+            showServiceError();
+        } else {
+            showServiceError();
+        }
+    }
+
+    @Override
+    public void showServiceError() {
+        View view;
+        if (mContentView.getParent() instanceof ViewGroup) {
+            view = LayoutInflater.from(getContext()).inflate(R.layout.layout_status_error, (ViewGroup) mContentView.getParent(), false);
+        } else {
+            view = LayoutInflater.from(getContext()).inflate(R.layout.layout_status_error, (ViewGroup) childView, false);
+        }
+        ImageView iv_status = (ImageView) view.findViewById(R.id.iv_status);
+        iv_status.setImageResource(R.drawable.fragmentation_help);
+        TextView tv_status = (TextView) view.findViewById(R.id.tv_status);
+        tv_status.setText("内容获取失败，请点击按钮重试");
+        Button btn_retry = (Button) view.findViewById(R.id.btn_retry);
+        btn_retry.setVisibility(View.VISIBLE);
+        btn_retry.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                retryloading();
+            }
+        });
+        defaultReplaceViewHelper.toReplaceView(mContentView, view);
+    }
+
+    public void showNoData() {
+        View view;
+        if (mContentView.getParent() instanceof ViewGroup) {
+            view = LayoutInflater.from(getContext()).inflate(R.layout.layout_status_error, (ViewGroup) mContentView.getParent(), false);
+        } else {
+            view = LayoutInflater.from(getContext()).inflate(R.layout.layout_status_error, (ViewGroup) childView, false);
+        }
+        ImageView iv_status = (ImageView) view.findViewById(R.id.iv_status);
+        iv_status.setImageResource(R.drawable.fragmentation_help);
+        TextView tv_status = (TextView) view.findViewById(R.id.tv_status);
+        tv_status.setText("暂无数据");
+        defaultReplaceViewHelper.toReplaceView(mContentView, view);
+    }
+
+    @Override
+    public void showLoadingPage() {
+        View view;
+        if (mContentView.getParent() instanceof ViewGroup) {
+            view = LayoutInflater.from(getContext()).inflate(R.layout.layout_loading, (ViewGroup) mContentView.getParent(), false);
+        } else {
+            view = LayoutInflater.from(getContext()).inflate(R.layout.layout_loading, (ViewGroup) childView, false);
+        }
+        defaultReplaceViewHelper.toReplaceView(mContentView, view);
+    }
+
+    @Override
+    public void showNetError() {
+        View view;
+        if (mContentView.getParent() instanceof ViewGroup) {
+            view = LayoutInflater.from(getContext()).inflate(R.layout.layout_status_error, (ViewGroup) mContentView.getParent(), false);
+        } else {
+            view = LayoutInflater.from(getContext()).inflate(R.layout.layout_status_error, (ViewGroup) childView, false);
+        }
+        ImageView iv_status = (ImageView) view.findViewById(R.id.iv_status);
+        iv_status.setImageResource(R.drawable.fragmentation_help);
+        TextView tv_status = (TextView) view.findViewById(R.id.tv_status);
+        tv_status.setText("您的网络失联了");
+        Button btn_retry = (Button) view.findViewById(R.id.btn_retry);
+        btn_retry.setVisibility(View.VISIBLE);
+        btn_retry.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                retryloading();
+            }
+        });
+        defaultReplaceViewHelper.toReplaceView(mContentView, view);
+    }
+
+    protected void retryloading() {
+
+    }
+
+    @Override
+    public void onTitleClick(View v, int action, String extra) {
+        if (action == CommonTitleBar.ACTION_LEFT_BUTTON
+                || action == CommonTitleBar.ACTION_LEFT_TEXT) {
+            _mActivity.onBackPressed();
+        }
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/utils/DimensUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/utils/DimensUtils.java	(date 1575452424543)
+++ app/src/main/java/com/guansu/management/wigdet/utils/DimensUtils.java	(date 1575452424543)
@@ -0,0 +1,22 @@
+package com.guansu.management.wigdet.utils;
+
+import android.content.Context;
+import android.util.TypedValue;
+
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+
+public class DimensUtils {
+
+    public static int dip2px(Context context, float dpValue) {
+        final float scale = context.getResources().getDisplayMetrics().density;
+        return (int) (dpValue * scale + 0.5f);
+    }
+
+    public static int sp2px(Context context, float spValue) {
+        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, spValue, context.getResources().getDisplayMetrics());
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/utils/PhoneNumberValid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/utils/PhoneNumberValid.java	(date 1575853901980)
+++ app/src/main/java/com/guansu/management/wigdet/utils/PhoneNumberValid.java	(date 1575853901980)
@@ -0,0 +1,16 @@
+package com.guansu.management.wigdet.utils;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+/**
+ * @author: dongyaoyao
+ */
+public class PhoneNumberValid {
+    public static boolean isMobileNO(String mobiles) {
+        Pattern p = Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$");
+        Matcher m = p.matcher(mobiles);
+        System.out.println(m.matches() + "---");
+        return m.matches();
+    }
+}
Index: app/src/main/java/com/guansu/management/ui/welcome/WelcomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/ui/welcome/WelcomeFragment.java	(date 1577254226078)
+++ app/src/main/java/com/guansu/management/ui/welcome/WelcomeFragment.java	(date 1577254226078)
@@ -0,0 +1,76 @@
+package com.guansu.management.ui.welcome;
+import android.annotation.SuppressLint;
+import android.os.CountDownTimer;
+import android.view.View;
+import android.widget.Button;
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.common.UserSharedPreferencesUtils;
+import com.guansu.management.fragment.LoginFragment;
+import com.guansu.management.fragment.MainFragment;
+import butterknife.BindView;
+
+/**
+ * Created by dongyaoyao
+ */
+
+public class WelcomeFragment extends BaseFragment<WelcomeContract.Presenter>
+
+        implements WelcomeContract.WelcomeInterface {
+    @BindView(R.id.butNext)
+    Button butNext;
+    UserSharedPreferencesUtils userSharedPreferencesUtils;
+    public static WelcomeFragment newInstance() {
+        WelcomeFragment fragment = new WelcomeFragment();
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_wecom;
+    }
+
+    @SuppressLint("MissingPermission")
+    @Override
+    public void initView(View view) {
+        hideTitle();
+    }
+
+        @Override
+    public void bindEvent() {
+            userSharedPreferencesUtils = new UserSharedPreferencesUtils(getContext());
+        createPresenter(new WelcomePresenter(this, 3 * 1000));
+        timer.start();
+    }
+
+    CountDownTimer timer = new CountDownTimer(3 * 1000, 1000) {
+        @Override
+        public void onTick(long millisUntilFinished) {
+            butNext.setText(millisUntilFinished / 1000 + "S");
+        }
+
+        @Override
+        public void onFinish() {
+            butNext.setClickable(true);
+        }
+    };
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+
+    @Override
+    public void toHome() {
+        startWithPop(MainFragment.newInstance());
+    }
+
+    @Override
+    public void toGuide() {
+    }
+
+    @Override
+    public void toLogin(String message) {
+            startWithPop(LoginFragment.newInstance());
+    }
+}
Index: app/src/main/java/com/guansu/management/paymentmoney/AuthResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/paymentmoney/AuthResult.java	(date 1577073939823)
+++ app/src/main/java/com/guansu/management/paymentmoney/AuthResult.java	(date 1577073939823)
@@ -0,0 +1,113 @@
+package com.guansu.management.paymentmoney;
+
+import android.text.TextUtils;
+
+import java.util.Map;
+
+public class AuthResult {
+
+	private String resultStatus;
+	private String result;
+	private String memo;
+	private String resultCode;
+	private String authCode;
+	private String alipayOpenId;
+
+	public AuthResult(Map<String, String> rawResult, boolean removeBrackets) {
+		if (rawResult == null) {
+			return;
+		}
+
+		for (String key : rawResult.keySet()) {
+			if (TextUtils.equals(key, "resultStatus")) {
+				resultStatus = rawResult.get(key);
+			} else if (TextUtils.equals(key, "result")) {
+				result = rawResult.get(key);
+			} else if (TextUtils.equals(key, "memo")) {
+				memo = rawResult.get(key);
+			}
+		}
+
+		String[] resultValue = result.split("&");
+		for (String value : resultValue) {
+			if (value.startsWith("alipay_open_id")) {
+				alipayOpenId = removeBrackets(getValue("alipay_open_id=", value), removeBrackets);
+				continue;
+			}
+			if (value.startsWith("auth_code")) {
+				authCode = removeBrackets(getValue("auth_code=", value), removeBrackets);
+				continue;
+			}
+			if (value.startsWith("result_code")) {
+				resultCode = removeBrackets(getValue("result_code=", value), removeBrackets);
+				continue;
+			}
+		}
+
+	}
+
+	private String removeBrackets(String str, boolean remove) {
+		if (remove) {
+			if (!TextUtils.isEmpty(str)) {
+				if (str.startsWith("\"")) {
+					str = str.replaceFirst("\"", "");
+				}
+				if (str.endsWith("\"")) {
+					str = str.substring(0, str.length() - 1);
+				}
+			}
+		}
+		return str;
+	}
+
+	@Override
+	public String toString() {
+		return "authCode={" + authCode + "}; resultStatus={" + resultStatus + "}; memo={" + memo + "}; result={" + result + "}";
+	}
+
+	private String getValue(String header, String data) {
+		return data.substring(header.length(), data.length());
+	}
+
+	/**
+	 * @return the resultStatus
+	 */
+	public String getResultStatus() {
+		return resultStatus;
+	}
+
+	/**
+	 * @return the memo
+	 */
+	public String getMemo() {
+		return memo;
+	}
+
+	/**
+	 * @return the result
+	 */
+	public String getResult() {
+		return result;
+	}
+
+	/**
+	 * @return the resultCode
+	 */
+	public String getResultCode() {
+		return resultCode;
+	}
+
+	/**
+	 * @return the authCode
+	 */
+	public String getAuthCode() {
+		return authCode;
+	}
+
+	/**
+	 * @return the alipayOpenId
+	 */
+	public String getAlipayOpenId() {
+		return alipayOpenId;
+	}
+}
Index: app/src/main/java/com/guansu/management/wigdet/utils/TimeCount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/utils/TimeCount.java	(date 1575857133101)
+++ app/src/main/java/com/guansu/management/wigdet/utils/TimeCount.java	(date 1575857133101)
@@ -0,0 +1,32 @@
+package com.guansu.management.wigdet.utils;
+
+import android.graphics.Color;
+import android.os.CountDownTimer;
+import android.widget.Button;
+
+/**
+ * @author: dongyaoyao
+ */
+public class TimeCount extends CountDownTimer {
+    private Button btnGetcode;
+
+    public TimeCount(long millisInFuture, long countDownInterval, Button btnGetcode) {
+        super(millisInFuture, countDownInterval);
+        btnGetcode = this.btnGetcode;
+    }
+
+    @Override
+    public void onTick(long millisUntilFinished) {
+        btnGetcode.setBackgroundColor(Color.parseColor("#B6B6D8"));
+        btnGetcode.setClickable(false);
+        btnGetcode.setText("(" + millisUntilFinished / 1000 + ") 秒后可重新发送");
+    }
+
+    @Override
+    public void onFinish() {
+        btnGetcode.setText("重新获取验证码");
+        btnGetcode.setClickable(true);
+        btnGetcode.setBackgroundColor(Color.parseColor("#4EB84A"));
+
+    }
+}
Index: app/src/main/java/com/guansu/management/config/Payment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/config/Payment.java	(date 1577073765733)
+++ app/src/main/java/com/guansu/management/config/Payment.java	(date 1577073765733)
@@ -0,0 +1,42 @@
+package com.guansu.management.config;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class Payment {
+    /**
+     * 支付宝
+     */
+    /**
+     * 用于支付宝支付业务的入参 app_id。
+     */
+    public static final String APPID = "2016101600703264";
+
+    /**
+     * 用于支付宝账户登录授权业务的入参 pid。
+     */
+    public static final String PID = "";
+
+    /**
+     * 用于支付宝账户登录授权业务的入参 target_id。
+     */
+    public static final String TARGET_ID = "";
+
+    /**
+     * pkcs8 格式的商户私钥。
+     * <p>
+     * 如下私钥，RSA2_PRIVATE 或者 RSA_PRIVATE 只需要填入一个，如果两个都设置了，本 Demo 将优先
+     * 使用 RSA2_PRIVATE。RSA2_PRIVATE 可以保证商户交易在更加安全的环境下进行，建议商户使用
+     * RSA2_PRIVATE。
+     * <p>
+     * 建议使用支付宝提供的公私钥生成工具生成和获取 RSA2_PRIVATE。
+     * 工具地址：https://doc.open.alipay.com/docs/doc.htm?treeId=291&articleId=106097&docType=1
+     */
+    public static final String RSA2_PRIVATE = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCL7uK7qsXo9DYF+RT1hvtLh9rprGZpJLh3+/WM8apTQom3DprFIA4ODAS1ugB1GFgATn9B7Z9ElZRzZK3Stno5EvRcp5bdfolbjYkdCjunTtQEFouhs0lI54HKYBKrq4/+x4a9m9Fh0Yit3enXSDRRb/398VUqmRBAW6JYzou8B60mk5Vy8Una63I4QkonRnwJ9vmEWHsUQJxaY2p+HdfFZfJ7GiY5LKFDaac1mRmSzYmgcZSfdQQ1qYAG/6mVT/eTZzTSTQ3TBhHI/l4El9L2MgWiuISYdFLz8Zd6WluwWv/iGgG9UeCAFI/aU37WY77Uq08p07Ri1uYk7y2SemUPAgMBAAECggEAOBL0PKvEPwONmnsj0PfUP4IjUTxKlZunaD1JOr+kt1SUhwyNLK0ZtLtQL9pnUIT+zrCmAi9MgVlHca5IkYWaGMDltzNZG00Xkd53sXFmUjcecrzuG1AS7+oFcqlpEe3f+ALQla6ZCw/CK5ofmKtQe8nbCCXrMPTBNGkD935dNG1vTw6v+kWlGEZOG4f4Hd+TliK/5o7AGGc7Adlbp0lfteQCP3bGAIaOQre0I4Iw6AninT7jXKlT5ZWwek5XfN/AjnNDgkkPwu218vp1SJ1Fq8wOBjyfWyyYPa9r/a2EuImw8Z82JLqwRus6Nuk/mu6hsSQ/2z/oURysEjISbR750QKBgQDCtV1Ipl0+nDM/2v0xGSTfGdqM2Vcs0FdbjqRl8M/09W+ajSnU/K7N3/0x5Wd4uIi/+STWIqoVyau1OKaDYslVsK4rHUZWg8B0PgmOMBzZ1EGDYsRoSgvtSa/BFsz5BA5Rz198eEb4uL0CT6vb5AS4rIMnV0tur2Rw8JGHO7MwawKBgQC3+3AOXTPClbJEKmeM66pmtAqB591jVDxZpH9ZZEFmH8LzePQkyuc7bOEm7Zmid/GDuvnXgUod56NZsPDFO49VQ9VYpnUP5h3Q2WJWQ08Q1EBOmjuHIEL4hkpmN/Hh9f1lOU8yvo1XoVR2JS8lqigALIFH5d/fEJuuFcGFXCA27QKBgCYhIi1x9tyl9htRJTgSNnhCNdxTS5EJE7JoUqVr7S2JStu3PTPqb8j9TjYROJwZdx4xChetHiW6IpgQifs8wzS2rsTerMGQd4XMCE8B+QRnXpT+KHxL094aCgMEFgvF0ZAPziEv5KYcd1cWhw8+rfYEQoLXw3vfeQns8nLLLCIVAoGBAILR/rO4Af3yg3eEz2ycheXRT0dfn0PpuZ/kH8loSDhdjTmiX7dpr1HJ8a7Ec+Had5i7cruR6ymoc7Zq4kjcOObf/Ou0MLjFX54JdKrx4V6ODcvWT02d2wDsPCrCzPNm/m7jeTUT2VzeEjiP6B5YB2lYO/Trt2vdW1VFkv1IrH9hAoGBALUGctjigceKYN8eQ9q1rw8hsT4NDP/CFQ8NENTfD/Ts3AKHp14gu+9zq3xyIpWcjEUr29Kh6EgCgxvSPsTuQzwG3eU4/fy/U7QSpNwAZrIWNUvBizQAaHHK1QbH5kYFO/KDPJHwXq35mKxG02UdQjXi0CJvU/TXtbHPVYnm7rKv";
+    public static final String RSA_PRIVATE = "";
+
+    public static final int SDK_PAY_FLAG = 1;
+    public static final int SDK_AUTH_FLAG = 2;
+    public static final int REQUEST_READ_PHONE_STATE = 0;
+}
Index: app/src/main/java/com/guansu/management/paymentmoney/Base64.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/paymentmoney/Base64.java	(date 1577073939747)
+++ app/src/main/java/com/guansu/management/paymentmoney/Base64.java	(date 1577073939747)
@@ -0,0 +1,268 @@
+package com.guansu.management.paymentmoney;
+
+public final class Base64 {
+
+	private static final int BASELENGTH = 128;
+	private static final int LOOKUPLENGTH = 64;
+	private static final int TWENTYFOURBITGROUP = 24;
+	private static final int EIGHTBIT = 8;
+	private static final int SIXTEENBIT = 16;
+	private static final int FOURBYTE = 4;
+	private static final int SIGN = -128;
+	private static char PAD = '=';
+	private static byte[] base64Alphabet = new byte[BASELENGTH];
+	private static char[] lookUpBase64Alphabet = new char[LOOKUPLENGTH];
+
+	static {
+		for (int i = 0; i < BASELENGTH; ++i) {
+			base64Alphabet[i] = -1;
+		}
+		for (int i = 'Z'; i >= 'A'; i--) {
+			base64Alphabet[i] = (byte) (i - 'A');
+		}
+		for (int i = 'z'; i >= 'a'; i--) {
+			base64Alphabet[i] = (byte) (i - 'a' + 26);
+		}
+
+		for (int i = '9'; i >= '0'; i--) {
+			base64Alphabet[i] = (byte) (i - '0' + 52);
+		}
+
+		base64Alphabet['+'] = 62;
+		base64Alphabet['/'] = 63;
+
+		for (int i = 0; i <= 25; i++) {
+			lookUpBase64Alphabet[i] = (char) ('A' + i);
+		}
+
+		for (int i = 26, j = 0; i <= 51; i++, j++) {
+			lookUpBase64Alphabet[i] = (char) ('a' + j);
+		}
+
+		for (int i = 52, j = 0; i <= 61; i++, j++) {
+			lookUpBase64Alphabet[i] = (char) ('0' + j);
+		}
+		lookUpBase64Alphabet[62] = (char) '+';
+		lookUpBase64Alphabet[63] = (char) '/';
+
+	}
+
+	private static boolean isWhiteSpace(char octect) {
+		return (octect == 0x20 || octect == 0xd || octect == 0xa || octect == 0x9);
+	}
+
+	private static boolean isPad(char octect) {
+		return (octect == PAD);
+	}
+
+	private static boolean isData(char octect) {
+		return (octect < BASELENGTH && base64Alphabet[octect] != -1);
+	}
+
+	/**
+	 * Encodes hex octects into Base64
+	 * 
+	 * @param binaryData
+	 *            Array containing binaryData
+	 * @return Encoded Base64 array
+	 */
+	public static String encode(byte[] binaryData) {
+
+		if (binaryData == null) {
+			return null;
+		}
+
+		int lengthDataBits = binaryData.length * EIGHTBIT;
+		if (lengthDataBits == 0) {
+			return "";
+		}
+
+		int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;
+		int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;
+		int numberQuartet = fewerThan24bits != 0 ? numberTriplets + 1
+				: numberTriplets;
+		char encodedData[] = null;
+
+		encodedData = new char[numberQuartet * 4];
+
+		byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;
+
+		int encodedIndex = 0;
+		int dataIndex = 0;
+
+		for (int i = 0; i < numberTriplets; i++) {
+			b1 = binaryData[dataIndex++];
+			b2 = binaryData[dataIndex++];
+			b3 = binaryData[dataIndex++];
+
+			l = (byte) (b2 & 0x0f);
+			k = (byte) (b1 & 0x03);
+
+			byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2)
+					: (byte) ((b1) >> 2 ^ 0xc0);
+			byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4)
+					: (byte) ((b2) >> 4 ^ 0xf0);
+			byte val3 = ((b3 & SIGN) == 0) ? (byte) (b3 >> 6)
+					: (byte) ((b3) >> 6 ^ 0xfc);
+
+			encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];
+			encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];
+			encodedData[encodedIndex++] = lookUpBase64Alphabet[(l << 2) | val3];
+			encodedData[encodedIndex++] = lookUpBase64Alphabet[b3 & 0x3f];
+		}
+
+		// form integral number of 6-bit groups
+		if (fewerThan24bits == EIGHTBIT) {
+			b1 = binaryData[dataIndex];
+			k = (byte) (b1 & 0x03);
+			
+			byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2)
+					: (byte) ((b1) >> 2 ^ 0xc0);
+			encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];
+			encodedData[encodedIndex++] = lookUpBase64Alphabet[k << 4];
+			encodedData[encodedIndex++] = PAD;
+			encodedData[encodedIndex++] = PAD;
+		} else if (fewerThan24bits == SIXTEENBIT) {
+			b1 = binaryData[dataIndex];
+			b2 = binaryData[dataIndex + 1];
+			l = (byte) (b2 & 0x0f);
+			k = (byte) (b1 & 0x03);
+
+			byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2)
+					: (byte) ((b1) >> 2 ^ 0xc0);
+			byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4)
+					: (byte) ((b2) >> 4 ^ 0xf0);
+
+			encodedData[encodedIndex++] = lookUpBase64Alphabet[val1];
+			encodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];
+			encodedData[encodedIndex++] = lookUpBase64Alphabet[l << 2];
+			encodedData[encodedIndex++] = PAD;
+		}
+
+		return new String(encodedData);
+	}
+
+	/**
+	 * Decodes Base64 data into octects
+	 * 
+	 * @param encoded
+	 *            string containing Base64 data
+	 * @return Array containind decoded data.
+	 */
+	public static byte[] decode(String encoded) {
+
+		if (encoded == null) {
+			return null;
+		}
+
+		char[] base64Data = encoded.toCharArray();
+		// remove white spaces
+		int len = removeWhiteSpace(base64Data);
+
+		if (len % FOURBYTE != 0) {
+			return null;// should be divisible by four
+		}
+
+		int numberQuadruple = (len / FOURBYTE);
+
+		if (numberQuadruple == 0) {
+			return new byte[0];
+		}
+
+		byte decodedData[] = null;
+		byte b1 = 0, b2 = 0, b3 = 0, b4 = 0;
+		char d1 = 0, d2 = 0, d3 = 0, d4 = 0;
+
+		int i = 0;
+		int encodedIndex = 0;
+		int dataIndex = 0;
+		decodedData = new byte[(numberQuadruple) * 3];
+
+		for (; i < numberQuadruple - 1; i++) {
+
+			if (!isData((d1 = base64Data[dataIndex++]))
+					|| !isData((d2 = base64Data[dataIndex++]))
+					|| !isData((d3 = base64Data[dataIndex++]))
+					|| !isData((d4 = base64Data[dataIndex++]))) {
+				return null;
+			}// if found "no data" just return null
+
+			b1 = base64Alphabet[d1];
+			b2 = base64Alphabet[d2];
+			b3 = base64Alphabet[d3];
+			b4 = base64Alphabet[d4];
+
+			decodedData[encodedIndex++] = (byte) (b1 << 2 | b2 >> 4);
+			decodedData[encodedIndex++] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
+			decodedData[encodedIndex++] = (byte) (b3 << 6 | b4);
+		}
+
+		if (!isData((d1 = base64Data[dataIndex++]))
+				|| !isData((d2 = base64Data[dataIndex++]))) {
+			return null;// if found "no data" just return null
+		}
+
+		b1 = base64Alphabet[d1];
+		b2 = base64Alphabet[d2];
+
+		d3 = base64Data[dataIndex++];
+		d4 = base64Data[dataIndex++];
+		if (!isData((d3)) || !isData((d4))) {// Check if they are PAD characters
+			if (isPad(d3) && isPad(d4)) {
+				if ((b2 & 0xf) != 0)// last 4 bits should be zero
+				{
+					return null;
+				}
+				byte[] tmp = new byte[i * 3 + 1];
+				System.arraycopy(decodedData, 0, tmp, 0, i * 3);
+				tmp[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);
+				return tmp;
+			} else if (!isPad(d3) && isPad(d4)) {
+				b3 = base64Alphabet[d3];
+				if ((b3 & 0x3) != 0)// last 2 bits should be zero
+				{
+					return null;
+				}
+				byte[] tmp = new byte[i * 3 + 2];
+				System.arraycopy(decodedData, 0, tmp, 0, i * 3);
+				tmp[encodedIndex++] = (byte) (b1 << 2 | b2 >> 4);
+				tmp[encodedIndex] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
+				return tmp;
+			} else {
+				return null;
+			}
+		} else { // No PAD e.g 3cQl
+			b3 = base64Alphabet[d3];
+			b4 = base64Alphabet[d4];
+			decodedData[encodedIndex++] = (byte) (b1 << 2 | b2 >> 4);
+			decodedData[encodedIndex++] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
+			decodedData[encodedIndex++] = (byte) (b3 << 6 | b4);
+
+		}
+
+		return decodedData;
+	}
+
+	/**
+	 * remove WhiteSpace from MIME containing encoded Base64 data.
+	 * 
+	 * @param data
+	 *            the byte array of base64 data (with WS)
+	 * @return the new length
+	 */
+	private static int removeWhiteSpace(char[] data) {
+		if (data == null) {
+			return 0;
+		}
+
+		// count characters that's not whitespace
+		int newSize = 0;
+		int len = data.length;
+		for (int i = 0; i < len; i++) {
+			if (!isWhiteSpace(data[i])) {
+				data[newSize++] = data[i];
+			}
+		}
+		return newSize;
+	}
+}
Index: app/src/main/java/com/guansu/management/activity/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/activity/MainActivity.java	(date 1577256068465)
+++ app/src/main/java/com/guansu/management/activity/MainActivity.java	(date 1577256068465)
@@ -0,0 +1,184 @@
+package com.guansu.management.activity;
+import android.Manifest;
+import android.annotation.TargetApi;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.view.View;
+import com.guansu.management.R;
+import com.guansu.management.base.BaseActivity;
+import com.guansu.management.ui.welcome.WelcomeFragment;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.List;
+/**
+ * Created by dongyaoyao
+ */
+public class MainActivity extends BaseActivity {
+    /**
+     * 需要进行检测的权限数组
+     */
+    protected String[] needPermissions = {
+            Manifest.permission.ACCESS_COARSE_LOCATION,
+            Manifest.permission.ACCESS_FINE_LOCATION,
+            Manifest.permission.WRITE_EXTERNAL_STORAGE,
+            Manifest.permission.READ_EXTERNAL_STORAGE,
+            Manifest.permission.READ_PHONE_STATE
+    };
+
+    private static final int PERMISSON_REQUESTCODE = 0;
+
+    /**
+     * 判断是否需要检测，防止不停的弹框
+     */
+    private boolean isNeedCheck = true;
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (Build.VERSION.SDK_INT >= 23
+                && this.getApplicationInfo().targetSdkVersion >= 23) {
+            if (isNeedCheck) {
+                checkPermissions(needPermissions);
+            }
+        }
+    }
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.activity_main;
+    }
+
+    @Override
+    public void initView() {
+        loadRootFragment(R.id.container, WelcomeFragment.newInstance());
+    }
+    @Override
+    public void bindEvent() {
+    }
+
+    @Override
+    public void onBackPressedSupport() {
+        // 对于 4个类别的主Fragment内的回退back逻辑,已经在其onBackPressedSupport里各自处理了
+        super.onBackPressedSupport();
+    }
+    @Override
+    public void onClick(View v) {
+    }
+    /**
+     * @param permissions
+     * @since 2.5.0
+     */
+    private void checkPermissions(String... permissions) {
+        try {
+            if (Build.VERSION.SDK_INT >= 23
+                    && this.getApplicationInfo().targetSdkVersion >= 23) {
+                List<String> needRequestPermissonList = findDeniedPermissions(permissions);
+                if (null != needRequestPermissonList
+                        && needRequestPermissonList.size() > 0) {
+                    String[] array = needRequestPermissonList.toArray(new String[needRequestPermissonList.size()]);
+                    Method method = getClass().getMethod("requestPermissions", new Class[]{String[].class,
+                            int.class});
+                    method.invoke(this, array, PERMISSON_REQUESTCODE);
+                }
+            }
+        } catch (Throwable e) {
+        }
+    }
+    /**
+     * 获取权限集中需要申请权限的列表
+     *
+     * @param permissions
+     * @return
+     * @since 2.5.0
+     */
+    private List<String> findDeniedPermissions(String[] permissions) {
+        List<String> needRequestPermissonList = new ArrayList<String>();
+        if (Build.VERSION.SDK_INT >= 23
+                && this.getApplicationInfo().targetSdkVersion >= 23) {
+            try {
+                for (String perm : permissions) {
+                    Method checkSelfMethod = getClass().getMethod("checkSelfPermission", String.class);
+                    Method shouldShowRequestPermissionRationaleMethod = getClass().getMethod("shouldShowRequestPermissionRationale",
+                            String.class);
+                    if ((Integer) checkSelfMethod.invoke(this, perm) != PackageManager.PERMISSION_GRANTED
+                            || (Boolean) shouldShowRequestPermissionRationaleMethod.invoke(this, perm)) {
+                        needRequestPermissonList.add(perm);
+                    }
+                }
+            } catch (Throwable e) {
+
+            }
+        }
+        return needRequestPermissonList;
+    }
+    @TargetApi(23)
+    public void onRequestPermissionsResult(int requestCode,
+                                           String[] permissions, int[] paramArrayOfInt) {
+        if (requestCode == PERMISSON_REQUESTCODE) {
+            if (!verifyPermissions(paramArrayOfInt)) {
+                showMissingPermissionDialog();
+                isNeedCheck = false;
+            }
+        }
+    }
+    /**
+     * 显示提示信息
+     * @since 2.5.0
+     */
+    private void showMissingPermissionDialog() {
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setTitle(R.string.notifyTitle);
+        builder.setMessage(R.string.notifyMsg);
+        builder.setNegativeButton(R.string.cancel,
+                new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        finish();
+                    }
+                });
+
+        builder.setPositiveButton(R.string.setting,
+                new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        startAppSettings();
+                    }
+                });
+
+        builder.setCancelable(false);
+
+        builder.show();
+    }
+    /**
+     * 启动应用的设置
+     *
+     * @since 2.5.0
+     */
+    private void startAppSettings() {
+        Intent intent = new Intent(
+                Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
+        intent.setData(Uri.parse("package:" + this.getPackageName()));
+        startActivity(intent);
+    }
+
+    /**
+     * 检测是否所有的权限都已经授权
+     *
+     * @param grantResults
+     * @return
+     * @since 2.5.0
+     */
+    private boolean verifyPermissions(int[] grantResults) {
+        for (int result : grantResults) {
+            if (result != PackageManager.PERMISSION_GRANTED) {
+                return false;
+            }
+        }
+        return true;
+    }
+}
Index: app/src/main/java/com/guansu/management/paymentmoney/PayResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/paymentmoney/PayResult.java	(date 1577073856693)
+++ app/src/main/java/com/guansu/management/paymentmoney/PayResult.java	(date 1577073856693)
@@ -0,0 +1,54 @@
+package com.guansu.management.paymentmoney;
+
+import android.text.TextUtils;
+
+import java.util.Map;
+
+public class PayResult {
+	private String resultStatus;
+	private String result;
+	private String memo;
+
+	public PayResult(Map<String, String> rawResult) {
+		if (rawResult == null) {
+			return;
+		}
+
+		for (String key : rawResult.keySet()) {
+			if (TextUtils.equals(key, "resultStatus")) {
+				resultStatus = rawResult.get(key);
+			} else if (TextUtils.equals(key, "result")) {
+				result = rawResult.get(key);
+			} else if (TextUtils.equals(key, "memo")) {
+				memo = rawResult.get(key);
+			}
+		}
+	}
+
+	@Override
+	public String toString() {
+		return "resultStatus={" + resultStatus + "};memo={" + memo
+				+ "};result={" + result + "}";
+	}
+
+	/**
+	 * @return the resultStatus
+	 */
+	public String getResultStatus() {
+		return resultStatus;
+	}
+
+	/**
+	 * @return the memo
+	 */
+	public String getMemo() {
+		return memo;
+	}
+
+	/**
+	 * @return the result
+	 */
+	public String getResult() {
+		return result;
+	}
+}
Index: app/src/main/java/com/guansu/management/fragment/me/DistributionFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/me/DistributionFragment.java	(date 1577172977693)
+++ app/src/main/java/com/guansu/management/fragment/me/DistributionFragment.java	(date 1577172977693)
@@ -0,0 +1,180 @@
+package com.guansu.management.fragment.me;
+
+import android.annotation.SuppressLint;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+import android.widget.CheckBox;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.alipay.sdk.app.EnvUtils;
+import com.alipay.sdk.app.PayTask;
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.config.Payment;
+import com.guansu.management.paymentmoney.AuthResult;
+import com.guansu.management.paymentmoney.PayResult;
+import com.guansu.management.utils.OrderInfoUtil2_0;
+
+import java.util.Map;
+
+import butterknife.BindView;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class DistributionFragment extends BaseFragment {
+    @BindView(R.id.imageViewTitle)
+    ImageView imageViewTitle;
+    @BindView(R.id.imageViewGolden)
+    TextView imageViewGolden;
+    @BindView(R.id.imageViewOperator)
+    TextView imageViewOperator;
+    @BindView(R.id.imageViewJoin)
+    ImageView imageViewJoin;
+    @BindView(R.id.checkGolden)
+    CheckBox checkGolden;
+    @BindView(R.id.checkOperator)
+    CheckBox checkOperator;
+    @BindView(R.id.textViewContext)
+    TextView textViewContext;
+    @BindView(R.id.textViewActivity)
+    TextView textViewActivity;
+
+    public static DistributionFragment newInstance() {
+        Bundle args = new Bundle();
+        DistributionFragment fragment = new DistributionFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @SuppressLint("HandlerLeak")
+    private Handler mHandler = new Handler() {
+        @SuppressWarnings("unused")
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+                case Payment.SDK_PAY_FLAG: {
+                    @SuppressWarnings("unchecked")
+                    PayResult payResult = new PayResult((Map<String, String>) msg.obj);
+                    /**
+                     * 对于支付结果，请商户依赖服务端的异步通知结果。同步通知结果，仅作为支付结束的通知。
+                     */
+                    String resultInfo = payResult.getResult();// 同步返回需要验证的信息
+                    String resultStatus = payResult.getResultStatus();
+                    // 判断resultStatus 为9000则代表支付成功
+                    if (TextUtils.equals(resultStatus, "9000")) {
+                        // 该笔订单是否真实支付成功，需要依赖服务端的异步通知。
+                        showToast(getString(R.string.pay_success) + payResult);
+                    } else {
+                        // 该笔订单真实的支付结果，需要依赖服务端的异步通知。
+                        showToast(getString(R.string.pay_failed) + payResult);
+                    }
+                    break;
+                }
+                case Payment.SDK_AUTH_FLAG: {
+                    @SuppressWarnings("unchecked")
+                    AuthResult authResult = new AuthResult((Map<String, String>) msg.obj, true);
+                    String resultStatus = authResult.getResultStatus();
+
+                    // 判断resultStatus 为“9000”且result_code
+                    // 为“200”则代表授权成功，具体状态码代表含义可参考授权接口文档
+                    if (TextUtils.equals(resultStatus, "9000") && TextUtils.equals(authResult.getResultCode(), "200")) {
+                        // 获取alipay_open_id，调支付时作为参数extern_token 的value
+                        // 传入，则支付账户为该授权账户
+                        showToast(getString(R.string.auth_success) + authResult);
+                    } else {
+                        // 其他状态值则为授权失败
+                        showToast(getString(R.string.auth_failed) + authResult);
+                    }
+                    break;
+                }
+                default:
+                    break;
+            }
+        }
+
+        ;
+    };
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragment_distribution;
+    }
+
+    @Override
+    public void initView(View view) {
+        mTitlebar.showStatusBar(true);
+        initApi();
+        mTitlebar.setBackgroundResource(R.color.white);
+        setTitle("分销");
+    }
+
+    @Override
+    public void bindEvent() {
+        checkGolden.isChecked();
+        checkOperator.setChecked(false);
+        checkOperator.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                checkOperator.isChecked();
+                checkGolden.setChecked(false);
+            }
+        });
+        checkGolden.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                checkGolden.isChecked();
+                checkOperator.setChecked(false);
+            }
+        });
+        imageViewJoin.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                if (TextUtils.isEmpty(Payment.APPID) || (TextUtils.isEmpty(Payment.RSA2_PRIVATE) && TextUtils.isEmpty(Payment.RSA_PRIVATE))) {
+                    showToast(getString(R.string.error_missing_appid_rsa_private));
+                    return;
+                }
+                /*
+                 * 这里只是为了方便直接向商户展示支付宝的整个支付流程；所以Demo中加签过程直接放在客户端完成；
+                 * 真实App里，privateKey等数据严禁放在客户端，加签过程务必要放在服务端完成；
+                 * 防止商户私密数据泄露，造成不必要的资金损失，及面临各种安全风险；
+                 *
+                 * orderInfo 的获取必须来自服务端；
+                 */
+                boolean rsa2 = (Payment.RSA2_PRIVATE.length() > 0);
+                Map<String, String> params = OrderInfoUtil2_0.buildOrderParamMap(Payment.APPID, rsa2);
+                String orderParam = OrderInfoUtil2_0.buildOrderParam(params);
+                String privateKey = rsa2 ? Payment.RSA2_PRIVATE : Payment.RSA_PRIVATE;
+                String sign = OrderInfoUtil2_0.getSign(params, privateKey, rsa2);
+                final String orderInfo = orderParam + "&" + sign;
+                final Runnable payRunnable = new Runnable() {
+                    @Override
+                    public void run() {
+                        EnvUtils.setEnv(EnvUtils.EnvEnum.SANDBOX);
+                        PayTask alipay = new PayTask(getActivity());
+                        Map<String, String> result = alipay.payV2(orderInfo, true);
+                        Log.i("msp", result.toString());
+                        Message msg = new Message();
+                        msg.what = Payment.SDK_PAY_FLAG;
+                        msg.obj = result;
+                        mHandler.sendMessage(msg);
+                    }
+                };
+                // 必须异步调用
+                Thread payThread = new Thread(payRunnable);
+                payThread.start();
+            }
+        });
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+}
Index: app/src/main/java/com/guansu/management/bean/ActivitySignUpsBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/bean/ActivitySignUpsBean.java	(date 1576655186220)
+++ app/src/main/java/com/guansu/management/bean/ActivitySignUpsBean.java	(date 1576655186220)
@@ -0,0 +1,101 @@
+package com.guansu.management.bean;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class ActivitySignUpsBean {
+    /**
+     * userInfoDto : null
+     * createdAt : 2019-12-17 11:20
+     * activityId : 1204980186102108160
+     * nickname : 小坤哥
+     * id : 1206776039640928256
+     * userId : 1169501980578549760
+     * profileImageUrl : https://jm-test.oss-cn-beijing.aliyuncs.com/20180719184241.png
+     * age : null
+     * status : HAS_SIGN_UP
+     */
+
+    private Object userInfoDto;
+    private String createdAt;
+    private String activityId;
+    private String nickname;
+    private String id;
+    private String userId;
+    private String profileImageUrl;
+    private Object age;
+    private String status;
+
+    public Object getUserInfoDto() {
+        return userInfoDto;
+    }
+
+    public void setUserInfoDto(Object userInfoDto) {
+        this.userInfoDto = userInfoDto;
+    }
+
+    public String getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(String createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    public String getActivityId() {
+        return activityId;
+    }
+
+    public void setActivityId(String activityId) {
+        this.activityId = activityId;
+    }
+
+    public String getNickname() {
+        return nickname;
+    }
+
+    public void setNickname(String nickname) {
+        this.nickname = nickname;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    public String getProfileImageUrl() {
+        return profileImageUrl;
+    }
+
+    public void setProfileImageUrl(String profileImageUrl) {
+        this.profileImageUrl = profileImageUrl;
+    }
+
+    public Object getAge() {
+        return age;
+    }
+
+    public void setAge(Object age) {
+        this.age = age;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+}
Index: app/src/main/java/com/guansu/management/bean/ActivityCommentsBeanX.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/bean/ActivityCommentsBeanX.java	(date 1577084594640)
+++ app/src/main/java/com/guansu/management/bean/ActivityCommentsBeanX.java	(date 1577084594640)
@@ -0,0 +1,156 @@
+package com.guansu.management.bean;
+import java.util.List;
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class ActivityCommentsBeanX {
+    /**
+     * targetUserNickname : 小黑
+     * mobileNumber :
+     * userId : 1204288329655259136
+     * content : ccccc
+     * parentId : 1206532672021598208
+     * userInfoDto : null
+     * createdAt : 2019-12-13 13:52
+     * nickname : 小白
+     * id : 1205364880152989696
+     * profileImageUrl : null
+     * objectId : 1204980186102108160
+     * activityComments : [{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"aaaa","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-13 13:49","nickname":"小黑","id":"1205364034400948224","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"},{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"bbbbb","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-13 13:52","nickname":"小黑","id":"1205364761051533312","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"},{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"天下无难事1111111","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-17 11:57","nickname":"小黑","id":"1206785549797429248","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"}]
+     * favoriteCount : 0
+     * status : NORMAL
+     */
+    private String targetUserNickname;
+    private String mobileNumber;
+    private String userId;
+    private String content;
+    private String parentId;
+    private Object userInfoDto;
+    private String createdAt;
+    private String nickname;
+    private String id;
+    private Object profileImageUrl;
+    private String objectId;
+    private int favoriteCount;
+    private String status;
+    private int type;
+    private List<ActivityCommentsBeanX> activityComments;
+    public List<ActivityCommentsBeanX> getActivityComments() {
+        return activityComments;
+    }
+    public int getType() {
+        return type;
+    }
+    public void setType(int type) {
+        this.type = type;
+    }
+
+    public void setActivityComments(List<ActivityCommentsBeanX> activityComments) {
+        this.activityComments = activityComments;
+    }
+    public String getTargetUserNickname() {
+        return targetUserNickname;
+    }
+
+    public void setTargetUserNickname(String targetUserNickname) {
+        this.targetUserNickname = targetUserNickname;
+    }
+
+    public String getMobileNumber() {
+        return mobileNumber;
+    }
+
+    public void setMobileNumber(String mobileNumber) {
+        this.mobileNumber = mobileNumber;
+    }
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+
+    public String getParentId() {
+        return parentId;
+    }
+
+    public void setParentId(String parentId) {
+        this.parentId = parentId;
+    }
+
+    public Object getUserInfoDto() {
+        return userInfoDto;
+    }
+
+    public void setUserInfoDto(Object userInfoDto) {
+        this.userInfoDto = userInfoDto;
+    }
+
+    public String getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(String createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    public String getNickname() {
+        return nickname;
+    }
+
+    public void setNickname(String nickname) {
+        this.nickname = nickname;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public Object getProfileImageUrl() {
+        return profileImageUrl;
+    }
+
+    public void setProfileImageUrl(Object profileImageUrl) {
+        this.profileImageUrl = profileImageUrl;
+    }
+
+    public String getObjectId() {
+        return objectId;
+    }
+
+    public void setObjectId(String objectId) {
+        this.objectId = objectId;
+    }
+
+    public int getFavoriteCount() {
+        return favoriteCount;
+    }
+
+    public void setFavoriteCount(int favoriteCount) {
+        this.favoriteCount = favoriteCount;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+}
Index: app/src/main/java/com/guansu/management/bean/ActivityCommentsBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/bean/ActivityCommentsBean.java	(date 1576660966812)
+++ app/src/main/java/com/guansu/management/bean/ActivityCommentsBean.java	(date 1576660966812)
@@ -0,0 +1,134 @@
+package com.guansu.management.bean;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class ActivityCommentsBean {
+    private String targetUserNickname;
+    private String mobileNumber;
+    private String userId;
+    private String content;
+    private String parentId;
+    private Object userInfoDto;
+    private String createdAt;
+    private String nickname;
+    private String id;
+    private Object profileImageUrl;
+    private String objectId;
+    private int favoriteCount;
+    private String status;
+    private int type;
+
+    public String getTargetUserNickname() {
+        return targetUserNickname;
+    }
+
+    public void setTargetUserNickname(String targetUserNickname) {
+        this.targetUserNickname = targetUserNickname;
+    }
+
+    public String getMobileNumber() {
+        return mobileNumber;
+    }
+
+    public void setMobileNumber(String mobileNumber) {
+        this.mobileNumber = mobileNumber;
+    }
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+
+    public String getParentId() {
+        return parentId;
+    }
+
+    public void setParentId(String parentId) {
+        this.parentId = parentId;
+    }
+
+    public Object getUserInfoDto() {
+        return userInfoDto;
+    }
+
+    public void setUserInfoDto(Object userInfoDto) {
+        this.userInfoDto = userInfoDto;
+    }
+
+    public String getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(String createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    public String getNickname() {
+        return nickname;
+    }
+
+    public void setNickname(String nickname) {
+        this.nickname = nickname;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public Object getProfileImageUrl() {
+        return profileImageUrl;
+    }
+
+    public void setProfileImageUrl(Object profileImageUrl) {
+        this.profileImageUrl = profileImageUrl;
+    }
+
+    public String getObjectId() {
+        return objectId;
+    }
+
+    public void setObjectId(String objectId) {
+        this.objectId = objectId;
+    }
+
+    public int getFavoriteCount() {
+        return favoriteCount;
+    }
+
+    public void setFavoriteCount(int favoriteCount) {
+        this.favoriteCount = favoriteCount;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+    public int getType() {
+        return type;
+    }
+
+    public void setType(int type) {
+        this.type = type;
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/details/DetailsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/details/DetailsFragment.java	(date 1577095576954)
+++ app/src/main/java/com/guansu/management/fragment/details/DetailsFragment.java	(date 1577095576954)
@@ -0,0 +1,313 @@
+package com.guansu.management.fragment.details;
+import android.annotation.SuppressLint;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.ImageView;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+import androidx.annotation.RequiresApi;
+import androidx.recyclerview.widget.GridLayoutManager;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+import com.bumptech.glide.Glide;
+import com.guansu.management.R;
+import com.guansu.management.api.MyObserve;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.bean.ActivityCommentsBeanX;
+import com.guansu.management.bean.ActivitySignUpsBean;
+import com.guansu.management.bean.ImagesListBean;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.common.UserSharedPreferencesUtils;
+import com.guansu.management.config.Constant;
+import com.guansu.management.config.Constants;
+import com.guansu.management.fragment.home.adapter.CommentAdapter;
+import com.guansu.management.fragment.home.adapter.ImageAdapter;
+import com.guansu.management.fragment.home.adapter.SignUpsAdapter;
+import com.guansu.management.fragment.me.PersonalFragment;
+import com.guansu.management.model.MessageModellml;
+import com.guansu.management.bean.ActivityDtoInfo;
+import java.util.List;
+import butterknife.BindView;
+/**
+ * @author: dongyaoyao
+ */
+public class DetailsFragment extends BaseFragment implements CommentAdapter.ItemClickListener {
+    @BindView(R.id.imageViewPhoto)
+    ImageView imageViewPhoto;
+    @BindView(R.id.textViewName)
+    TextView textViewName;
+    @BindView(R.id.textViewAddress)
+    TextView textViewAddress;
+    @BindView(R.id.textViewTime)
+    TextView textViewTime;
+    @BindView(R.id.view)
+    View Ageview;
+    @BindView(R.id.rvPics)
+    RecyclerView rvPics;
+    @BindView(R.id.textViewContext)
+    TextView textViewContext;
+    @BindView(R.id.view1)
+    View view1;
+    @BindView(R.id.rButComment)
+    RadioButton rButComment;
+    @BindView(R.id.rButWatch)
+    RadioButton rButWatch;
+    @BindView(R.id.rButJoin)
+    RadioButton rButJoin;
+    @BindView(R.id.radioComment)
+    RadioButton radioComment;
+    @BindView(R.id.radioMember)
+    RadioButton radioMember;
+    @BindView(R.id.radioGroup)
+    RadioGroup radioGroup;
+    @BindView(R.id.recycler)
+    RecyclerView recycler;
+    @BindView(R.id.textViewAge)
+    TextView textViewAge;
+    @BindView(R.id.textViewDistance)
+    TextView textViewDistance;
+    @BindView(R.id.textViewSo)
+    TextView textViewSo;
+    @BindView(R.id.butComment)
+    Button butComment;
+    @BindView(R.id.butActivity)
+    Button butActivity;
+    @BindView(R.id.editTextContext)
+    EditText editTextContext;
+    @BindView(R.id.textVIewSend)
+    TextView textVIewSend;
+    @BindView(R.id.textViewCondition)
+    TextView textViewCondition;
+    private final int STATUS_UNVERIFIED = 1;
+    private final int STATUS_VERIFIED = 2;
+    private int status = STATUS_UNVERIFIED;
+    private int SEND = 0;
+    ActivityDtoInfo activityDtoInfo;
+    List<ActivityCommentsBeanX> commentsBeans;
+    List<ActivitySignUpsBean> signUpsBeans;
+    UserSharedPreferencesUtils userSharedPreferencesUtils;
+    private String userId, objectId, parentId, targetUserNickname;
+
+    public static DetailsFragment newInstance(String id, String title) {
+        Bundle args = new Bundle();
+        args.putString(Constants.KEY_TYPE, id);
+        args.putString(Constants.KEY_TITLE, title);
+        DetailsFragment fragment = new DetailsFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_activity_details;
+    }
+
+    @Override
+    public void initView(View view) {
+        setTitle("详情列表");
+        initApi();
+        mTitlebar.showStatusBar(true);
+        mTitlebar.setBackgroundResource(R.drawable.but_release);
+        userSharedPreferencesUtils = new UserSharedPreferencesUtils(getContext());
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
+    @Override
+    public void bindEvent() {
+        initDetails();
+        radioGroup.check(radioComment.getId());
+        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(RadioGroup group, int checkedId) {
+                if (R.id.radioComment == checkedId) {
+                    status = STATUS_UNVERIFIED;
+                    getDataComment();
+                } else {
+                    status = STATUS_VERIFIED;
+                    getDataSignUpps();
+                }
+            }
+        });
+        butActivity.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                initDatabut();
+            }
+        });
+        butComment.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                initDataComment();
+            }
+        });
+        textVIewSend.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                switch (SEND) {
+                    case 0:
+                        objectId = getArguments().get(Constants.KEY_TYPE) + "";
+                        targetUserNickname = userSharedPreferencesUtils.getUserid();
+                        parentId = activityDtoInfo.getUserId();
+                        initDataSend();
+                        break;
+                    case 1:
+                        initDataSend();
+                        break;
+                }
+            }
+        });
+    }
+
+    @SuppressLint("NewApi")
+    private void initDetails() {
+        if (getArguments().getString(Constants.KEY_TITLE).equals(Constant.VIEW_CIRCLE)) {
+            view1.setVisibility(View.GONE);
+            textViewCondition.setVisibility(View.GONE);
+            rButJoin.setVisibility(View.GONE);
+            radioMember.setVisibility(View.GONE);
+            butActivity.setVisibility(View.GONE);
+            textViewSo.setText("来自圈子");
+            textViewSo.setCompoundDrawablesWithIntrinsicBounds(null, null,
+                    getResources().getDrawable(R.mipmap.home_circle, null), null);
+        }
+        new MessageModellml().find_activity_dtoinfo(userSharedPreferencesUtils.getUserid(),
+                getArguments().getString(Constants.KEY_TYPE), getArguments().getString(Constants.KEY_TITLE))
+                .safeSubscribe(new MyObserve<ActivityDtoInfo>(this) {
+                    protected void onSuccess(ActivityDtoInfo userInfos) {
+                        activityDtoInfo = userInfos;
+                        Glide.with(getContext()).load(userInfos.getProfileImage()).into(imageViewPhoto);
+                        textViewName.setText(userInfos.getNickName());
+                        textViewTime.setText(userInfos.getStartTime());
+                        textViewAge.setText(userInfos.getAge() + "岁");
+                        List<ImagesListBean> imglist = userInfos.getImagesList();
+                        GridLayoutManager gridLayoutManager = new GridLayoutManager(getContext(), 3);
+                        rvPics.setLayoutManager(gridLayoutManager);
+                        ImageAdapter imageAdapter = new ImageAdapter(imglist);
+                        rvPics.setAdapter(imageAdapter);
+                        textViewContext.setText(userInfos.getContent() + "");
+                        rButComment.setText(userInfos.getCommentCount() + "");
+                        rButWatch.setText(userInfos.getTraficCount() + "");
+                        rButJoin.setText(userInfos.getSignUpPeopleNumber() + "/" + userInfos.getMaxPeopleNumber());
+
+                        textViewCondition.setText("参加条件：" + userInfos.getSignUpCondition());
+                        if ("0".equals(userInfos.getVisible())) {
+                            textViewSo.setText("活动成员:对外不可见");
+                        } else if ("1".equals(userInfos.getVisible())) {
+                            textViewSo.setText("活动成员:对外可见");
+                        } else {
+                            textViewSo.setText("来自圈子");
+                        }
+                        Ageview.setBackground(getResources().getDrawable(R.drawable.but_item_distance));
+                        textViewAge.setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(R.mipmap.male, null),
+                                null, null, null);
+                        Ageview.setBackground(getResources().getDrawable(R.drawable.but_item_age));
+                        textViewAge.setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(R.mipmap.female, null),
+                                null, null, null);
+                        commentsBeans = userInfos.getActivityComments();
+                        getDataComment();
+                        signUpsBeans = userInfos.getActivitySignUps();
+                        imageViewPhoto.setOnClickListener(new OnClickListenerWrapper() {
+                            @Override
+                            protected void onSingleClick(View v) {
+                                start(PersonalFragment.newInstance());
+                            }
+                        });
+                    }
+                });
+    }
+    /**
+     * 发送评论
+     */
+    public void initDataSend() {
+        showLoadingDialog("报名中……");
+        new MessageModellml().find_activity_commentsave(userSharedPreferencesUtils.getUserid(),
+                objectId, editTextContext.getText().toString(),
+                parentId, targetUserNickname,
+                getArguments().getString(Constants.KEY_TITLE))
+                .safeSubscribe(new MyObserve<String>(this) {
+                    @Override
+                    protected void onSuccess(String s) {
+                        butComment.setVisibility(View.VISIBLE);
+                        butActivity.setVisibility(View.VISIBLE);
+                        editTextContext.setVisibility(View.GONE);
+                        textVIewSend.setVisibility(View.GONE);
+                        showPage();
+                        SEND=0;
+                        editTextContext.setText("");
+                        initDetails();
+                    }
+                });
+    }
+    /**
+     * 底部控件显示与隐藏
+     */
+    private void initDataComment() {
+        butComment.setVisibility(View.GONE);
+        butActivity.setVisibility(View.GONE);
+        editTextContext.setVisibility(View.VISIBLE);
+        textVIewSend.setVisibility(View.VISIBLE);
+    }
+
+    /**
+     * 活动报名
+     */
+    private void initDatabut() {
+        showLoadingDialog("报名中……");
+        new MessageModellml().find_activity_signupsave(userSharedPreferencesUtils.getUserid(),
+                getArguments().getString(Constants.KEY_TYPE))
+                .safeSubscribe(new MyObserve<String>(this) {
+                    @Override
+                    protected void onSuccess(String activityDtoInfo) {
+                        showPage();
+                    }
+                });
+    }
+
+    /**
+     * 报名列表
+     */
+    private void getDataSignUpps() {
+        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
+        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
+        recycler.setLayoutManager(layoutManager);
+        SignUpsAdapter signUpsAdapter = new SignUpsAdapter(signUpsBeans, getContext());
+        recycler.setAdapter(signUpsAdapter);
+    }
+
+    /**
+     * 评论列表
+     */
+    private void getDataComment() {
+        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
+        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
+        recycler.setLayoutManager(layoutManager);
+        CommentAdapter commentAdapter = new CommentAdapter(activityDtoInfo, getContext());
+        recycler.setAdapter(commentAdapter);
+        commentAdapter.setItemClickListener(this);
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+
+    @Override
+    public void OnItemClick(ActivityCommentsBeanX comments, int tag) {
+        switch (tag) {
+            case 0:
+                parentId = comments.getId();
+                break;
+            case 1:
+                parentId = comments.getParentId();
+                break;
+        }
+        SEND = 1;
+        objectId = comments.getObjectId();
+        targetUserNickname = comments.getTargetUserNickname();
+        initDataComment();
+    }
+}
Index: app/src/main/java/com/guansu/management/activity/CheckPermissionsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/activity/CheckPermissionsActivity.java	(date 1577256579538)
+++ app/src/main/java/com/guansu/management/activity/CheckPermissionsActivity.java	(date 1577256579538)
@@ -0,0 +1,74 @@
+package com.guansu.management.activity;
+import android.view.View;
+import com.amap.api.location.AMapLocation;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.servise.LocationManager;
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public abstract class CheckPermissionsActivity extends BaseFragment {
+
+
+    protected abstract void locationResult(String longitude, String latitude, String address,String city,String province,String district);
+
+    protected void startLocation() {
+        LocationManager.getInstance().start(getContext(), new LocationManager.OnLocationResultListener() {
+            @Override
+            public void onLocationResult(AMapLocation aMapLocation) {
+                locationResult(String.valueOf(aMapLocation.getLongitude()),
+                        String.valueOf(aMapLocation.getLatitude()),
+                        aMapLocation.getAddress(),
+                        String.valueOf(aMapLocation.getProvince()),
+                        String.valueOf(aMapLocation.getCity()),
+                        String.valueOf(aMapLocation.getDistrict()));
+            }
+        });
+    }
+    /**
+     * 停止定位
+     *
+     * @since 2.8.0
+     * @author hongming.wang
+     *
+     */
+    protected void stopLocation(){
+        // 停止定位
+        LocationManager.getInstance().stop(getContext());
+    }
+
+
+
+
+
+
+
+
+
+
+
+
+    protected void destroyLocation() {
+        LocationManager.getInstance().stop(getContext());
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return 0;
+    }
+
+    @Override
+    public void initView(View view) {
+
+    }
+
+    @Override
+    public void bindEvent() {
+
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/utils/Utils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/utils/Utils.java	(date 1576980585906)
+++ app/src/main/java/com/guansu/management/utils/Utils.java	(date 1576980585906)
@@ -0,0 +1,119 @@
+/**
+ * 
+ */
+package com.guansu.management.utils;
+
+import android.content.Context;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.text.TextUtils;
+
+import com.amap.api.location.AMapLocation;
+
+import java.text.SimpleDateFormat;
+import java.util.Locale;
+
+/**
+ * 辅助工具类
+ * @创建时间： 2015年11月24日 上午11:46:50
+ * @项目名称： AMapLocationDemo2.x
+ * @author hongming.wang
+ * @文件名称: Utils.java
+ * @类型名称: Utils
+ */
+public class Utils {
+	/**
+	 *  开始定位
+	 */
+	public final static int MSG_LOCATION_START = 0;
+	/**
+	 * 定位完成
+	 */
+	public final static int MSG_LOCATION_FINISH = 1;
+	/**
+	 * 停止定位
+	 */
+	public final static int MSG_LOCATION_STOP= 2;
+	
+	public final static String KEY_URL = "URL";
+	public final static String URL_H5LOCATION = "file:///android_asset/sdkLoc.html";
+	/**
+	 * 根据定位结果返回定位信息的字符串
+	 * @param location
+	 * @return
+	 */
+	public synchronized static String getLocationStr(AMapLocation location){
+		if(null == location){
+			return null;
+		}
+		StringBuffer sb = new StringBuffer();
+		//errCode等于0代表定位成功，其他的为定位失败，具体的可以参照官网定位错误码说明
+		if(location.getErrorCode() == 0){
+			sb.append("定位成功" + "\n");
+			sb.append("定位类型: " + location.getLocationType() + "\n");
+			sb.append("经    度    : " + location.getLongitude() + "\n");
+			sb.append("纬    度    : " + location.getLatitude() + "\n");
+			sb.append("精    度    : " + location.getAccuracy() + "米" + "\n");
+			sb.append("提供者    : " + location.getProvider() + "\n");
+
+			sb.append("速    度    : " + location.getSpeed() + "米/秒" + "\n");
+			sb.append("角    度    : " + location.getBearing() + "\n");
+			// 获取当前提供定位服务的卫星个数
+			sb.append("星    数    : " + location.getSatellites() + "\n");
+			sb.append("国    家    : " + location.getCountry() + "\n");
+			sb.append("省            : " + location.getProvince() + "\n");
+			sb.append("市            : " + location.getCity() + "\n");
+			sb.append("城市编码 : " + location.getCityCode() + "\n");
+			sb.append("区            : " + location.getDistrict() + "\n");
+			sb.append("区域 码   : " + location.getAdCode() + "\n");
+			sb.append("地    址    : " + location.getAddress() + "\n");
+			sb.append("兴趣点    : " + location.getPoiName() + "\n");
+			//定位完成的时间
+			sb.append("定位时间: " + formatUTC(location.getTime(), "yyyy-MM-dd HH:mm:ss") + "\n");
+		} else {
+			//定位失败
+			sb.append("定位失败" + "\n");
+			sb.append("错误码:" + location.getErrorCode() + "\n");
+			sb.append("错误信息:" + location.getErrorInfo() + "\n");
+			sb.append("错误描述:" + location.getLocationDetail() + "\n");
+		}
+		//定位之后的回调时间
+		sb.append("回调时间: " + formatUTC(System.currentTimeMillis(), "yyyy-MM-dd HH:mm:ss") + "\n");
+		return sb.toString();
+	}
+
+	private static SimpleDateFormat sdf = null;
+	public  static String formatUTC(long l, String strPattern) {
+		if (TextUtils.isEmpty(strPattern)) {
+			strPattern = "yyyy-MM-dd HH:mm:ss";
+		}
+		if (sdf == null) {
+			try {
+				sdf = new SimpleDateFormat(strPattern, Locale.CHINA);
+			} catch (Throwable e) {
+			}
+		} else {
+			sdf.applyPattern(strPattern);
+		}
+		return sdf == null ? "NULL" : sdf.format(l);
+	}
+
+	/**
+	 * 获取app的名称
+	 * @param context
+	 * @return
+	 */
+	public static String getAppName(Context context) {
+		String appName = "";
+		try {
+			PackageManager packageManager = context.getPackageManager();
+			PackageInfo packageInfo = packageManager.getPackageInfo(
+					context.getPackageName(), 0);
+			int labelRes = packageInfo.applicationInfo.labelRes;
+			appName =  context.getResources().getString(labelRes);
+		} catch (Throwable e) {
+			e.printStackTrace();
+		}
+		return appName;
+	}
+}
Index: app/src/main/java/com/guansu/management/servise/LocationManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/servise/LocationManager.java	(date 1576996367026)
+++ app/src/main/java/com/guansu/management/servise/LocationManager.java	(date 1576996367026)
@@ -0,0 +1,41 @@
+package com.guansu.management.servise;
+
+import android.content.Context;
+import android.content.Intent;
+
+import com.amap.api.location.AMapLocation;
+import com.amap.api.location.AMapLocationListener;
+
+public class LocationManager {
+
+    public AMapLocationListener mLocationListener = new AMapLocationListener() {
+        @Override
+        public void onLocationChanged(AMapLocation location) {
+            if (null != location) {
+                //errCode等于0代表定位成功，其他的为定位失败，具体的可以参照官网定位错误码说明
+                if (location.getErrorCode() == 0)
+                    onLocationResultListener.onLocationResult(location);
+            }
+        }
+    };
+
+    private OnLocationResultListener onLocationResultListener;
+    private static final LocationManager ourInstance = new LocationManager();
+
+    public static LocationManager getInstance() {
+        return ourInstance;
+    }
+
+    public void start(Context context, OnLocationResultListener onLocationResultListener) {
+        this.onLocationResultListener = onLocationResultListener;
+        context.startService(new Intent(context, LocationService.class));
+    }
+
+    public void stop(Context context) {
+        context.stopService(new Intent(context, LocationService.class));
+    }
+
+    public interface OnLocationResultListener {
+        void onLocationResult(AMapLocation aMapLocation);
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/common/OnClickListenerWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/common/OnClickListenerWrapper.java	(date 1575452424987)
+++ app/src/main/java/com/guansu/management/common/OnClickListenerWrapper.java	(date 1575452424987)
@@ -0,0 +1,36 @@
+package com.guansu.management.common;
+
+import android.view.View;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public abstract class OnClickListenerWrapper implements View.OnClickListener {
+
+    private static long lastClickTime;
+
+    protected abstract void onSingleClick(View v);
+
+    @Override
+    public void onClick(View v) {
+        if (isFastDuplicateClick()) {
+            return;
+        }
+        onSingleClick(v);
+    }
+
+    /**
+     * 是否为重复的快速点击
+     *
+     * @return
+     */
+    protected boolean isFastDuplicateClick() {
+        long time = System.currentTimeMillis();
+        long timeD = time - lastClickTime;
+        if (0 < timeD && timeD < 800) {
+            lastClickTime = time;
+            return true;
+        }
+        return false;
+    }
+}
Index: app/src/main/java/com/guansu/management/model/FootModellml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/model/FootModellml.java	(date 1577255017655)
+++ app/src/main/java/com/guansu/management/model/FootModellml.java	(date 1577255017655)
@@ -0,0 +1,35 @@
+package com.guansu.management.model;
+import com.google.gson.reflect.TypeToken;
+import com.guansu.management.api.ApiWrapper;
+import com.guansu.management.model.bean.LoginResult;
+import com.lzy.okgo.model.HttpMethod;
+import com.lzy.okgo.model.HttpParams;
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import io.reactivex.Observable;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class FootModellml {
+    //足迹
+    public static final String URL_TRACE = "/content/trace";
+    public Observable getVerify(String userId) {
+        HttpParams httpParams = new HttpParams();
+        httpParams.put("userId",userId);
+        Type type = new TypeToken<LoginResult>() {
+        }.getType();
+        return ApiWrapper.request(HttpMethod.GET, URL_TRACE, type,httpParams);
+    }
+    public Observable getPostVerify(String userId,String address,String longitude,String latitude) {
+        HashMap<String,Object> httpParams = new HashMap<>();
+        httpParams.put("userId",userId);
+        httpParams.put("address",address);
+        httpParams.put("longitude",longitude);
+        httpParams.put("latitude",latitude);
+        Type type = new TypeToken<LoginResult>() {
+        }.getType();
+        return ApiWrapper.babyrequest(HttpMethod.GET, URL_TRACE, type,httpParams);
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/home/MeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/home/MeFragment.java	(date 1577252744908)
+++ app/src/main/java/com/guansu/management/fragment/home/MeFragment.java	(date 1577252744908)
@@ -0,0 +1,152 @@
+package com.guansu.management.fragment.home;
+import android.app.Dialog;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.FrameLayout;
+import android.widget.GridLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.bumptech.glide.Glide;
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.bean.ShareItem;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.common.UserSharedPreferencesUtils;
+import com.guansu.management.fragment.MainFragment;
+import com.guansu.management.fragment.me.AdviceFragment;
+import com.guansu.management.fragment.me.DistributionFragment;
+import com.guansu.management.fragment.me.EditFragment;
+import com.guansu.management.fragment.me.QrCodeFragment;
+import java.util.ArrayList;
+
+import butterknife.BindView;
+/**
+ * @author: dongyaoyao
+ */
+public class MeFragment extends BaseFragment {
+    @BindView(R.id.tv_name)
+    TextView tvName;
+    @BindView(R.id.textViewGrade)
+    TextView textViewGrade;
+    @BindView(R.id.iv_head)
+    ImageView ivHead;
+    @BindView(R.id.tv_order)
+    TextView tvOrder;
+    @BindView(R.id.tv_wallet)
+    TextView tvWallet;
+    @BindView(R.id.ll_layout)
+    FrameLayout llLayout;
+    @BindView(R.id.tv_userinfo)
+    TextView tvUserinfo;
+    @BindView(R.id.tv_share)
+    TextView tvShare;
+    @BindView(R.id.tv_advice)
+    TextView tvAdvice;
+    @BindView(R.id.tv_setting)
+    TextView tvSetting;
+    @BindView(R.id.textViewExtension)
+    TextView textViewExtension;
+    private TextView mTvMyTeam;
+    private Dialog dia;
+    private TextView mTextView;
+    private ImageView mIvClose;
+    private GridLayout mGridLayoutLevel;
+    public static ArrayList<ShareItem> shareItems = new ArrayList<ShareItem>() {{
+        add(new ShareItem("微信", R.mipmap.weixin));
+        add(new ShareItem("朋友圈", R.mipmap.pengyouquan));
+        add(new ShareItem("微博", R.mipmap.weibo));
+        add(new ShareItem("QQ好友", R.mipmap.qq));
+        add(new ShareItem("支付宝", R.mipmap.zhifubao));
+        add(new ShareItem("复制链接", R.mipmap.lianjie));
+        add(new ShareItem("二维码", R.mipmap.erweima));
+    }};
+    public static MeFragment newInstance() {
+        Bundle args = new Bundle();
+        MeFragment fragment = new MeFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_me;
+    }
+    @Override
+    public void initView(View view) {
+        hideTitle();
+        initDialog();
+    }
+    @Override
+    public void bindEvent() {
+        UserSharedPreferencesUtils userSharedPreferencesUtils = new UserSharedPreferencesUtils(getContext());
+      //  tvName.setText(userSharedPreferencesUtils.getUserInfo().getNickname());
+      //  Glide.with(getContext()).load(userSharedPreferencesUtils.getUserInfo().getProfileImageUrl()).into(ivHead);
+
+        tvUserinfo.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                ((MainFragment) getParentFragment()).start(EditFragment.newInstance());
+            }
+        });
+        tvAdvice.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                ((MainFragment) getParentFragment()).start(AdviceFragment.newInstance());
+            }
+        });
+        tvShare.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                dia.show();
+            }
+        });
+        textViewExtension.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                ((MainFragment) getParentFragment()).start(QrCodeFragment.newInstance());
+            }
+        });
+        tvSetting.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                ((MainFragment) getParentFragment()).start(DistributionFragment.newInstance());
+            }
+        });
+    }
+
+    private void initDialog() {
+        dia = new Dialog(getContext(), R.style.BaseDialogStyle);
+        dia.setContentView(R.layout.dialog_share);
+        dia.setCanceledOnTouchOutside(true);
+        dia.getWindow().setGravity(Gravity.BOTTOM);
+        mTextView = dia.findViewById(R.id.textView);
+        mIvClose = dia.findViewById(R.id.iv_close);
+        mGridLayoutLevel = dia.findViewById(R.id.gridLayoutLevel);
+        Window w = dia.getWindow();
+        WindowManager.LayoutParams lp = w.getAttributes();
+        lp.width= WindowManager.LayoutParams.MATCH_PARENT;
+        lp.height= WindowManager.LayoutParams.WRAP_CONTENT;
+        dia.onWindowAttributesChanged(lp);
+        for (ShareItem b : shareItems) {
+            layoutFilterItem(mGridLayoutLevel, b);
+        }
+    }
+    private void layoutFilterItem(GridLayout mGridLayoutLevel, ShareItem b) {
+        View view = LayoutInflater.from(getContext()).inflate(R.layout.item_gride_share, mGridLayoutLevel, false);
+        ImageView imageView = view.findViewById(R.id.iv_img);
+        TextView iv_title = view.findViewById(R.id.iv_title);
+        imageView.setImageResource(b.id);
+        iv_title.setText(b.titme);
+        mGridLayoutLevel.addView(view);
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/fragment/me/EditFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/me/EditFragment.java	(date 1576228390363)
+++ app/src/main/java/com/guansu/management/fragment/me/EditFragment.java	(date 1576228390363)
@@ -0,0 +1,200 @@
+package com.guansu.management.fragment.me;
+
+import android.app.Dialog;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.wigdet.datepicker.CustomDatePicker;
+import com.guansu.management.wigdet.datepicker.DateFormatUtils;
+import com.guansu.management.wigdet.datepicker.MyNumberPicker;
+import com.guansu.management.wigdet.datepicker.PickValueView;
+import com.lljjcoder.citypickerview.widget.CityPicker;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+import butterknife.BindView;
+
+/**
+ * @author: dongyaoyao
+ */
+public class EditFragment extends BaseFragment implements PickValueView.onSelectedChangeListener {
+    private static CustomDatePicker mDatePicker;
+    @BindView(R.id.textView4)
+    TextView textView4;
+    @BindView(R.id.textViewBirthday)
+    TextView textViewBirthday;
+    @BindView(R.id.textView9)
+    TextView textView9;
+    @BindView(R.id.textView5)
+    TextView textView5;
+    @BindView(R.id.textViewAddress)
+    TextView textViewAddress;
+    @BindView(R.id.textViewEducation)
+    TextView textViewEducation;
+    private SimpleDateFormat simpleDateFormat;
+    private Date date;
+    private Dialog dialog;
+    private TextView tv_cancel, tv_send;
+    private PickValueView pickString;
+    String selectedStr;
+    String[] valueStr = new String[]{"其他", "大专", "本科", "研究生", "博士"};
+
+    public static EditFragment newInstance() {
+        Bundle args = new Bundle();
+        EditFragment fragment = new EditFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_personal_center;
+    }
+
+    @Override
+    public void initView(View view) {
+        setTitle("我的主页");
+        mTitlebar.showStatusBar(true);
+        mTitlebar.setBackgroundResource(R.drawable.but_release);
+        simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
+        date = new Date(System.currentTimeMillis());
+        initDatePicker();
+    }
+
+    @Override
+    public void bindEvent() {
+        textView4.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                mDatePicker.show(textViewBirthday.getText().toString());
+            }
+        });
+        textView9.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                selectAddress();
+            }
+        });
+        textView5.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                initDialog();
+            }
+        });
+
+
+    }
+
+    private void initDialog() {
+        //选择对话框
+        dialog = new Dialog(getContext(), R.style.ActionSheetDialogStyle);
+        View contentView = LayoutInflater.from(getContext()).inflate(R.layout.dialog_cj_num, null);
+        //获取组件
+        tv_cancel = contentView.findViewById(R.id.tv_cancel);
+        tv_send = contentView.findViewById(R.id.tv_send);
+        pickString = contentView.findViewById(R.id.pickString);
+        //获取Dialog的监听
+        tv_cancel.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                textViewEducation.setText(selectedStr);
+                dialog.dismiss();
+            }
+        });
+        tv_send.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+
+                dialog.dismiss();
+            }
+        });
+        pickString.setOnSelectedChangeListener(this);
+
+        pickString.setValueData(valueStr, valueStr[1]);
+        dialog.setContentView(contentView);
+        ViewGroup.LayoutParams layoutParams = contentView.getLayoutParams();
+        layoutParams.width = getResources().getDisplayMetrics().widthPixels;
+        contentView.setLayoutParams(layoutParams);
+        dialog.getWindow().setGravity(Gravity.BOTTOM);//弹窗位置
+        dialog.getWindow().setWindowAnimations(R.style.ActionSheetDialogStyle);//弹窗样式
+        dialog.show();//显示弹窗
+
+    }
+
+    private void selectAddress() {
+        CityPicker cityPicker = new CityPicker.Builder(getContext())
+                .textSize(14)
+                .title("地址选择")
+                .titleBackgroundColor("#FFFFFF")
+                .confirTextColor("#696969")
+                .cancelTextColor("#696969")
+                .province("江苏省")
+                .city("常州市")
+                .district("天宁区")
+                .textColor(Color.parseColor("#000000"))
+                .provinceCyclic(true)
+                .cityCyclic(false)
+                .districtCyclic(false)
+                .visibleItemsCount(7)
+                .itemPadding(10)
+                .onlyShowProvinceAndCity(false)//false为三级联动，true为二级联动
+                .build();
+        cityPicker.show();
+        //监听方法，获取选择结果
+        cityPicker.setOnCityItemClickListener(new CityPicker.OnCityItemClickListener() {
+            @Override
+            public void onSelected(String... citySelected) {
+                //省份
+                String province = citySelected[0];
+                //城市
+                String city = citySelected[1];
+                //区县（如果设定了两级联动，那么该项返回空）
+                String district = citySelected[2];
+                //邮编
+                String code = citySelected[3];
+                //为TextView赋值
+                textViewAddress.setText(province.trim() + "-" + city.trim() + "-" + district.trim());
+            }
+        });
+
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+
+    private void initDatePicker() {
+        long beginTimestamp = DateFormatUtils.str2Long("2020-01-01", false);
+        long endTimestamp = DateFormatUtils.str2Long("2019-01-01", false);
+        // 通过时间戳初始化日期，毫秒级别
+        mDatePicker = new CustomDatePicker(getContext(), new CustomDatePicker.Callback() {
+            @Override
+            public void onTimeSelected(long timestamp) {
+                textViewBirthday.setText(DateFormatUtils.long2Str(timestamp, false));
+            }
+        }, endTimestamp, beginTimestamp);
+        mDatePicker.setCancelable(true);
+        // 不显示时和分
+        mDatePicker.setCanShowPreciseTime(false);
+        // 允许循环滚动
+        mDatePicker.setScrollLoop(false);
+        // 允许滚动动画
+        mDatePicker.setCanShowAnim(true);
+    }
+
+    @Override
+    public void onSelected(PickValueView view, Object leftValue, Object middleValue, Object rightValue) {
+        selectedStr = (String) leftValue;
+
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/message/MessageAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/message/MessageAdapter.java	(date 1576980782439)
+++ app/src/main/java/com/guansu/management/fragment/message/MessageAdapter.java	(date 1576980782439)
@@ -0,0 +1,105 @@
+package com.guansu.management.fragment.message;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+import com.guansu.management.R;
+
+import butterknife.BindView;
+
+/**
+ * @author: dongyaoyao
+ */
+public class MessageAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+    private Context mcontext;
+   /* private int getGroupBeans() {
+        if (groupBeans != null) {
+            return groupBeans;
+        }
+        return null;
+    }*/
+
+    private int groupBeans;
+    private int HTTP_URL;
+    public MessageAdapter(Context mcontext, int groupBeans, int HTTP_URL) {
+        this.mcontext = mcontext;
+        this.groupBeans = groupBeans;
+        this.HTTP_URL = HTTP_URL;
+    }
+
+    @NonNull
+    @Override
+    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        if (1 == HTTP_URL) {
+            return new MyViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.fragemnet_comment_item, parent, false));
+        } else if (2==HTTP_URL){
+            return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.fragment_friend_item, parent, false));
+        }else {
+            return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.fragement_message_system, parent, false));
+        }
+    }
+
+    @Override
+    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
+    }
+
+    @Override
+    public int getItemCount() {
+        return groupBeans;
+    }
+
+    /*  @Override
+      public int getItemCount() {
+          return groupBeans != null ? groupBeans.size() : 0;
+      }
+
+      public void setmList(List<UserInfo> rows) {
+          this.groupBeans = rows;
+          notifyDataSetChanged();
+      }
+      public void addmList(List<UserInfo> rows) {
+          groupBeans.addAll(rows);
+          notifyDataSetChanged();
+      }*/
+    public class MyViewHolder extends RecyclerView.ViewHolder {
+        @BindView(R.id.imageViewPhoto)
+        ImageView imageViewPhoto;
+        @BindView(R.id.textViewName)
+        TextView textViewName;
+        @BindView(R.id.textViewComment)
+        TextView textViewComment;
+        @BindView(R.id.textViewParticipate)
+        TextView textViewParticipate;
+        @BindView(R.id.textViewTime)
+        TextView textViewTime;
+        @BindView(R.id.textViewDetails)
+        TextView textViewDetails;
+
+        public MyViewHolder(@NonNull View itemView) {
+            super(itemView);
+//            ButterKnife.bind(this, itemView);
+        }
+    }
+
+    public class ItemViewHolder extends MyViewHolder {
+        @BindView(R.id.imageViewPhoto)
+        ImageView imageViewPhoto;
+        @BindView(R.id.textViewName)
+        TextView textViewName;
+        @BindView(R.id.textViewParticipate)
+        TextView textViewParticipate;
+        @BindView(R.id.textViewTime)
+        TextView textViewTime;
+        @BindView(R.id.textViewDetails)
+        TextView textViewDetails;
+        public ItemViewHolder(View view) {
+            super(view);
+//            ButterKnife.bind(this, view);
+        }
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/home/MessageFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/home/MessageFragment.java	(date 1576733581806)
+++ app/src/main/java/com/guansu/management/fragment/home/MessageFragment.java	(date 1576733581806)
@@ -0,0 +1,152 @@
+package com.guansu.management.fragment.home;
+
+import android.os.Bundle;
+import android.view.View;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.bean.UserInfo;
+import com.guansu.management.fragment.MainFragment;
+import com.guansu.management.fragment.me.PersonalFragment;
+import com.guansu.management.fragment.message.DetailsMessageFragment;
+import com.guansu.management.fragment.message.MessageAdapter;
+import com.guansu.management.wigdet.recyclerview.EndLessOnScrollListener;
+import com.guansu.management.wigdet.recyclerview.OnItemClickListener;
+import com.guansu.management.wigdet.recyclerview.RecyclerItemClickListener;
+
+import java.util.List;
+
+import butterknife.BindView;
+
+/**
+ * @author: dongyaoyao
+ */
+public class MessageFragment extends BaseFragment {
+    @BindView(R.id.rbComment)
+    RadioButton rbComment;
+    @BindView(R.id.rbFriend)
+    RadioButton rbFriend;
+    @BindView(R.id.rbSystem)
+    RadioButton rbSystem;
+    @BindView(R.id.rgStatus)
+    RadioGroup rgStatus;
+    @BindView(R.id.rvListMessage)
+    RecyclerView rvListMessage;
+    private final int STATUS_UNVERIFIED = 1;
+    private final int STATUS_VERIFIED = 2;
+    private final int STATUS_SYSTEM = 3;
+    private int status = STATUS_UNVERIFIED;
+    private MessageAdapter messageAdapter;
+    private EndLessOnScrollListener endLessOnScrollListener;
+    private List<UserInfo> userInfos;
+
+    public static MessageFragment newInstance() {
+        Bundle args = new Bundle();
+        MessageFragment fragment = new MessageFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_message;
+    }
+
+    @Override
+    public void initView(View view) {
+        hideTitle();
+        mTitlebar.showStatusBar(true);
+        mTitlebar.setBackgroundResource(R.drawable.but_release);
+
+    }
+
+    @Override
+    public void bindEvent() {
+        setLoadingContentView(rvListMessage);
+        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
+        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
+        rvListMessage.setLayoutManager(layoutManager);
+        rgStatus.setOnCheckedChangeListener(ChangeRadioGroup);
+        rgStatus.check(rbComment.getId());
+        Data();
+      /*  rvListMessage.addItemDecoration(new DividerItemDecoration(getContext(), DividerItemDecoration.HORIZONTAL_LINE,
+                10, R.color.color_B5B5B5));*/
+
+        /*endLessOnScrollListener = new EndLessOnScrollListener(layoutManager) {
+            @Override
+            public void onLoadMore(int currentPage) {
+                getData(currentPage);
+            }
+        };
+        rvListMessage.addOnScrollListener(endLessOnScrollListener);*/
+//        getData(1);
+        rvListMessage.addOnItemTouchListener(new RecyclerItemClickListener(
+                new ListOnItemClickListener()));
+
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+
+    private void Data() {
+        showLoadingPage();
+        messageAdapter = new MessageAdapter(getContext(), 10, status);
+        rvListMessage.setAdapter(messageAdapter);
+        showPage();
+    }
+
+    private class ListOnItemClickListener implements OnItemClickListener {
+        @Override
+        public void onItemClick(View view, int position) {
+
+            switch (status) {
+                case 1:
+                    ((MainFragment) getParentFragment()).start(PersonalFragment.newInstance());
+                    break;
+                case 2:
+                    ((MainFragment)getParentFragment()).start(DetailsMessageFragment.newInstance());
+                    break;
+            }
+        }
+
+        @Override
+        public void onLongClick(View view, int position) {
+
+        }
+    }
+        /**
+         * 数据请求
+         */
+        private void getData(int currentPage) {
+           /* new MessageModellml().Comment("", "").safeSubscribe(new MyObserve<List<UserInfo>>(this) {
+                @Override
+                protected void onSuccess(List<UserInfo> loginResults) {
+                    userInfos = loginResults;
+//                messageAdapter.setmList(userInfos);//刷新
+//                messageAdapter.addmList(userInfos);//加载更多
+                }
+            });*/
+        }
+
+        private RadioGroup.OnCheckedChangeListener ChangeRadioGroup = new RadioGroup.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(RadioGroup group, int checkedId) {
+                if (R.id.rbComment == checkedId) {
+                    status = STATUS_UNVERIFIED;
+                } else if (checkedId == rbFriend.getId() && rbFriend.isChecked()) {
+                    status = STATUS_VERIFIED;
+
+                } else if (checkedId == rbSystem.getId() && rbSystem.isChecked()) {
+                    status = STATUS_SYSTEM;
+                }
+                Data();
+            }
+        };
+    }
Index: app/src/main/java/com/guansu/management/fragment/me/PersonalFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/me/PersonalFragment.java	(date 1576553532748)
+++ app/src/main/java/com/guansu/management/fragment/me/PersonalFragment.java	(date 1576553532748)
@@ -0,0 +1,85 @@
+package com.guansu.management.fragment.me;
+
+import android.os.Bundle;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.bumptech.glide.Glide;
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+
+import butterknife.BindView;
+
+/**
+ * @author: dongyaoyao
+ */
+public class PersonalFragment extends BaseFragment {
+    @BindView(R.id.imageViewPhoto)
+    ImageView imageViewPhoto;
+    @BindView(R.id.textViewMessage)
+    TextView textViewMessage;
+    @BindView(R.id.textViewSex)
+    TextView textViewSex;
+    @BindView(R.id.textViewAge)
+    TextView textViewAge;
+    @BindView(R.id.view)
+    View view;
+    @BindView(R.id.textViewNumber)
+    TextView textViewNumber;
+    @BindView(R.id.recyclerPhoto)
+    RecyclerView recyclerPhoto;
+    @BindView(R.id.textViewRealName)
+    TextView textViewRealName;
+    @BindView(R.id.textViewEducation)
+    TextView textViewEducation;
+    @BindView(R.id.textViewOccupation)
+    TextView textViewOccupation;
+    @BindView(R.id.textViewSingle)
+    TextView textViewSingle;
+    @BindView(R.id.textViewInterest)
+    TextView textViewInterest;
+    @BindView(R.id.textViewLocal)
+    TextView textViewLocal;
+    @BindView(R.id.textViewTime)
+    TextView textViewTime;
+
+    public static PersonalFragment newInstance() {
+        Bundle args = new Bundle();
+        PersonalFragment fragment = new PersonalFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_personal_homepage;
+    }
+
+    @Override
+    public void initView(View view) {
+        setTitle("个人主页");
+        mTitlebar.showStatusBar(true);
+        mTitlebar.setBackgroundResource(R.drawable.but_release);
+    }
+    @Override
+    public void bindEvent() {
+        Glide.with(getContext()).load("").into(imageViewPhoto);
+        textViewMessage.setText("主人寄语："+"");
+        textViewSex.setText("性别："+"");
+        textViewAge.setText("年龄："+"");
+        textViewNumber.setText(""+"人看过");
+        textViewRealName.setText("认证");
+        textViewEducation.setText("教育");
+        textViewSingle.setText("是否单身");
+        textViewInterest.setText("兴趣爱好");
+        textViewLocal.setText("想去的地方");
+        textViewTime.setText("注册时间");
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/LoginFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/LoginFragment.java	(date 1577253711428)
+++ app/src/main/java/com/guansu/management/fragment/LoginFragment.java	(date 1577253711428)
@@ -0,0 +1,234 @@
+package com.guansu.management.fragment;
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Color;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.CountDownTimer;
+import android.provider.Settings;
+import android.view.Gravity;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.Toast;
+import androidx.appcompat.widget.AppCompatEditText;
+import androidx.core.app.NotificationManagerCompat;
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.ui.accont.AccountContract;
+import com.guansu.management.ui.accont.AccountPresenter;
+import com.guansu.management.wigdet.utils.PhoneNumberValid;
+import butterknife.BindView;
+
+/**
+ * Created by dongyaoyao
+ */
+public class LoginFragment extends BaseFragment<AccountPresenter> implements AccountContract.LoginInterface {
+    @BindView(R.id.editTextAccount)
+    AppCompatEditText editTextAccount;
+    @BindView(R.id.editTextPWD)
+    AppCompatEditText editTextPWD;
+    @BindView(R.id.buttonCode)
+    Button buttonCode;
+    @BindView(R.id.btnLogin)
+    Button btnLogin;
+    Button butLater;
+    Button butRegister;
+    @BindView(R.id.includeLogin)
+    LinearLayout includeLogin;
+    private TimeCount time;
+    private Dialog dia,dialog;
+    private Button butRelease;
+
+    public static LoginFragment newInstance() {
+        Bundle args = new Bundle();
+        LoginFragment fragment = new LoginFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.activity_login;
+    }
+
+    @Override
+    public void initView(View view) {
+        initApi();
+        createPresenter(new AccountPresenter(this));
+        hideTitle();
+        if (!NotificationManagerCompat.from(getContext()).areNotificationsEnabled()) {
+            toOpenNotification();
+        }
+        time = new TimeCount(60000, 1000);
+
+        dia = new Dialog(getContext(), R.style.BaseDialogStyle);
+        dia.setContentView(R.layout.dialog_register);
+        butLater = dia.findViewById(R.id.butLater);
+        butRegister = dia.findViewById(R.id.butRegister);
+        dia.setCanceledOnTouchOutside(false);
+        dia.getWindow().setGravity(Gravity.CENTER);
+        Window w = dia.getWindow();
+        WindowManager.LayoutParams lp = w.getAttributes();
+        lp.width = WindowManager.LayoutParams.MATCH_PARENT;
+        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
+        dia.onWindowAttributesChanged(lp);
+        dia.show();
+        initDialog();
+    }
+
+    private void toOpenNotification() {
+        new AlertDialog.Builder(getContext()).setMessage("您可能会错过我们的消息，请允许接受通知栏消息").setPositiveButton("设置", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+                open(getContext());
+            }
+        }).setNegativeButton("残忍拒绝", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+                dialogInterface.cancel();
+            }
+        }).show();
+    }
+    public void open(Context context) {
+
+        // vivo 点击设置图标>加速白名单>我的app
+        //      点击软件管理>软件管理权限>软件>我的app>信任该软件
+        Intent appIntent = context.getPackageManager().getLaunchIntentForPackage("com.iqoo.secure");
+        if (appIntent != null) {
+            context.startActivity(appIntent);
+            return;
+        }
+        // oppo 点击设置图标>应用权限管理>按应用程序管理>我的app>我信任该应用
+        //      点击权限隐私>自启动管理>我的app
+        appIntent = context.getPackageManager().getLaunchIntentForPackage("com.oppo.safe");
+        if (appIntent != null) {
+            context.startActivity(appIntent);
+            return;
+        }
+
+        Intent intent = new Intent();
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            intent.setAction(Settings.ACTION_APP_NOTIFICATION_SETTINGS);
+            intent.putExtra(Settings.EXTRA_APP_PACKAGE, context.getPackageName());
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            intent.setAction(Settings.ACTION_APP_NOTIFICATION_SETTINGS);
+            intent.putExtra("app_package", context.getPackageName());
+            intent.putExtra("app_uid", context.getApplicationInfo().uid);
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
+            intent.setData(Uri.fromParts("package", context.getPackageName(), null));
+        } else {
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            intent.setAction(Intent.ACTION_VIEW);
+            intent.setClassName("com.android.settings", "com.android.settings.InstalledAppDetails");
+            intent.putExtra("com.android.settings.ApplicationPkgName", context.getPackageName());
+        }
+        context.startActivity(intent);
+    }
+    private void initDialog() {
+        dialog = new Dialog(getContext(), R.style.BaseDialogStyle);
+        dialog.setContentView(R.layout.dialog_loginsuccess);
+        butRelease=dialog.findViewById(R.id.butRelease);
+        dialog.setCanceledOnTouchOutside(false);
+        dialog.getWindow().setGravity(Gravity.CENTER);
+        Window w = dialog.getWindow();
+        WindowManager.LayoutParams lp = w.getAttributes();
+        lp.width = WindowManager.LayoutParams.MATCH_PARENT;
+        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
+        dialog.onWindowAttributesChanged(lp);
+
+    }
+
+    @Override
+    public void bindEvent() {
+        includeLogin.setVisibility(View.GONE);
+        //验证码
+        buttonCode.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                time.start();
+                presenter.getVerify(editTextAccount.getText().toString());
+            }
+        });
+
+        btnLogin.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                if (!PhoneNumberValid.isMobileNO(editTextAccount.getText().toString())) {
+                    Toast.makeText(getContext(), "请输入正确手机号", Toast.LENGTH_SHORT).show();
+                    return;
+                } else if (editTextPWD.getText().toString().length() < 6) {
+                    Toast.makeText(getContext(), "请输入正确验证码", Toast.LENGTH_SHORT).show();
+                    return;
+                } else {
+                    presenter.login(getContext(),editTextAccount.getText().toString(),editTextPWD.getText().toString());
+                }
+            }
+        });
+        butLater.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                dia.dismiss();
+                startWithPop(MainFragment.newInstance());
+            }
+        });
+        butRegister.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                dia.dismiss();
+                includeLogin.setVisibility(View.VISIBLE);
+            }
+        });
+        butRelease.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                dialog.dismiss();
+                startWithPop(MainFragment.newInstance());
+            }
+        });
+    }
+
+    class TimeCount extends CountDownTimer {
+        public TimeCount(long millisInFuture, long countDownInterval) {
+            super(millisInFuture, countDownInterval);
+        }
+
+        @Override
+        public void onTick(long millisUntilFinished) {
+            buttonCode.setBackgroundColor(Color.parseColor("#B6B6D8"));
+            buttonCode.setClickable(false);
+            buttonCode.setText("(" + millisUntilFinished / 1000 + ") 秒后可重新发送");
+        }
+
+        @Override
+        public void onFinish() {
+            buttonCode.setText("重新获取验证码");
+            buttonCode.setClickable(true);
+            buttonCode.setBackgroundColor(Color.parseColor("#4EB84A"));
+        }
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+
+    @Override
+    public void loginSuccessed() {
+        startWithPop(MainFragment.newInstance());
+    }
+
+    @Override
+    public void resetPWDSuccessed() {
+
+    }
+}
Index: app/src/main/java/com/guansu/management/ui/banner/ConvenientBanner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/ui/banner/ConvenientBanner.java	(date 1576487197132)
+++ app/src/main/java/com/guansu/management/ui/banner/ConvenientBanner.java	(date 1576487197132)
@@ -0,0 +1,339 @@
+package com.guansu.management.ui.banner;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+
+
+import androidx.viewpager.widget.ViewPager;
+
+import com.guansu.management.R;
+import com.guansu.management.wigdet.banner.ViewPagerScroller;
+import com.guansu.management.wigdet.banner.adapter.CBPageAdapter;
+import com.guansu.management.wigdet.banner.holder.CBViewHolderCreator;
+import com.guansu.management.wigdet.banner.listener.CBPageChangeListener;
+import com.guansu.management.wigdet.banner.listener.OnItemClickListener;
+import com.guansu.management.wigdet.banner.view.CBLoopViewPager;
+
+import java.lang.ref.WeakReference;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * 页面翻转控件，极方便的广告栏
+ * 支持无限循环，自动翻页，翻页特效
+ */
+public class ConvenientBanner<T> extends LinearLayout {
+    private List<T> mDatas;
+    private int[] page_indicatorId;
+    private ArrayList<ImageView> mPointViews = new ArrayList<ImageView>();
+    private CBPageChangeListener pageChangeListener;
+    private ViewPager.OnPageChangeListener onPageChangeListener;
+    private CBPageAdapter pageAdapter;
+    private CBLoopViewPager viewPager;
+    private ViewPagerScroller scroller;
+    private ViewGroup loPageTurningPoint;
+    private long autoTurningTime;
+    private boolean turning;
+    private boolean canTurn = false;
+    private boolean manualPageable = true;
+    private boolean canLoop = false;
+    public enum PageIndicatorAlign{
+        ALIGN_PARENT_LEFT,ALIGN_PARENT_RIGHT,CENTER_HORIZONTAL
+    }
+    private AdSwitchTask adSwitchTask ;
+
+    public ConvenientBanner(Context context) {
+        super(context);
+        init(context);
+    }
+
+    public ConvenientBanner(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context);
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    public ConvenientBanner(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init(context);
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    public ConvenientBanner(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init(context);
+    }
+
+    private void init(Context context) {
+        View hView = LayoutInflater.from(context).inflate(
+                R.layout.include_viewpager, this, true);
+        viewPager = (CBLoopViewPager) hView.findViewById(R.id.cbLoopViewPager);
+        loPageTurningPoint = (ViewGroup) hView
+                .findViewById(R.id.loPageTurningPoint);
+        initViewPagerScroll();
+
+        adSwitchTask = new AdSwitchTask(this);
+    }
+
+    static class AdSwitchTask implements Runnable {
+
+        private final WeakReference<ConvenientBanner> reference;
+
+        AdSwitchTask(ConvenientBanner convenientBanner) {
+            this.reference = new WeakReference<ConvenientBanner>(convenientBanner);
+        }
+
+        @Override
+        public void run() {
+            ConvenientBanner convenientBanner = reference.get();
+
+            if(convenientBanner != null){
+                if (convenientBanner.viewPager != null && convenientBanner.turning) {
+                    int page = convenientBanner.viewPager.getCurrentItem() + 1;
+                    convenientBanner.viewPager.setCurrentItem(page);
+                    convenientBanner.postDelayed(convenientBanner.adSwitchTask, convenientBanner.autoTurningTime);
+                }
+            }
+        }
+    }
+
+    public ConvenientBanner setPages(CBViewHolderCreator holderCreator, List<T> datas){
+        this.mDatas = datas;
+        pageAdapter = new CBPageAdapter(holderCreator,mDatas);
+        viewPager.setAdapter(pageAdapter,canLoop);
+
+        if (page_indicatorId != null)
+            setPageIndicator(page_indicatorId);
+        return this;
+    }
+
+    /**
+     * 通知数据变化
+     * 如果只是增加数据建议使用 notifyDataSetAdd()
+     */
+    public void notifyDataSetChanged(){
+        viewPager.getAdapter().notifyDataSetChanged();
+        if (page_indicatorId != null)
+            setPageIndicator(page_indicatorId);
+    }
+
+    /**
+     * 设置底部指示器是否可见
+     *
+     * @param visible
+     */
+    public ConvenientBanner setPointViewVisible(boolean visible) {
+        loPageTurningPoint.setVisibility(visible ? View.VISIBLE : View.GONE);
+        return this;
+    }
+
+    /**
+     * 底部指示器资源图片
+     *
+     * @param page_indicatorId
+     */
+    public ConvenientBanner setPageIndicator(int[] page_indicatorId) {
+        loPageTurningPoint.removeAllViews();
+        mPointViews.clear();
+        this.page_indicatorId = page_indicatorId;
+        if(mDatas==null)return this;
+        for (int count = 0; count < mDatas.size(); count++) {
+            // 翻页指示的点
+            ImageView pointView = new ImageView(getContext());
+            pointView.setPadding(5, 0, 5, 0);
+            if (mPointViews.isEmpty())
+                pointView.setImageResource(page_indicatorId[1]);
+            else
+                pointView.setImageResource(page_indicatorId[0]);
+            mPointViews.add(pointView);
+            loPageTurningPoint.addView(pointView);
+        }
+        pageChangeListener = new CBPageChangeListener(mPointViews,
+                page_indicatorId);
+        viewPager.setOnPageChangeListener(pageChangeListener);
+        pageChangeListener.onPageSelected(viewPager.getRealItem());
+        if(onPageChangeListener != null)pageChangeListener.setOnPageChangeListener(onPageChangeListener);
+
+        return this;
+    }
+
+    /**
+     * 指示器的方向
+     * @param align  三个方向：居左 （RelativeLayout.ALIGN_PARENT_LEFT），居中 （RelativeLayout.CENTER_HORIZONTAL），居右 （RelativeLayout.ALIGN_PARENT_RIGHT）
+     * @return
+     */
+    public ConvenientBanner setPageIndicatorAlign(PageIndicatorAlign align) {
+        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) loPageTurningPoint.getLayoutParams();
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT, align == PageIndicatorAlign.ALIGN_PARENT_LEFT ? RelativeLayout.TRUE : 0);
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT, align == PageIndicatorAlign.ALIGN_PARENT_RIGHT ? RelativeLayout.TRUE : 0);
+        layoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL, align == PageIndicatorAlign.CENTER_HORIZONTAL ? RelativeLayout.TRUE : 0);
+        loPageTurningPoint.setLayoutParams(layoutParams);
+        return this;
+    }
+
+    /***
+     * 是否开启了翻页
+     * @return
+     */
+    public boolean isTurning() {
+        return turning;
+    }
+
+    /***
+     * 开始翻页
+     * @param autoTurningTime 自动翻页时间
+     * @return
+     */
+    public ConvenientBanner startTurning(long autoTurningTime) {
+        //如果是正在翻页的话先停掉
+        if(turning){
+            stopTurning();
+        }
+        //设置可以翻页并开启翻页
+        canTurn = true;
+        this.autoTurningTime = autoTurningTime;
+        turning = true;
+        postDelayed(adSwitchTask, autoTurningTime);
+        return this;
+    }
+
+    public void stopTurning() {
+        turning = false;
+        removeCallbacks(adSwitchTask);
+    }
+
+    /**
+     * 自定义翻页动画效果
+     *
+     * @param transformer
+     * @return
+     */
+    public ConvenientBanner setPageTransformer(ViewPager.PageTransformer transformer) {
+        viewPager.setPageTransformer(true, transformer);
+        return this;
+    }
+
+
+    /**
+     * 设置ViewPager的滑动速度
+     * */
+    private void initViewPagerScroll() {
+        try {
+            Field mScroller = null;
+            mScroller = ViewPager.class.getDeclaredField("mScroller");
+            mScroller.setAccessible(true);
+            scroller = new ViewPagerScroller(
+                    viewPager.getContext());
+            mScroller.set(viewPager, scroller);
+
+        } catch (NoSuchFieldException e) {
+            e.printStackTrace();
+        } catch (IllegalArgumentException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public boolean isManualPageable() {
+        return viewPager.isCanScroll();
+    }
+
+    public void setManualPageable(boolean manualPageable) {
+        viewPager.setCanScroll(manualPageable);
+    }
+
+    //触碰控件的时候，翻页应该停止，离开的时候如果之前是开启了翻页的话则重新启动翻页
+    @Override
+    public boolean dispatchTouchEvent(MotionEvent ev) {
+
+        int action = ev.getAction();
+        if (action == MotionEvent.ACTION_UP||action == MotionEvent.ACTION_CANCEL||action == MotionEvent.ACTION_OUTSIDE) {
+            // 开始翻页
+            if (canTurn)startTurning(autoTurningTime);
+        } else if (action == MotionEvent.ACTION_DOWN) {
+            // 停止翻页
+            if (canTurn)stopTurning();
+        }
+        return super.dispatchTouchEvent(ev);
+    }
+
+    //获取当前的页面index
+    public int getCurrentItem(){
+        if (viewPager!=null) {
+            return viewPager.getRealItem();
+        }
+        return -1;
+    }
+    //设置当前的页面index
+    public void setcurrentitem(int index){
+        if (viewPager!=null) {
+            viewPager.setCurrentItem(index);
+        }
+    }
+
+    public ViewPager.OnPageChangeListener getOnPageChangeListener() {
+        return onPageChangeListener;
+    }
+
+    /**
+     * 设置翻页监听器
+     * @param onPageChangeListener
+     * @return
+     */
+    public ConvenientBanner setOnPageChangeListener(ViewPager.OnPageChangeListener onPageChangeListener) {
+        this.onPageChangeListener = onPageChangeListener;
+        //如果有默认的监听器（即是使用了默认的翻页指示器）则把用户设置的依附到默认的上面，否则就直接设置
+        if(pageChangeListener != null)pageChangeListener.setOnPageChangeListener(onPageChangeListener);
+        else viewPager.setOnPageChangeListener(onPageChangeListener);
+        return this;
+    }
+
+    public boolean isCanLoop() {
+        return viewPager.isCanLoop();
+    }
+
+    /**
+     * 监听item点击
+     * @param onItemClickListener
+     */
+    public ConvenientBanner setOnItemClickListener(OnItemClickListener onItemClickListener) {
+        if (onItemClickListener == null) {
+            viewPager.setOnItemClickListener(null);
+            return this;
+        }
+        viewPager.setOnItemClickListener(onItemClickListener);
+        return this;
+    }
+
+    /**
+     * 设置ViewPager的滚动速度
+     * @param scrollDuration
+     */
+    public void setScrollDuration(int scrollDuration){
+        scroller.setScrollDuration(scrollDuration);
+    }
+
+    public int getScrollDuration() {
+        return scroller.getScrollDuration();
+    }
+
+    public CBLoopViewPager getViewPager() {
+        return viewPager;
+    }
+
+    public void setCanLoop(boolean canLoop) {
+        this.canLoop = canLoop;
+        viewPager.setCanLoop(canLoop);
+    }
+}
Index: app/src/main/java/com/guansu/management/bean/HomeBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/bean/HomeBean.java	(date 1576840599061)
+++ app/src/main/java/com/guansu/management/bean/HomeBean.java	(date 1576840599061)
@@ -0,0 +1,177 @@
+package com.guansu.management.bean;
+
+import com.google.gson.annotations.SerializedName;
+
+import java.util.List;
+
+/**
+ * @author: dongyaoyao
+ */
+public class HomeBean {
+    /**
+     * age : 18
+     * commentCount : 3   评论数
+     * content : 大吃大喝，胡吹乱片
+     * distance : 1.21993269E7
+     * id : 1205040515481866240
+     * imagesList : [{"activityId":"1205040515481866240","createdAt":"2019-12-12 16:23","id":"1205040515838382080","image":"http://supcache.airbdata.cn/data/www.gzcts03.com/uploads/1556362395_8333.jpg","isCover":true},{"activityId":"1205040515481866240","createdAt":"2019-12-12 16:23","id":"1205040515871936512","image":"http://supcache.airbdata.cn/data/www.gzcts03.com/uploads/1556362395_8333.jpg","isCover":false}]
+     * maxPeopleNumber : 20
+     * nickName : 18009262998
+     * profileImage : https://jm-test.oss-cn-beijing.aliyuncs.com/20180719184241.png
+     * signUpCondition : 参加条件补充说明
+     * signUpPeopleNumber : 0  参加人数
+     * startTime : 2019-08-28
+     * traficCount : 0   浏览数
+     * visible : 1
+     */
+    private int age;
+    private int commentCount;
+    private String content;
+    private double distance;
+    private long id;
+    private int maxPeopleNumber;
+    private String nickName;
+    private String profileImage;
+    private String signUpCondition;
+    private int signUpPeopleNumber;
+    @SerializedName(value = "startTime", alternate = {"createdAt"})
+    private String startTime;
+    private int traficCount;
+    private int visible;
+    private int type;
+    @SerializedName(value = "imagesList", alternate = {"images"})
+    private List<ImagesListBean> imagesList;
+    private String sex;
+
+    public int getType() {
+        return type;
+    }
+
+    public void setType(int type) {
+        this.type = type;
+    }
+
+
+
+    public String getSex() {
+        return sex;
+    }
+
+    public void setSex(String sex) {
+        this.sex = sex;
+    }
+
+    public int getAge() {
+        return age;
+    }
+
+    public void setAge(int age) {
+        this.age = age;
+    }
+
+    public int getCommentCount() {
+        return commentCount;
+    }
+
+    public void setCommentCount(int commentCount) {
+        this.commentCount = commentCount;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+
+    public double getDistance() {
+        return distance;
+    }
+
+    public void setDistance(double distance) {
+        this.distance = distance;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public int getMaxPeopleNumber() {
+        return maxPeopleNumber;
+    }
+
+    public void setMaxPeopleNumber(int maxPeopleNumber) {
+        this.maxPeopleNumber = maxPeopleNumber;
+    }
+
+    public String getNickName() {
+        return nickName;
+    }
+
+    public void setNickName(String nickName) {
+        this.nickName = nickName;
+    }
+
+    public String getProfileImage() {
+        return profileImage;
+    }
+
+    public void setProfileImage(String profileImage) {
+        this.profileImage = profileImage;
+    }
+
+    public String getSignUpCondition() {
+        return signUpCondition;
+    }
+
+    public void setSignUpCondition(String signUpCondition) {
+        this.signUpCondition = signUpCondition;
+    }
+
+    public int getSignUpPeopleNumber() {
+        return signUpPeopleNumber;
+    }
+
+    public void setSignUpPeopleNumber(int signUpPeopleNumber) {
+        this.signUpPeopleNumber = signUpPeopleNumber;
+    }
+
+    public String getStartTime() {
+        return startTime;
+    }
+
+    public void setStartTime(String startTime) {
+        this.startTime = startTime;
+    }
+
+    public int getTraficCount() {
+        return traficCount;
+    }
+
+    public void setTraficCount(int traficCount) {
+        this.traficCount = traficCount;
+    }
+
+    public int getVisible() {
+        return visible;
+    }
+
+    public void setVisible(int visible) {
+        this.visible = visible;
+    }
+
+    public List<ImagesListBean> getImagesList() {
+        return imagesList;
+    }
+
+    public void setImagesList(List<ImagesListBean> imagesList) {
+        this.imagesList = imagesList;
+    }
+
+
+}
Index: app/src/main/java/com/guansu/management/fragment/home/ReleaseFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/home/ReleaseFragment.java	(date 1577256068575)
+++ app/src/main/java/com/guansu/management/fragment/home/ReleaseFragment.java	(date 1577256068575)
@@ -0,0 +1,247 @@
+package com.guansu.management.fragment.home;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.ImageButton;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.GridLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+import com.google.gson.Gson;
+import com.guansu.management.R;
+import com.guansu.management.activity.CheckPermissionsActivity;
+import com.guansu.management.api.MyObserve;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.bean.FileBean;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.common.UserSharedPreferencesUtils;
+import com.guansu.management.config.Constant;
+import com.guansu.management.config.Constants;
+import com.guansu.management.config.HttpConstants;
+import com.guansu.management.fragment.release.DetailsNextFragment;
+import com.guansu.management.model.HomeModellml;
+import com.guansu.management.model.ReleaseModellml;
+import com.guansu.management.servise.LocationService;
+import com.guansu.management.ui.release.ImagePickerAdapter;
+import com.lzy.imagepicker.ImagePicker;
+import com.lzy.imagepicker.bean.ImageItem;
+import com.lzy.imagepicker.ui.ImageGridActivity;
+import com.lzy.imagepicker.ui.ImagePreviewDelActivity;
+import com.lzy.okgo.OkGo;
+import com.lzy.okgo.callback.StringCallback;
+import com.lzy.okgo.model.HttpParams;
+import com.lzy.okgo.model.Response;
+import org.json.JSONArray;
+import org.json.JSONException;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import butterknife.BindView;
+/**
+ * Created by dongyaoyao
+ */
+public class ReleaseFragment extends CheckPermissionsActivity implements
+        ImagePickerAdapter.OnRecyclerViewItemClickListener, View.OnClickListener {
+    @BindView(R.id.textViewTitle)
+    TextView textViewTitle;
+    @BindView(R.id.editTextContext)
+    TextView editTextContext;
+    private ImageButton mImageBlack;
+    private ImageButton mImagePreservation;
+    private RecyclerView mRvPics;
+    private Button mButRelease;
+    private ArrayList<ImageItem> selImageList; //当前选择的所有图片
+    private ImagePickerAdapter adapter;
+    private int maxImgCount = 9;
+    String userId;
+    List<String> imageList;
+    private String lat, lng, address;
+    public static ReleaseFragment newInstance(String title) {
+        Bundle args = new Bundle();
+        args.putString(Constants.KEY_TITLE, title);
+        ReleaseFragment fragment = new ReleaseFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    protected void locationResult(String longitude, String latitude, String address, String city, String province, String district) {
+        this.lng = longitude;
+        this.lat = latitude;
+        this.address = address;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_release;
+    }
+    @Override
+    public void initView(View view) {
+        initApi();
+        hideTitle();
+        startLocation();
+        mTitlebar.showStatusBar(true);
+        mTitlebar.setBackgroundResource(R.drawable.but_release);
+        mImageBlack = view.findViewById(R.id.imageBlack);
+        mImagePreservation = view.findViewById(R.id.imagePreservation);
+        mRvPics = view.findViewById(R.id.rvPics);
+        mButRelease = view.findViewById(R.id.butRelease);
+        selImageList = new ArrayList<>();
+        GridLayoutManager gridLayoutManager = new GridLayoutManager(getContext(), 3);
+        mRvPics.setLayoutManager(gridLayoutManager);
+        adapter = new ImagePickerAdapter(getContext(), selImageList, maxImgCount);
+        mRvPics.setAdapter(adapter);
+        mRvPics.setNestedScrollingEnabled(false);
+        adapter.setOnItemClickListener(this);
+        mRvPics.setOnClickListener(this);
+    }
+    @Override
+    public void bindEvent() {
+        UserSharedPreferencesUtils userSharedPreferencesUtils = new UserSharedPreferencesUtils(getContext());
+        userId = userSharedPreferencesUtils.getUserid();
+        if (getArguments().getString(Constants.KEY_TITLE).equals(Constant.VIEW_CIRCLE)) {
+            textViewTitle.setText("发布圈子");
+            mButRelease.setText("立即发布");
+        } else {
+            textViewTitle.setText("发布活动");
+            mButRelease.setText("下一步");
+        }
+        mButRelease.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                if (getArguments().getString(Constants.KEY_TITLE).equals(Constant.VIEW_CIRCLE)) {
+                    showLoadingDialog("上传中……");
+                    //圈子
+                    final List<File> list = new ArrayList();
+                    for (ImageItem imageItem : selImageList) {
+                        if (!imageItem.path.startsWith("http"))
+                            list.add(new File(imageItem.path));
+                    }
+                    HttpParams params = new HttpParams();
+                    params.put("uid", userId);
+                    OkGo.<String>post(HttpConstants.BASE_URL + HomeModellml.IMAGEUPLOADLIST)
+                            .tag(this)
+                            .isMultipart(true)
+                            .params(params)
+                            .addFileParams("file", list)
+                            .execute(new StringCallback() {
+                                @Override
+                                public void onSuccess(Response<String> response) {
+                                    String body = response.body();
+                                    Gson gson = new Gson();
+                                    FileBean user = gson.fromJson(body, FileBean.class);
+                                    getDataRelease(user.getData().getImageList());
+                                }
+                            });
+                } else {
+                    //活动
+                    final List<File> list = new ArrayList();
+                    for (ImageItem imageItem : selImageList) {
+                        if (!imageItem.path.startsWith("http"))
+                            list.add(new File(imageItem.path));
+                    }
+                    startForResult(DetailsNextFragment.newInstance(selImageList,editTextContext.getText().toString()),0);
+                }
+            }
+        });
+        mImageBlack.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                getActivity().onBackPressed();
+
+            }
+        });
+    }
+
+    private void getDataRelease(List<FileBean.DataBean.ImageListBean> jsonArray) {
+        Gson gson = new Gson();
+        String s = gson.toJson(jsonArray);
+        try {
+            JSONArray jsonObject=new JSONArray(s);
+            new ReleaseModellml().user_imgand_textsave(userId, editTextContext.getText().toString(),lat,lng, jsonObject)
+                    .subscribe(new MyObserve<String>(this) {
+                        @Override
+                        protected void onSuccess(String activityDtoInfo) {
+                            showPage();
+                            getActivity().onBackPressed();
+                        }
+                    });
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+
+    public void onItemClick(View view, int position) {
+        switch (position) {
+            case Constant.IMAGE_ITEM_ADD:
+                view.requestFocus();
+                ImagePicker imagePicker = ImagePicker.getInstance();
+                imagePicker.setSelectLimit(maxImgCount);
+                imagePicker.setCrop(false);
+                imagePicker.setShowCamera(true);
+                Intent intent1 = new Intent(getContext(), ImageGridActivity.class);
+                intent1.putExtra(ImageGridActivity.EXTRAS_IMAGES, (ArrayList<ImageItem>) adapter.getImages());
+                startActivityForResult(intent1, Constant.REQUEST_CODE_SELECT);
+                break;
+            default:
+                //打开预览
+                Intent intentPreview = new Intent(getContext(), ImagePreviewDelActivity.class);
+                intentPreview.putExtra(ImagePicker.EXTRA_IMAGE_ITEMS, (ArrayList<ImageItem>) adapter.getImages());
+                intentPreview.putExtra(ImagePicker.EXTRA_SELECTED_IMAGE_POSITION, position);
+                intentPreview.putExtra(ImagePicker.EXTRA_FROM_ITEMS, true);
+                startActivityForResult(intentPreview, Constant.REQUEST_CODE_PREVIEW);
+                break;
+        }
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        //添加图片返回
+        if (resultCode == ImagePicker.RESULT_CODE_ITEMS) {
+            //添加图片返回
+            if (data != null && requestCode == Constant.REQUEST_CODE_SELECT) {
+                selImageList = (ArrayList<ImageItem>) data.getSerializableExtra(ImagePicker.EXTRA_RESULT_ITEMS);
+                if (selImageList != null) {
+                    adapter.setImages(selImageList);
+                }
+            }
+        } else if (resultCode == ImagePicker.RESULT_CODE_BACK) {
+            //预览图片返回
+            if (data != null && requestCode == Constant.REQUEST_CODE_PREVIEW) {
+                selImageList = (ArrayList<ImageItem>) data.getSerializableExtra(ImagePicker.EXTRA_IMAGE_ITEMS);
+                if (selImageList != null) {
+                    adapter.setImages(selImageList);
+                }
+            }
+        }
+    }
+    @Override
+    public void onClick(View v) {
+
+    }
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+    }
+    @Override
+    public void onFragmentResult(int requestCode, int resultCode, Bundle data) {
+        super.onFragmentResult(requestCode, resultCode, data);
+        if (requestCode == 0 && resultCode == RESULT_OK ) {
+            // 在此通过Bundle data 获取返回的数据
+            if (data.getString("title").equals(0)){
+
+            }else {
+                getActivity().onBackPressed();//销毁自己
+            }
+        }
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/MainFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/MainFragment.java	(date 1577256068524)
+++ app/src/main/java/com/guansu/management/fragment/MainFragment.java	(date 1577256068524)
@@ -0,0 +1,154 @@
+package com.guansu.management.fragment;
+import android.app.Dialog;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.RadioButton;
+import androidx.annotation.Nullable;
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.config.Constant;
+import com.guansu.management.fragment.home.FootprintFragemnt;
+import com.guansu.management.fragment.home.MeFragment;
+import com.guansu.management.fragment.home.MessageFragment;
+import com.guansu.management.fragment.home.NewHomeFragment;
+import com.guansu.management.fragment.home.ReleaseFragment;
+import com.guansu.management.wigdet.bottombar.BottomBar;
+import com.guansu.management.wigdet.bottombar.BottomBarTab;
+
+import butterknife.BindView;
+import me.yokeyword.fragmentation.SupportFragment;
+
+/**
+ * Created by dongyaoyao
+ */
+public class MainFragment extends BaseFragment {
+    @BindView(R.id.radioRelease)
+    RadioButton radioRelease;
+    private String lat, lng, address;
+    private SupportFragment[] mFragments = new SupportFragment[5];
+    private BottomBar mNavigation;
+    private View viewCircle, viewConstraints;
+    private Dialog dia;
+
+    public static MainFragment newInstance() {
+        Bundle args = new Bundle();
+        MainFragment fragment = new MainFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_mian;
+    }
+
+    @Override
+    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        SupportFragment firstFragment = findChildFragment(NewHomeFragment.class);
+        if (firstFragment == null) {
+            mFragments[0] = NewHomeFragment.newInstance();
+            mFragments[1] = MessageFragment.newInstance();
+            mFragments[2] = MessageFragment.newInstance();
+            mFragments[3] = FootprintFragemnt.newInstance();
+            mFragments[4] = MeFragment.newInstance();
+            loadMultipleRootFragment(R.id.frameLayout, 0,
+                    mFragments[0], mFragments[1], mFragments[2], mFragments[3], mFragments[4]);
+        } else {
+            // 这里我们需要拿到mFragments的引用,也可以通过getChildFragmentManager.findFragmentByTag自行进行判断查找(效率更高些),用下面的方法查找更方便些
+            mFragments[0] = firstFragment;
+            mFragments[1] = findChildFragment(MessageFragment.class);
+            mFragments[2] = findChildFragment(MessageFragment.class);
+            mFragments[3] = findChildFragment(FootprintFragemnt.class);
+            mFragments[4] = findChildFragment(MeFragment.class);
+        }
+    }
+
+    @Override
+    public void initView(View view) {
+        initApi();
+        hideTitle();
+        mNavigation = view.findViewById(R.id.navigation);
+        mNavigation
+                .addItem(new BottomBarTab(_mActivity, R.mipmap.home_no, getString(R.string.navHome)))
+                .addItem(new BottomBarTab(_mActivity, R.mipmap.message_no, getString(R.string.navStatistics)))
+                .addItem(new BottomBarTab(_mActivity, R.color.transparent, ""))
+                .addItem(new BottomBarTab(_mActivity, R.mipmap.footprint_no, getString(R.string.navMessage)))
+                .addItem(new BottomBarTab(_mActivity, R.mipmap.my_no, getString(R.string.navMe)));
+        dia = new Dialog(getContext(), R.style.BaseDialogStyle);
+        dia.setContentView(R.layout.dialog_release);
+        viewCircle = dia.findViewById(R.id.view);
+        viewConstraints = dia.findViewById(R.id.view1);
+        dia.setCanceledOnTouchOutside(true);
+        dia.getWindow().setGravity(Gravity.BOTTOM);
+        Window w = dia.getWindow();
+        WindowManager.LayoutParams lp = w.getAttributes();
+        dia.onWindowAttributesChanged(lp);
+    }
+
+    @Override
+    public void bindEvent() {
+        initApi();
+        mNavigation.setOnTabSelectedListener(new BottomBar.OnTabSelectedListener() {
+            @Override
+            public void onTabSelected(int position, int prePosition) {
+                showHideFragment(mFragments[position], mFragments[prePosition]);
+            }
+
+            @Override
+            public void onTabUnselected(int position) {
+
+            }
+
+            @Override
+            public void onTabReselected(int position) {
+            }
+        });
+        radioRelease.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                if (!dia.isShowing()) {
+                    dia.show();
+                }
+            }
+        });
+        viewCircle.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                start(ReleaseFragment.newInstance(Constant.VIEW_CIRCLE));
+                dia.dismiss();
+            }
+        });
+        viewConstraints.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                start(ReleaseFragment.newInstance(Constant.VIEW_CONSTRAINTS));
+                dia.dismiss();
+            }
+        });
+    }
+
+    private long exitTime = 0;
+
+    @Override
+    public boolean onBackPressedSupport() {
+        if ((System.currentTimeMillis() - exitTime) > 2000) {
+            //如果大于2000毫秒,说明误操作
+            showToast("再按一次退出程序");
+            exitTime = System.currentTimeMillis();
+            return true;
+        } else {
+            _mActivity.finish();
+            return super.onBackPressedSupport();
+        }
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+}
Index: app/src/main/java/com/guansu/management/model/ReleaseModellml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/model/ReleaseModellml.java	(date 1577005555491)
+++ app/src/main/java/com/guansu/management/model/ReleaseModellml.java	(date 1577005555491)
@@ -0,0 +1,58 @@
+package com.guansu.management.model;
+import com.google.gson.reflect.TypeToken;
+import com.guansu.management.api.ApiWrapper;
+import com.lzy.okgo.model.HttpMethod;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.Map;
+import io.reactivex.Observable;
+
+/**
+ * @author: dongyaoyao
+ */
+public class ReleaseModellml {
+    //发圈子
+    public static final String USER_IMGAND_TEXTSAVE = "/content/api/userImgAndTextSave";
+    //发活动
+    public static final String USER_ACTIVITY_INFOSAVE = "/activity/activityInfoSave";
+    public Observable<String> user_imgand_textsave(String userId, String content,String latitude,String longitude, JSONArray mlist) {
+        Map<String,Object> httpParams = new HashMap<>();
+        httpParams.put("uid",userId);
+        httpParams.put("content",content);
+        httpParams.put("longitude",longitude);
+        httpParams.put("latitude",latitude);
+        httpParams.put("imageList",mlist);
+        Type type = new TypeToken<String>() {
+        }.getType();
+        return ApiWrapper.babyrequest(HttpMethod.POST, USER_IMGAND_TEXTSAVE, type,httpParams);
+    }
+    public Observable<String> user_activity_infosave(String userId, String content,String startTime,String endTime,String district,
+                                                     String address,String maxPeopleNumber,String visible,String signUpCondition
+            ,String latitude,String longitude , JSONArray mlist) {
+        Map<String,Object> httpParams = new HashMap<>();
+        httpParams.put("userId",userId);
+        httpParams.put("title",content);
+        httpParams.put("startTime",startTime);
+        httpParams.put("endTime",endTime);
+        httpParams.put("content",content);
+        httpParams.put("category","USER");//普通用户，商户
+        httpParams.put("coverImage","");
+        httpParams.put("district",district);//定位
+        httpParams.put("address",address);//详细地址
+        httpParams.put("visible",visible);//活动是否可见
+        httpParams.put("minPeopleNumber","1");//最少参加人数
+        httpParams.put("maxPeopleNumber",maxPeopleNumber);//上限人数
+        httpParams.put("tags","");//标签
+        httpParams.put("signUpCondition",signUpCondition);//标签
+        httpParams.put("signUpMoney","");//活动费用
+        httpParams.put("longitude",longitude);
+        httpParams.put("latitude",latitude);
+        httpParams.put("imageList",mlist);
+        Type type = new TypeToken<String>() {
+        }.getType();
+        return ApiWrapper.babyrequest(HttpMethod.POST, USER_ACTIVITY_INFOSAVE, type,httpParams);
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/home/ImageFullFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/home/ImageFullFragment.java	(date 1576487593069)
+++ app/src/main/java/com/guansu/management/fragment/home/ImageFullFragment.java	(date 1576487593069)
@@ -0,0 +1,77 @@
+package com.guansu.management.fragment.home;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+
+import com.bumptech.glide.Glide;
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.ui.banner.ConvenientBanner;
+import com.guansu.management.wigdet.banner.holder.CBViewHolderCreator;
+import com.guansu.management.wigdet.banner.holder.Holder;
+
+import butterknife.BindView;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class ImageFullFragment extends BaseFragment {
+    @BindView(R.id.guide_viewpager)
+    ConvenientBanner guideViewpager;
+    @BindView(R.id.ivBack)
+    ImageView ivBack;
+
+    public static ImageFullFragment newInstance() {
+        Bundle args = new Bundle();
+        ImageFullFragment fragment = new ImageFullFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_full_img;
+    }
+
+    @Override
+    public void initView(View view) {
+    }
+
+    @Override
+    public void bindEvent() {
+       /* guideViewpager.setPages(new CBViewHolderCreator<LocalImageHolderView>() {
+            @Override
+            public LocalImageHolderView createHolder() {
+                return new LocalImageHolderView();
+            }
+        }, getContext().getStringArrayListExtra("imgs")).setPageIndicator(new int[]{R.drawable.img_circle_point_uncheck, R.drawable.img_circle_point_checked});
+        guideViewpager.setcurrentitem(getIntent().getIntExtra("page", 0));*/
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+    class LocalImageHolderView implements Holder<String> {
+
+        private ImageView imageView;
+
+        @Override
+        public View createView(Context context) {
+            imageView = new ImageView(context);
+            imageView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+            imageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+            return imageView;
+        }
+
+        @Override
+        public void UpdateUI(Context context, int position, String data) {
+            Glide.with(getContext()).load(data).into(imageView);
+        }
+    }
+}
Index: app/src/main/java/com/guansu/management/ui/welcome/WelcomeContract.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/ui/welcome/WelcomeContract.java	(date 1575452423632)
+++ app/src/main/java/com/guansu/management/ui/welcome/WelcomeContract.java	(date 1575452423632)
@@ -0,0 +1,23 @@
+package com.guansu.management.ui.welcome;
+
+
+import com.guansu.management.base.BaseInterface;
+import com.guansu.management.base.BasePresenter;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class WelcomeContract {
+    interface WelcomeInterface extends BaseInterface {
+        void toHome();
+        void toGuide();
+
+    }
+    interface Presenter extends BasePresenter {
+         /**判断首次打开
+          * @param version_code*/
+         boolean validateFirst(int version_code);
+    }
+
+}
Index: app/src/main/java/com/guansu/management/ui/welcome/WelcomePresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/ui/welcome/WelcomePresenter.java	(date 1577252964830)
+++ app/src/main/java/com/guansu/management/ui/welcome/WelcomePresenter.java	(date 1577252964830)
@@ -0,0 +1,78 @@
+package com.guansu.management.ui.welcome;
+
+import android.os.CountDownTimer;
+
+import com.guansu.management.api.MyObserve;
+import com.guansu.management.base.BaseCommonPresenter;
+import com.guansu.management.utils.CommonUtils;
+
+import java.util.concurrent.TimeUnit;
+
+import io.reactivex.Observable;
+
+/**
+ * Created by dongyaoyao
+ */
+
+public class WelcomePresenter extends BaseCommonPresenter<WelcomeContract.WelcomeInterface>
+        implements WelcomeContract.Presenter {
+    private CountDownTimer countDownTimer;
+
+    public WelcomePresenter(WelcomeContract.WelcomeInterface view, int time) {
+        super(view);
+        countDownTimer = new TimeCount(time, 1000);
+        countDownTimer.start();
+    }
+
+    @Override
+    public boolean validateFirst(int version_code) {
+        int localVersion = CommonUtils.getVersionCode();
+        // 判断当前版本号不一致则显示引导页
+        if (version_code != localVersion) {
+            Observable.timer(1, TimeUnit.SECONDS).subscribe(new MyObserve<Long>(view) {
+                @Override
+                protected void onSuccess(Long aLong) {
+                    view.toGuide();
+                }
+            });
+
+            countDownTimer.cancel();
+        }
+        return version_code != localVersion;
+    }
+
+
+    class TimeCount extends CountDownTimer {
+
+        /**
+         * @param millisInFuture    The number of millis in the future from the call
+         *                          to {@link #start()} until the countdown is done and {@link #onFinish()}
+         *                          is called.
+         * @param countDownInterval The interval along the way to receive
+         *                          {@link #onTick(long)} callbacks.
+         */
+        public TimeCount(long millisInFuture, long countDownInterval) {
+            super(millisInFuture, countDownInterval);
+        }
+
+        @Override
+        public void onFinish() {
+            if (view.isLogin()) {
+                view.toHome();
+            } else {
+                view.toLogin(null);
+            }
+        }
+
+        @Override
+        public void onTick(long millisUntilFinished) {
+        }
+
+    }
+
+    @Override
+    public void unsubscribe() {
+        countDownTimer.cancel();
+        super.unsubscribe();
+    }
+}
Index: app/src/main/java/com/guansu/management/ui/accont/AccountContract.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/ui/accont/AccountContract.java	(date 1575452424041)
+++ app/src/main/java/com/guansu/management/ui/accont/AccountContract.java	(date 1575452424041)
@@ -0,0 +1,32 @@
+package com.guansu.management.ui.accont;//package com.wisdom.regulatory.ui.welcome;
+
+
+import android.content.Context;
+
+import com.guansu.management.base.BaseInterface;
+import com.guansu.management.base.BasePresenter;
+
+/**
+ * Created by dongyaoyao
+ */
+
+public class AccountContract {
+    public interface LoginInterface extends BaseInterface {
+        void loginSuccessed();
+
+        void resetPWDSuccessed();
+    }
+
+    interface Presenter extends BasePresenter {
+        void login(Context context, String account, String pwd);
+
+        void getVerify(String account);
+
+        void findPWD(String account, String verify, String pwd);
+
+        void updatePWD(String user, String pass, String newpassone);
+
+        void Eixt();
+    }
+
+}
Index: app/src/main/java/com/guansu/management/ui/release/ImagePickerAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/ui/release/ImagePickerAdapter.java	(date 1575452423727)
+++ app/src/main/java/com/guansu/management/ui/release/ImagePickerAdapter.java	(date 1575452423727)
@@ -0,0 +1,107 @@
+package com.guansu.management.ui.release;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.guansu.management.R;
+import com.guansu.management.config.Constant;
+import com.lzy.imagepicker.ImagePicker;
+import com.lzy.imagepicker.bean.ImageItem;
+
+import java.util.ArrayList;
+import java.util.List;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class ImagePickerAdapter extends RecyclerView.Adapter<ImagePickerAdapter.SelectedPicViewHolder> {
+    private int maxImgCount;
+    private Context mContext;
+    private List<ImageItem> mData;
+    private LayoutInflater mInflater;
+    private OnRecyclerViewItemClickListener listener;
+    private boolean isAdded;   //是否额外添加了最后一个图片
+
+    public interface OnRecyclerViewItemClickListener {
+        void onItemClick(View view, int position);
+    }
+
+    public void setOnItemClickListener(OnRecyclerViewItemClickListener listener) {
+        this.listener = listener;
+    }
+
+    public void setImages(List<ImageItem> data) {
+        mData = new ArrayList<>(data);
+        if (getItemCount() < maxImgCount) {
+            mData.add(new ImageItem());
+            isAdded = true;
+        } else {
+            isAdded = false;
+        }
+        notifyDataSetChanged();
+    }
+
+    public List<ImageItem> getImages() {
+        //由于图片未选满时，最后一张显示添加图片，因此这个方法返回真正的已选图片
+        if (isAdded) return new ArrayList<>(mData.subList(0, mData.size() - 1));
+        else return mData;
+    }
+
+    public ImagePickerAdapter(Context mContext, List<ImageItem> data, int maxImgCount) {
+        this.mContext = mContext;
+        this.maxImgCount = maxImgCount;
+        this.mInflater = LayoutInflater.from(mContext);
+        setImages(data);
+    }
+
+    @Override
+    public SelectedPicViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        return new SelectedPicViewHolder(mInflater.inflate(R.layout.list_item_image, null));
+    }
+
+    @Override
+    public void onBindViewHolder(SelectedPicViewHolder holder, int position) {
+        holder.bind(position);
+    }
+
+    @Override
+    public int getItemCount() {
+        return mData.size();
+    }
+
+    public class SelectedPicViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
+
+        private ImageView iv_img;
+        private int clickPosition;
+
+        public SelectedPicViewHolder(View itemView) {
+            super(itemView);
+            iv_img = itemView.findViewById(R.id.iv_img);
+        }
+
+        public void bind(int position) {
+            //设置条目的点击事件
+            itemView.setOnClickListener(this);
+            //根据条目位置设置图片
+            ImageItem item = mData.get(position);
+            if (isAdded && position == getItemCount() - 1) {
+                iv_img.setImageResource(R.mipmap.pic_upload_qyfw);
+                clickPosition = Constant.IMAGE_ITEM_ADD;
+            } else {
+                ImagePicker.getInstance().getImageLoader().displayImage((Activity) mContext, item.path, iv_img, 0, 0);
+                clickPosition = position;
+            }
+        }
+
+        @Override
+        public void onClick(View v) {
+            if (listener != null) listener.onItemClick(v, clickPosition);
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/api/CommonResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/api/CommonResponse.java	(date 1576052241403)
+++ app/src/main/java/com/guansu/management/api/CommonResponse.java	(date 1576052241403)
@@ -0,0 +1,13 @@
+package com.guansu.management.api;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class CommonResponse<T> {
+    public String code;
+    public String developMsg;
+    public String msg;
+    public String uri;
+    public long ts;
+    public T data;
+}
Index: app/src/main/java/com/guansu/management/api/ApiWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/api/ApiWrapper.java	(date 1576987584603)
+++ app/src/main/java/com/guansu/management/api/ApiWrapper.java	(date 1576987584603)
@@ -0,0 +1,85 @@
+package com.guansu.management.api;
+import com.guansu.management.config.HttpConstants;
+import com.guansu.management.utils.ParameterizedTypeImpl;
+import com.lzy.okgo.OkGo;
+import com.lzy.okgo.cache.CacheMode;
+import com.lzy.okgo.model.HttpMethod;
+import com.lzy.okgo.model.HttpParams;
+import com.lzy.okgo.request.base.BodyRequest;
+import com.lzy.okgo.request.base.Request;
+import com.lzy.okrx2.adapter.ObservableBody;
+
+import org.json.JSONObject;
+
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import io.reactivex.Observable;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.schedulers.Schedulers;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class ApiWrapper {
+
+    public static <T> Observable<T> request(HttpMethod method, String url, Type type) {
+        return request(method, url, type, null);
+    }
+
+    public static <T> Observable<T> request(HttpMethod method, String url, Type type, HttpParams params) {
+        return request(method, url, type, params, CacheMode.DEFAULT);
+    }
+    public static <T> Observable<T> babyrequest(HttpMethod method, String url, Type type, Map<String,Object> params) {
+        System.out.println("+++++"+params);
+        return babyrequest(method, url, type, params, CacheMode.DEFAULT);
+    }
+    public static <T> Observable<T> request(HttpMethod method, String url, Type type, HttpParams params, CacheMode cacheMode) {
+        Request<T, ? extends Request> request;
+        url = HttpConstants.BASE_URL + url;
+        if (method == HttpMethod.GET) request = OkGo.get(url);
+        else if (method == HttpMethod.POST) request = OkGo.post(url);
+        else if (method == HttpMethod.PUT) request = OkGo.put(url);
+        else if (method == HttpMethod.DELETE) request = OkGo.delete(url);
+        else if (method == HttpMethod.HEAD) request = OkGo.head(url);
+        else if (method == HttpMethod.PATCH) request = OkGo.patch(url);
+        else if (method == HttpMethod.OPTIONS) request = OkGo.options(url);
+        else if (method == HttpMethod.TRACE) request = OkGo.trace(url);
+        else request = OkGo.get(url);
+        request.cacheKey(url+"?"+params.toString());
+        request.cacheMode(cacheMode);
+        if (null == params) {
+            params =new HttpParams();
+        }
+        request.params(params);
+        Type typeAll = new ParameterizedTypeImpl(CommonResponse.class, new Type[]{type});
+        request.converter(new JsonConvert<T>(typeAll));
+        return request.adapt(new ObservableBody<T>()).subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread());
+    }
+    public static <T> Observable<T> babyrequest(HttpMethod method, String url, Type type, Map<String,Object> params, CacheMode cacheMode) {
+        BodyRequest<T, ? extends BodyRequest> request = null;
+        url = HttpConstants.BASE_URL + url;
+         if (method == HttpMethod.POST) request = OkGo.post(url);
+        else if (method == HttpMethod.PUT) request = OkGo.put(url);
+        else if (method == HttpMethod.DELETE) request = OkGo.delete(url);
+        else if (method == HttpMethod.PATCH) request = OkGo.patch(url);
+        else if (method == HttpMethod.OPTIONS) request = OkGo.options(url);
+        request.cacheKey(url+"?"+params.toString());
+        request.cacheMode(cacheMode);
+        if (null == params) {
+            params =new HashMap();
+        }
+        JSONObject jsonObject=new JSONObject(params);
+        request.upJson(jsonObject);
+        Type typeAll = new ParameterizedTypeImpl(CommonResponse.class, new Type[]{type});
+        request.converter(new JsonConvert<T>(typeAll));
+        return request.adapt(new ObservableBody<T>()).subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread());
+    }
+
+}
Index: app/src/main/java/com/guansu/management/api/ServiceException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/api/ServiceException.java	(date 1575452424175)
+++ app/src/main/java/com/guansu/management/api/ServiceException.java	(date 1575452424175)
@@ -0,0 +1,15 @@
+package com.guansu.management.api;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class ServiceException extends Exception {
+    public String code;
+    public String message;
+
+    public ServiceException(String code, String message) {
+        this.code = code;
+        this.message = message;
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/api/APIException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/api/APIException.java	(date 1575452423084)
+++ app/src/main/java/com/guansu/management/api/APIException.java	(date 1575452423084)
@@ -0,0 +1,18 @@
+package com.guansu.management.api;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class APIException extends Exception {
+    public String message;
+
+    public APIException(String message) {
+        this.message = message;
+    }
+
+    @Override
+    public String getMessage() {
+        return message;
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/fragment/payment/PaymentSuccessFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/payment/PaymentSuccessFragment.java	(date 1577175329908)
+++ app/src/main/java/com/guansu/management/fragment/payment/PaymentSuccessFragment.java	(date 1577175329908)
@@ -0,0 +1,40 @@
+package com.guansu.management.fragment.payment;
+
+import android.os.Bundle;
+import android.view.View;
+
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class PaymentSuccessFragment extends BaseFragment {
+    public static PaymentSuccessFragment newInstance() {
+        Bundle args = new Bundle();
+        PaymentSuccessFragment fragment = new PaymentSuccessFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_payment_success;
+    }
+
+    @Override
+    public void initView(View view) {
+
+    }
+
+    @Override
+    public void bindEvent() {
+
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+}
Index: app/src/main/java/com/guansu/management/api/SimpleResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/api/SimpleResponse.java	(date 1576998008317)
+++ app/src/main/java/com/guansu/management/api/SimpleResponse.java	(date 1576998008317)
@@ -0,0 +1,19 @@
+package com.guansu.management.api;
+
+import java.io.Serializable;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class SimpleResponse implements Serializable {
+    private static final long serialVersionUID = -1477609349345966116L;
+    public String code;
+    public String msg;
+
+    public CommonResponse toCommonResponse() {
+        CommonResponse commonResponse = new CommonResponse();
+        commonResponse.code= code;
+        commonResponse.msg = msg;
+        return commonResponse;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/base/MainApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/base/MainApplication.java	(date 1576980859823)
+++ app/src/main/java/com/guansu/management/base/MainApplication.java	(date 1576980859823)
@@ -0,0 +1,120 @@
+package com.guansu.management.base;
+
+import android.app.Application;
+import android.content.Context;
+
+import com.guansu.management.BuildConfig;
+import com.guansu.management.common.ActivityPageManager;
+import com.lzy.imagepicker.ImagePicker;
+import com.lzy.okgo.OkGo;
+import com.lzy.okgo.cache.CacheEntity;
+import com.lzy.okgo.cache.CacheMode;
+import com.lzy.okgo.cookie.CookieJarImpl;
+import com.lzy.okgo.cookie.store.MemoryCookieStore;
+import com.lzy.okgo.https.HttpsUtils;
+import com.lzy.okgo.interceptor.HttpLoggingInterceptor;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import me.yokeyword.fragmentation.Fragmentation;
+import me.yokeyword.fragmentation.helper.ExceptionHandler;
+import okhttp3.OkHttpClient;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class MainApplication extends Application {
+    private static MainApplication context;
+    private final int CONNCET_TIMEOUT = 8;
+    public static MainApplication getInstance() {
+        return context;
+    }
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        context = this;
+        init();
+    }
+
+    /**
+     * 初始化
+     */
+    private void init() {
+        initOkGo();
+        initFragmentation();
+        initImagePicker();
+        initCloudChannel(this);
+    }
+
+
+    private void initImagePicker() {
+        ImagePicker.getInstance().setImageLoader(new GlideImageLoader());
+        ImagePicker.getInstance().setShowCamera(true);
+    }
+
+
+    private void initOkGo() {
+        OkHttpClient.Builder builder = new OkHttpClient.Builder();
+        //log相关
+        if (BuildConfig.DEBUG) {
+            HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor("OkGo");
+            loggingInterceptor.setPrintLevel(HttpLoggingInterceptor.Level.BODY);        //log打印级别，决定了log显示的详细程度
+            loggingInterceptor.setColorLevel(Level.WARNING);                               //log颜色级别，决定了log在控制台显示的颜色
+            builder.addInterceptor(loggingInterceptor);
+        }
+
+        //超时时间设置，默认60秒
+        builder.readTimeout(120000, TimeUnit.MILLISECONDS);
+        builder.writeTimeout(120000, TimeUnit.MILLISECONDS);
+        builder.connectTimeout(CONNCET_TIMEOUT, TimeUnit.SECONDS);
+
+        builder.cookieJar(new CookieJarImpl(new MemoryCookieStore()));
+
+        HttpsUtils.SSLParams sslParams1 = HttpsUtils.getSslSocketFactory();
+        builder.sslSocketFactory(sslParams1.sSLSocketFactory, sslParams1.trustManager);
+
+        // 其他统一的配置
+        // 详细说明看GitHub文档：https://github.com/jeasonlzy/
+        OkGo.getInstance().init(this)
+                .setOkHttpClient(builder.build())
+                .setCacheMode(CacheMode.NO_CACHE)
+                .setCacheTime(CacheEntity.CACHE_NEVER_EXPIRE);
+//        OkDownload.getInstance().getThreadPool().setCorePoolSize(1);
+
+    }
+
+    private void initFragmentation() {
+        Fragmentation.builder()
+                .debug(BuildConfig.DEBUG)
+                .handleException(new ExceptionHandler() {
+                    @Override
+                    public void onException(Exception e) {
+                    }
+                })
+                .install();
+    }
+
+    /**
+     * 初始化云推送通道
+     * @param applicationContext
+     */
+    private void initCloudChannel(Context applicationContext) {
+//        PushServiceFactory.init(applicationContext);
+//        CloudPushService pushService = PushServiceFactory.getCloudPushService();
+//        pushService.register(applicationContext, new CommonCallback() {
+//            @Override
+//            public void onSuccess(String response) {
+//            }
+//            @Override
+//            public void onFailed(String errorCode, String errorMessage) {
+//            }
+//        });
+//        pushService.setLogLevel(CloudPushService.LOG_OFF);
+    }
+
+    /**
+     * 退出应用
+     */
+    public void exit() {
+        ActivityPageManager.getInstance().exit(this);
+    }
+}
Index: app/src/main/java/com/guansu/management/api/MyObserve.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/api/MyObserve.java	(date 1576978889053)
+++ app/src/main/java/com/guansu/management/api/MyObserve.java	(date 1576978889053)
@@ -0,0 +1,75 @@
+package com.guansu.management.api;
+
+import com.guansu.management.base.BaseInterface;
+import com.guansu.management.config.HttpConstants;
+import com.lzy.okgo.exception.HttpException;
+
+import java.lang.ref.WeakReference;
+import java.net.ConnectException;
+import java.net.SocketTimeoutException;
+import java.net.UnknownHostException;
+
+import io.reactivex.Observer;
+import io.reactivex.disposables.Disposable;
+
+/**
+ * Created by dongyaoyao on 2017/8/8.
+ *
+ */
+
+public abstract class MyObserve<T> implements Observer<T> {
+    private WeakReference<BaseInterface> baseInterface;
+
+    public MyObserve(BaseInterface baseInterface) {
+        this.baseInterface = new WeakReference<BaseInterface>(baseInterface);
+    }
+
+
+    @Override
+    public void onSubscribe(Disposable d) {
+        if (null != baseInterface.get())
+            baseInterface.get().addDisposable(d);
+    }
+
+    @Override
+    public void onNext(T t) {
+        if (null != baseInterface.get())
+            baseInterface.get().hideLoadingDialog();
+        onSuccess(t);
+    }
+
+    @Override
+    public void onError(Throwable e) {
+        if (null != baseInterface.get())
+            baseInterface.get().hideLoadingDialog();
+        if (e instanceof UnknownHostException || e instanceof ConnectException) {
+            baseInterface.get().showToast("无法连接到网络");
+        } else if (e instanceof SocketTimeoutException) {
+            baseInterface.get().showToast("网络连接超时");
+        } else if (e instanceof NullPointerException) {
+            baseInterface.get().showToast("服务器异常，请稍后再试");
+        } else if (e instanceof ServiceException) {
+            ServiceException serviceException = (ServiceException) e;
+            if (serviceException.code.equals(HttpConstants.SESSION_TIMEOUT)) {
+                baseInterface.get().toLogin(serviceException.message);
+            }else if(serviceException.code.equals(HttpConstants.NO_DATA)){
+
+            }else{
+                baseInterface.get().showToast("服务器异常，请稍后再试");
+            }
+        } else if (e instanceof APIException) {
+            baseInterface.get().showToast(e.getMessage());
+        } else if (e instanceof HttpException) {
+            // 其他各种http错误
+        }
+
+    }
+
+    @Override
+    public void onComplete() {
+
+    }
+
+    protected abstract void onSuccess(T t);
+
+}
Index: app/src/main/java/com/guansu/management/api/JsonConvert.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/api/JsonConvert.java	(date 1576987584646)
+++ app/src/main/java/com/guansu/management/api/JsonConvert.java	(date 1576987584646)
@@ -0,0 +1,57 @@
+package com.guansu.management.api;
+
+import com.google.gson.Gson;
+import com.google.gson.stream.JsonReader;
+import com.guansu.management.config.HttpConstants;
+import com.lzy.okgo.convert.Converter;
+
+import java.lang.reflect.Type;
+
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class JsonConvert<T> implements Converter<T> {
+
+    private Type type;
+
+    public JsonConvert(Type type) {
+        this.type = type;
+    }
+
+
+    @Override
+    public T convertResponse(Response response) throws Throwable {
+        ResponseBody body = response.body();
+        if (body == null) return null;
+        Gson gson = new Gson();
+        JsonReader jsonReader = new JsonReader(body.charStream());
+        CommonResponse commonResponse = gson.fromJson(jsonReader, type);
+        response.close();
+        String code = commonResponse.code;
+
+        if (HttpConstants.SUCCESS_CODE.equals(code)) {
+            if (null == commonResponse.data) {
+                return (T)commonResponse;
+            } else {
+                return (T) commonResponse.data;
+            }
+        } else if (code.equals(HttpConstants.NO_DATA)) {
+            throw new ServiceException(HttpConstants.NO_DATA, commonResponse.msg);
+        } else if (code.equals(HttpConstants.SESSION_TIMEOUT)) {
+            throw new ServiceException(HttpConstants.SESSION_TIMEOUT, commonResponse.msg);
+        } else if (HttpConstants.BUSSINESS_CODE_MIN.compareTo(code) <= 0 && HttpConstants.BUSSINESS_CODE_MAX.compareTo(code) >= 0) {
+            throw new ServiceException(code, commonResponse.msg);
+        } else if (code.equals(HttpConstants.ERROR_SYSTEM)) {
+            throw new APIException("服务器异常，请稍后再试");
+        } else if (HttpConstants.WARNING_MESSAGE_MIN.compareTo(code) <= 0 && HttpConstants.WARNING_MESSAGE_MAX.compareTo(code) >= 0) {
+            throw new APIException(commonResponse.msg);
+        } else {
+            throw new ServiceException(code, commonResponse.msg);
+        }
+    }
+//        }
+//    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/base/GlideImageLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/base/GlideImageLoader.java	(date 1575452424774)
+++ app/src/main/java/com/guansu/management/base/GlideImageLoader.java	(date 1575452424774)
@@ -0,0 +1,38 @@
+package com.guansu.management.base;
+
+import android.app.Activity;
+import android.widget.ImageView;
+
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.guansu.management.R;
+import com.lzy.imagepicker.loader.ImageLoader;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class GlideImageLoader implements ImageLoader {
+
+    @Override
+    public void displayImage(Activity activity, String path, ImageView imageView, int width, int height) {
+
+        Glide.with(activity)                             //配置上下文
+                .load(path)      //设置图片路径(fix #8,文件名包含%符号 无法识别和显示)
+                .error(R.drawable.ic_default_image)           //设置错误图片
+                .placeholder(R.drawable.ic_default_image)     //设置占位图片
+                .diskCacheStrategy(DiskCacheStrategy.ALL)//缓存全尺寸
+                .into(imageView);
+    }
+
+    @Override
+    public void displayImagePreview(Activity activity, String path, ImageView imageView, int width, int height) {
+        Glide.with(activity)                             //配置上下文
+                .load(path)      //设置图片路径(fix #8,文件名包含%符号 无法识别和显示)
+                .diskCacheStrategy(DiskCacheStrategy.ALL)//缓存全尺寸
+                .into(imageView);
+    }
+
+    @Override
+    public void clearMemoryCache() {
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/bean/ShareItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/bean/ShareItem.java	(date 1575621687859)
+++ app/src/main/java/com/guansu/management/bean/ShareItem.java	(date 1575621687859)
@@ -0,0 +1,16 @@
+package com.guansu.management.bean;
+
+/**
+ * @date: $ $
+ * @author: dongyaoyao
+ */
+public  class ShareItem{
+    public String titme;
+    public int id;
+
+
+    public ShareItem(String titme,int id) {
+        this.titme = titme;
+        this.id = id;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/base/BasePresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/base/BasePresenter.java	(date 1575452423448)
+++ app/src/main/java/com/guansu/management/base/BasePresenter.java	(date 1575452423448)
@@ -0,0 +1,15 @@
+package com.guansu.management.base;
+
+import io.reactivex.disposables.Disposable;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+
+public interface BasePresenter {
+    void addDisposable(Disposable d);
+
+    void unsubscribe();
+
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/base/BaseCommonPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/base/BaseCommonPresenter.java	(date 1575452424403)
+++ app/src/main/java/com/guansu/management/base/BaseCommonPresenter.java	(date 1575452424403)
@@ -0,0 +1,43 @@
+package com.guansu.management.base;
+
+
+import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.disposables.Disposable;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+
+public class BaseCommonPresenter<T extends BaseInterface> {
+    /**
+     * 使用CompositeSubscription来持有所有的Subscriptions
+     */
+    protected CompositeDisposable mCompositedDisposable;
+
+    public T view;
+
+    public BaseCommonPresenter(T view) {
+        //创建 CompositeSubscription 对象 使用CompositeSubscription来持有所有的Subscriptions，然后在onDestroy()或者onDestroyView()里取消所有的订阅。
+        mCompositedDisposable = new CompositeDisposable();
+        // 构建 ApiWrapper 对象
+        this.view = view;
+    }
+
+    public void addDisposable(Disposable d) {
+        if (mCompositedDisposable != null) {
+            mCompositedDisposable.add(d);
+        }
+    }
+
+    /**
+     * 解绑 CompositeSubscription
+     */
+    public void unsubscribe() {
+        if (mCompositedDisposable != null) {
+            mCompositedDisposable.dispose();
+        }
+        view = null;
+    }
+
+}
Index: app/src/main/java/com/guansu/management/model/AccountModelIml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/model/AccountModelIml.java	(date 1576746639293)
+++ app/src/main/java/com/guansu/management/model/AccountModelIml.java	(date 1576746639293)
@@ -0,0 +1,78 @@
+package com.guansu.management.model;
+
+import android.util.Log;
+
+import com.google.gson.reflect.TypeToken;
+import com.guansu.management.api.ApiWrapper;
+import com.guansu.management.api.CommonResponse;
+import com.guansu.management.bean.UserInfo;
+import com.guansu.management.model.bean.LoginResult;
+import com.lzy.okgo.cache.CacheMode;
+import com.lzy.okgo.model.HttpMethod;
+import com.lzy.okgo.model.HttpParams;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.Map;
+
+import io.reactivex.Observable;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class AccountModelIml {
+
+    public static final String URL_LOGIN = "/user/open/loginOrRegister";
+    public static final String URL_VERIFY = "/system/open/sendRegLoginMsg";
+    public static final String URL_UPDATE = "updatePassword.do";
+    public static final String URL_EXIT = "desTSession.do";
+    public static final String URL_APPVERSIONINFO = "getAppVersionInfo.do";
+
+
+    public Observable<UserInfo> login(String user, String pass) {
+        Map<String,Object> httpParams = new HashMap<>();
+        httpParams.put("mobileNumber",user);
+        httpParams.put("password",pass);
+        httpParams.put("clientId","186930579493359616");
+        httpParams.put("requestSource","APP");
+        JSONObject jsonObject=new JSONObject(httpParams);
+        Log.d("jsonObject",jsonObject.toString());
+        Type type = new TypeToken<UserInfo>() {
+        }.getType();
+        return ApiWrapper.babyrequest(HttpMethod.POST, URL_LOGIN, type,httpParams);
+    }
+
+    public Observable getVerify(String account) {
+        HttpParams httpParams = new HttpParams();
+        httpParams.put("mobile",account);
+        Type type = new TypeToken<LoginResult>() {
+        }.getType();
+        return ApiWrapper.request(HttpMethod.GET, URL_VERIFY, type,httpParams);
+    }
+
+    public Observable<CommonResponse> getUpdate(String user, String pass, String newpassone){
+        HttpParams httpParams = new HttpParams();
+        httpParams.put("user",user);
+        httpParams.put("pass",pass);
+        httpParams.put("newpassone",newpassone);
+        httpParams.put("newpasstwo",newpassone);
+        Type type = new TypeToken<CommonResponse>() {
+        }.getType();
+        return ApiWrapper.request(HttpMethod.POST, URL_UPDATE, type,httpParams);
+    }
+    public Observable<CommonResponse> getExit() {
+        HttpParams httpParams = new HttpParams();
+        Type type = new TypeToken<CommonResponse>() {
+        }.getType();
+        return ApiWrapper.request(HttpMethod.POST, URL_EXIT, type,httpParams);
+    }
+ /*   public Observable<List<VersionBean>> version() {
+        HttpParams httpParams = new HttpParams();
+        Type type = new TypeToken<List<VersionBean>>() {
+        }.getType();
+        return ApiWrapper.request(HttpMethod.POST, URL_APPVERSIONINFO, type,httpParams);
+    }*/
+}
Index: app/src/main/java/com/guansu/management/bean/UserInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/bean/UserInfo.java	(date 1577254072088)
+++ app/src/main/java/com/guansu/management/bean/UserInfo.java	(date 1577254072088)
@@ -0,0 +1,62 @@
+package com.guansu.management.bean;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class UserInfo implements Parcelable {
+
+    /**
+     * org_code : 610000000000
+     * org_level : 1
+     * org_name : 陕西省
+     * role_code : 402881a0529aaa0401529aae52720005
+     * role_name : 系统管理员
+     * userId : 9e26acf7bc7f4225aac84fe3853e4d59
+     * username : test
+     */
+    private String userId;
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(this.userId);
+    }
+
+    public UserInfo() {
+    }
+
+    protected UserInfo(Parcel in) {
+
+        this.userId = in.readString();
+
+    }
+
+    public static final Creator<UserInfo> CREATOR = new Creator<UserInfo>() {
+        @Override
+        public UserInfo createFromParcel(Parcel source) {
+            return new UserInfo(source);
+        }
+
+        @Override
+        public UserInfo[] newArray(int size) {
+            return new UserInfo[size];
+        }
+    };
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/model/MessageModellml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/model/MessageModellml.java	(date 1577082429698)
+++ app/src/main/java/com/guansu/management/model/MessageModellml.java	(date 1577082429698)
@@ -0,0 +1,69 @@
+package com.guansu.management.model;
+import com.google.gson.reflect.TypeToken;
+import com.guansu.management.api.ApiWrapper;
+import com.guansu.management.bean.ActivityDtoInfo;
+import com.guansu.management.config.Constant;
+import com.lzy.okgo.model.HttpMethod;
+import com.lzy.okgo.model.HttpParams;
+
+import java.lang.reflect.Type;
+import java.util.HashMap;
+
+import io.reactivex.Observable;
+
+/**
+ * @author: dongyaoyao
+ */
+public class MessageModellml {
+    //活动详情
+    public static final String FIND_ACTIVITY_DTOINFO = "/activity/findActivityDtoInfo";
+    //活动报名
+    public static final String FIND_ACTIVITY_SIGNUPSAVE = "/activity/api/activitySignUpSave";
+    //活动发表评论
+    public static final String FIND_ACTIVITY_COMMENTSAVE = "/activity/api/activityCommentSave";
+    ///圈子添加评论
+    public static final String FIND_ACTIVITY_TEXTSAVE = "/content/api/contentCommentSave1";
+    //圈子查询
+    public static final String FIND_ACTIVITY_IMGANDTEXT = "/content/api/getContentUserImgAndTextById";
+    public Observable<ActivityDtoInfo> find_activity_dtoinfo(String userId, String activityId,String tag) {
+        String HTTPURL;
+        HttpParams httpParams=new HttpParams();
+        httpParams.put("userId",userId);
+        if (tag.equals(Constant.VIEW_CIRCLE)){
+            httpParams.put("id",activityId);
+            HTTPURL=FIND_ACTIVITY_IMGANDTEXT;
+        }else {
+            HTTPURL=FIND_ACTIVITY_DTOINFO;
+            httpParams.put("activityId",activityId);
+        }
+        Type type = new TypeToken<ActivityDtoInfo>() {
+        }.getType();
+        return ApiWrapper.request(HttpMethod.GET, HTTPURL, type,httpParams);
+    }
+    public Observable<String> find_activity_signupsave(String userId, String activityId) {
+        HashMap<String,Object> httpParams = new HashMap<>();
+        httpParams.put("userId",userId);
+        httpParams.put("activityId",activityId);
+        Type type = new TypeToken<String>() {
+        }.getType();
+        return ApiWrapper.babyrequest(HttpMethod.POST, FIND_ACTIVITY_SIGNUPSAVE, type,httpParams);
+    }
+    public Observable<String> find_activity_commentsave(String userId, String objectId,String content,
+                                                        String parentId,String targetUserNickname,String tag) {
+        String HTTPURL;
+        HashMap<String,Object> httpParams = new HashMap<>();
+        if (tag.equals(Constant.VIEW_CIRCLE)){
+            HTTPURL=FIND_ACTIVITY_TEXTSAVE;
+        }else {
+            HTTPURL=FIND_ACTIVITY_COMMENTSAVE;
+        }
+        httpParams.put("userId",userId);//自己
+        httpParams.put("objectId",objectId);//活动
+        httpParams.put("content",content);
+        httpParams.put("parentId",parentId);//目标id
+        httpParams.put("targetUserNickname",targetUserNickname);//目标昵称
+        Type type = new TypeToken<String>() {
+        }.getType();
+        return ApiWrapper.babyrequest(HttpMethod.POST, HTTPURL, type,httpParams);
+    }
+}
Index: app/src/main/java/com/guansu/management/utils/CommonUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/utils/CommonUtils.java	(date 1575452425095)
+++ app/src/main/java/com/guansu/management/utils/CommonUtils.java	(date 1575452425095)
@@ -0,0 +1,64 @@
+package com.guansu.management.utils;
+
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.text.TextUtils;
+
+
+import com.guansu.management.base.MainApplication;
+
+import java.text.DecimalFormat;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class CommonUtils {
+
+    public static String formatPersonCount(String personCount) {
+        if (!TextUtils.isEmpty(personCount)) {
+            return formatPersonCount(Integer.valueOf(personCount));
+        }
+    return "0";
+    }
+
+    public static String formatPersonCount(int personCount) {
+        float num = Float.valueOf(personCount);
+        if (num < 10000) {
+            DecimalFormat df = new DecimalFormat("#,###");
+            return df.format(num);
+        } else {
+            DecimalFormat df = new DecimalFormat("#,###.##万");
+            return df.format(num / 10000);
+        }
+    }
+
+
+    /**
+     * 获取app versioncode
+     * @return
+     */
+    public static int getVersionCode() {
+        PackageManager pm = MainApplication.getInstance().getPackageManager();// 获取包管理器
+        try {
+            PackageInfo packageInfo = pm.getPackageInfo(MainApplication.getInstance().getPackageName(), 0);// 根据包名获取应用版本信息
+            int versionCode = packageInfo.versionCode;// 获取版本号
+            return versionCode;
+        } catch (PackageManager.NameNotFoundException e) {
+            return 0;
+        }
+    }
+    /**
+     * 获取app versionname
+     * @return
+     */
+    public static String getVersionName() {
+        PackageManager pm = MainApplication.getInstance().getPackageManager();// 获取包管理器
+        try {
+            PackageInfo packageInfo = pm.getPackageInfo(MainApplication.getInstance().getPackageName(), 0);// 根据包名获取应用版本信息
+            String versionName = packageInfo.versionName;// 获取版本号
+            return versionName;
+        } catch (PackageManager.NameNotFoundException e) {
+            return "";
+        }
+    }
+}
Index: app/src/main/java/com/guansu/management/utils/ParameterizedTypeImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/utils/ParameterizedTypeImpl.java	(date 1575452424310)
+++ app/src/main/java/com/guansu/management/utils/ParameterizedTypeImpl.java	(date 1575452424310)
@@ -0,0 +1,32 @@
+package com.guansu.management.utils;
+
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class ParameterizedTypeImpl implements ParameterizedType {
+    private final Class raw;
+    private final Type[] args;
+
+    public ParameterizedTypeImpl(Class raw, Type[] args) {
+        this.raw = raw;
+        this.args = args != null ? args : new Type[0];
+    }
+
+    @Override
+    public Type[] getActualTypeArguments() {
+        return args;
+    }
+
+    @Override
+    public Type getRawType() {
+        return raw;
+    }
+
+    @Override
+    public Type getOwnerType() {
+        return null;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/model/bean/LoginResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/model/bean/LoginResult.java	(date 1576649435597)
+++ app/src/main/java/com/guansu/management/model/bean/LoginResult.java	(date 1576649435597)
@@ -0,0 +1,12 @@
+package com.guansu.management.model.bean;
+
+import com.google.gson.JsonArray;
+import com.guansu.management.bean.UserInfo;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class LoginResult {
+    private UserInfo userInfo;
+
+}
Index: app/src/main/java/com/guansu/management/model/bean/HomeBannerBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/model/bean/HomeBannerBean.java	(date 1576207571736)
+++ app/src/main/java/com/guansu/management/model/bean/HomeBannerBean.java	(date 1576207571736)
@@ -0,0 +1,41 @@
+package com.guansu.management.model.bean;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class HomeBannerBean {
+
+    private String title;
+    private String content;
+    private int background;
+
+    public int getBackground() {
+        return background;
+    }
+
+    public void setBackground(int background) {
+        this.background = background;
+    }
+
+    public HomeBannerBean(int background, String title) {
+        this.title = title;
+//        this.content = content;
+        this.background = background;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+}
Index: app/src/main/java/com/guansu/management/common/ActivityPageManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/common/ActivityPageManager.java	(date 1575452423021)
+++ app/src/main/java/com/guansu/management/common/ActivityPageManager.java	(date 1575452423021)
@@ -0,0 +1,216 @@
+package com.guansu.management.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.view.View;
+import android.view.ViewGroup;
+import android.webkit.WebView;
+import android.widget.ImageView;
+import android.widget.ListView;
+
+import java.util.Stack;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class ActivityPageManager {
+
+	private static Stack<Activity> activityStack;
+	private static ActivityPageManager instance;
+	
+	/**
+	 * constructor
+	 */
+	private ActivityPageManager() {
+		
+	}
+
+	/**
+	 * get the AppManager instance, the AppManager is singleton.
+	 */
+	public static ActivityPageManager getInstance() {
+		if (instance == null) {
+			instance = new ActivityPageManager();
+		}
+		return instance;
+	}
+
+	/**
+	 * add Activity to Stack
+	 */
+	public void addActivity(Activity activity) {
+		if (activityStack == null) {
+			activityStack = new Stack<Activity>();
+		}
+		activityStack.add(activity);
+	}
+
+	
+	/**
+	 *  remove Activity from Stack
+	 */
+	public void removeActivity(Activity activity) {
+		if (activityStack == null) {
+			activityStack = new Stack<Activity>();
+		}
+		activityStack.remove(activity);
+	}
+	
+	/**
+	 * get current activity from Stack
+	 */
+	public Activity currentActivity() {
+		Activity activity = activityStack.lastElement();
+		return activity;
+	}
+
+	public void finishActivity() {
+		Activity activity = activityStack.lastElement();
+		finishActivity(activity);
+	}
+
+	public void finishActivity(Activity activity) {
+		if (activity != null) {
+			activityStack.remove(activity);
+			activity.finish();
+			activity = null;
+		}
+	}
+
+	public void finishActivity(Class<?> cls) {
+		for (Activity activity : activityStack) {
+			if (activity.getClass().equals(cls)) {
+				finishActivity(activity);
+			}
+		}
+	}
+
+	public void finishAllActivity() {
+		for (Activity activity : activityStack) {
+			if (null != activity) {
+				activity.finish();
+			}
+		}
+		activityStack.clear();
+		//杀死该应用进程
+//		android.os.Process.killProcess(android.os.Process.myPid());
+
+	}
+
+	public static void unbindReferences(View view) {
+		try {
+			if (view != null) {
+				view.destroyDrawingCache();
+				unbindViewReferences(view);
+				if (view instanceof ViewGroup){
+					unbindViewGroupReferences((ViewGroup) view);
+				}
+			}
+		} catch (Throwable e) {
+
+		}
+	}
+
+	private static void unbindViewGroupReferences(ViewGroup viewGroup) {
+		int nrOfChildren = viewGroup.getChildCount();
+		for (int i = 0; i < nrOfChildren; i++) {
+			View view = viewGroup.getChildAt(i);
+			unbindViewReferences(view);
+			if (view instanceof ViewGroup)
+				unbindViewGroupReferences((ViewGroup) view);
+		}
+		try {
+			viewGroup.removeAllViews();
+		} catch (Throwable mayHappen) {
+			// AdapterViews, ListViews and potentially other ViewGroups don't
+			// support the removeAllViews operation
+		}
+	}
+
+	@SuppressWarnings("deprecation")
+	private static void unbindViewReferences(View view) {
+		// set all listeners to null (not every view and not every API level
+		// supports the methods)
+		try {
+		    view.setOnClickListener(null);
+			view.setOnCreateContextMenuListener(null);
+			view.setOnFocusChangeListener(null);
+			view.setOnKeyListener(null);
+			view.setOnLongClickListener(null);
+			view.setOnClickListener(null);
+		} catch (Throwable mayHappen) {
+
+		}
+
+		// set background to null
+		Drawable d = view.getBackground();
+		if (d != null){
+			d.setCallback(null);
+		}
+		
+		if (view instanceof ImageView) {
+			ImageView imageView = (ImageView) view;
+			d = imageView.getDrawable();
+			if (d != null){
+				d.setCallback(null);
+			}
+			imageView.setImageDrawable(null);
+			imageView.setBackgroundDrawable(null);
+		}
+
+		// destroy WebView
+		if (view instanceof WebView) {
+			WebView webview = (WebView) view;
+			webview.stopLoading();
+			webview.clearFormData();
+			webview.clearDisappearingChildren();
+			webview.setWebChromeClient(null);
+			webview.setWebViewClient(null);
+			webview.destroyDrawingCache();
+			webview.destroy();
+			webview = null;
+		}
+
+		if (view instanceof ListView) {
+			ListView listView = (ListView) view;
+			try {
+				listView.removeAllViewsInLayout();
+			} catch (Throwable mayHappen) {
+			}
+			((ListView) view).destroyDrawingCache();
+		}
+	}
+	
+	/**
+	 * exit System
+	 * @param context
+	 */
+	public void exit(Context context) {
+		exit(context, true);
+	}
+	
+	/**
+	 * exit System
+	 * @param context
+	 * @param isClearCache
+	 */
+	@SuppressWarnings("deprecation")
+	public void exit(Context context, boolean isClearCache) {
+		try {
+			finishAllActivity();
+			/*if(context != null){
+				ActivityManager activityMgr = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
+				activityMgr.restartPackage(context.getPackageName());
+			}*/
+			/*if(isClearCache){
+				LruCacheManager.getInstance().evictAll();
+				CacheManager.clearAll();
+			}*/
+//			System.exit(0);
+//			android.os.Process.killProcess(android.os.Process.myPid());
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+}
Index: app/src/main/java/com/guansu/management/common/ReplaceViewHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/common/ReplaceViewHelper.java	(date 1575452423610)
+++ app/src/main/java/com/guansu/management/common/ReplaceViewHelper.java	(date 1575452423610)
@@ -0,0 +1,91 @@
+package com.guansu.management.common;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.RelativeLayout;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class ReplaceViewHelper {
+    private View mTargetView;
+    private View mReplaceView = null;
+    private Context mContext;
+  
+    private ReplaceViewHelper() {  
+    }  
+  
+    public ReplaceViewHelper(Context context) {
+        mContext = context;  
+    }  
+  
+    /** 
+     * 用来替换某个View，比如你可以用一个空页面去替换某个View 
+     * 
+     * @param targetView       被替换的那个View 
+     * @param replaceViewResId 要替换进去的布局LayoutId 
+     * @return 
+     */  
+    public ReplaceViewHelper toReplaceView(View targetView, final int replaceViewResId) {
+        toReplaceView(targetView, View.inflate(mContext, replaceViewResId,null));
+        return this;  
+    }  
+  
+    /** 
+     * 用来替换某个View，比如你可以用一个空页面去替换某个View 
+     * 
+     * @param targetView  被替换的那个View 
+     * @param replaceView 要替换进去的那个View 
+     * @return 
+     */  
+    public ReplaceViewHelper toReplaceView(View targetView, final View replaceView) {
+        mTargetView = targetView;  
+        if (mTargetView == null) {  
+            return this;  
+        } else if (!(mTargetView.getParent() instanceof ViewGroup)) {
+            return this;  
+        }  
+  
+        ViewGroup parentViewGroup = (ViewGroup) mTargetView.getParent();
+        if (mReplaceView != null) {
+            parentViewGroup.removeView(mReplaceView);
+        }
+        int index = parentViewGroup.indexOfChild(mTargetView);
+        mReplaceView = replaceView;
+        mReplaceView.setLayoutParams(mTargetView.getLayoutParams());  
+  
+        parentViewGroup.addView(mReplaceView, index);  
+  
+        //RelativeLayout时别的View可能会依赖这个View的位置，所以不能GONE  
+        if (parentViewGroup instanceof RelativeLayout) {
+            mTargetView.setVisibility(View.INVISIBLE);
+        } else {  
+            mTargetView.setVisibility(View.GONE);
+        }  
+        return this;  
+    }  
+  
+    /** 
+     * 移除你替换进来的View 
+     */  
+    public final ReplaceViewHelper removeView() {  
+        if (mReplaceView != null && mTargetView != null) {  
+            if (mTargetView.getParent() instanceof ViewGroup) {
+                ViewGroup parentViewGroup = (ViewGroup) mTargetView.getParent();
+                parentViewGroup.removeView(mReplaceView);  
+                mReplaceView = null;  
+                mTargetView.setVisibility(View.VISIBLE);
+            }  
+        }  
+        return this;  
+    }  
+  
+    /** 
+     * @return 返回你替换进来的View 
+     */  
+    public final View getView() {
+        return mReplaceView;  
+    }  
+}  
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/utils/ParcelableUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/utils/ParcelableUtil.java	(date 1575452424210)
+++ app/src/main/java/com/guansu/management/utils/ParcelableUtil.java	(date 1575452424210)
@@ -0,0 +1,41 @@
+package com.guansu.management.utils;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.Base64;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+
+public class ParcelableUtil {
+
+    public static String object2String(Parcelable object) {
+        // 1.序列化
+        Parcel p = Parcel.obtain();
+        object.writeToParcel(p, 0);
+        byte[] bytes = p.marshall();
+        p.recycle();
+
+        // 2.编码
+        String str = Base64.encodeToString(bytes, Base64.DEFAULT);
+        return str;
+    }
+
+    private static Parcel unmarshall(byte[] bytes) {
+        Parcel parcel = Parcel.obtain();
+        parcel.unmarshall(bytes, 0, bytes.length);
+        parcel.setDataPosition(0); // this is extremely important!
+        return parcel;
+    }
+
+    public static <T> T string2Object(String str, Parcelable.Creator<T> creator) {
+        // 1.解码
+        byte[] bytes = Base64.decode(str, Base64.DEFAULT);
+        // 2.反序列化
+        Parcel parcel = unmarshall(bytes);
+        return creator.createFromParcel(parcel);
+    }
+
+}
Index: app/src/main/java/com/guansu/management/config/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/config/Constants.java	(date 1575452424434)
+++ app/src/main/java/com/guansu/management/config/Constants.java	(date 1575452424434)
@@ -0,0 +1,14 @@
+package com.guansu.management.config;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class Constants {
+    public static String ACTION_BROADCAST_FILTER = "com.wisdom.filter";
+    public static String KEY_URL = "url";
+    public static String KEY_TITLE = "title";
+    public static String KEY_TYPE = "type";
+
+
+    public static final int PAGE_SIZE = 20;
+}
Index: app/src/main/java/com/guansu/management/config/Constant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/config/Constant.java	(date 1577256639516)
+++ app/src/main/java/com/guansu/management/config/Constant.java	(date 1577256639516)
@@ -0,0 +1,45 @@
+package com.guansu.management.config;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class Constant {
+    /**
+     * 使用常量
+     */
+    public final static int PROGRESS_ERROR_CODE = -1;//进度条不显示文本
+    /**
+     * BaseDialog 按钮下标
+     */
+    public final static int DIALOG_WHICH_OK = 0;
+    public final static int DIALOG_WHICH_CANCEL = 1;
+    public final static int DIALOG_TITLE_DEFAULT = -1;
+
+    public static final String INTENT_BUSINESS_CATEGORY = "business_type";
+    public static final String INTENT_ID_NUMBER = "idCardNumber";
+    public static final String INTENT_ARCHIVE_ID = "archiveId";
+    public static final String INTENT_FULL_NAME="fullName";
+
+    public static final int PAGE_SIZE = 40;
+
+    //选择图片
+    public static final int IMAGE_ITEM_ADD = -1;
+    public static final int REQUEST_CODE_SELECT = 100;
+    public static final int REQUEST_CODE_PREVIEW = 101;
+    //扫描身份证
+    public static int SCANNER_REQUESTCODE = 200;
+
+    public static String ACTION_BROADCAST_PUSH = "com.wisdom.push";
+    public static String INTENT_FROMPUSH = "fromPush";
+
+    public static String NAMESPACE_JSSDK = "WISDOM_JS";
+
+    public static String REPORT_NAME_LIST="report_name";
+    public static String REPORT_LIST="report_list";
+
+    //圈子，活动，最新
+    public static String VIEW_CIRCLE="viewCircle";
+    public static String VIEW_CONSTRAINTS="viewConstraints";
+    public static String VIEW_BLEND="viewBlend";
+
+}
Index: app/src/main/java/com/guansu/management/common/UserSharedPreferencesUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/common/UserSharedPreferencesUtils.java	(date 1577254072048)
+++ app/src/main/java/com/guansu/management/common/UserSharedPreferencesUtils.java	(date 1577254072048)
@@ -0,0 +1,103 @@
+package com.guansu.management.common;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import com.guansu.management.bean.UserInfo;
+import com.guansu.management.utils.ParcelableUtil;
+/**
+ *
+ * Created by dongyaoyao
+ */
+
+
+public class UserSharedPreferencesUtils {
+    private static final String USER_PARAMERS = "UserParams";
+    private final String KEY_USER = "user";
+    private final String KEY_ACCOUNT = "account";
+    private final String KEY_PWD = "pwd";
+//    private final String KEY_TOKEN = "token";
+    private final String KEY_USER_ID = "userid";
+
+    private UserInfo userInfo;
+    private String account;
+    private String pwd;
+//    private String token;
+    private String userid;
+
+    public String getUserid() {
+        return userid;
+    }
+
+    public void setUserid(String userid) {
+        this.userid = userid;
+    }
+
+    private final SharedPreferences sharedPreferences;
+
+    public UserSharedPreferencesUtils(Context mContext) {
+        sharedPreferences = mContext.getSharedPreferences(USER_PARAMERS,
+                Context.MODE_PRIVATE);
+        loadSharedPreferences();
+    }
+
+    /**
+     * 加载配置
+     */
+    private void loadSharedPreferences() {
+        this.setUserInfo(ParcelableUtil.string2Object(sharedPreferences.getString(KEY_USER, ""),
+                UserInfo.CREATOR));
+        this.setAccount(sharedPreferences.getString(KEY_ACCOUNT, ""));
+        this.setPwd(sharedPreferences.getString(KEY_PWD, ""));
+//        this.setToken(sharedPreferences.getString(KEY_TOKEN, ""));
+        this.setUserid(sharedPreferences.getString(KEY_USER_ID, ""));
+    }
+
+
+    /**
+     * 保存配置文件到android配置
+     */
+
+    public void saveSharedPreferences() {
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.putString(KEY_USER, ParcelableUtil.object2String(getUserInfo()));
+        editor.putString(KEY_ACCOUNT, getAccount());
+        editor.putString(KEY_PWD, getPwd());
+//        editor.putString(KEY_TOKEN, getToken());
+        editor.putString(KEY_USER_ID, getUserid());
+        editor.commit();
+    }
+
+    public void clearSharedPreferences() {
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        if (editor != null) {
+            editor.clear().commit();
+        }
+    }
+
+    public UserInfo getUserInfo() {
+        return userInfo;
+    }
+
+    public void setUserInfo(UserInfo userInfo) {
+        this.userInfo = userInfo;
+    }
+
+    public String getAccount() {
+        return account;
+    }
+
+    public void setAccount(String account) {
+        this.account = account;
+    }
+
+    public String getPwd() {
+        return pwd;
+    }
+
+    public void setPwd(String pwd) {
+        this.pwd = pwd;
+    }
+
+
+
+}
Index: app/src/main/java/com/guansu/management/ui/accont/AccountPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/ui/accont/AccountPresenter.java	(date 1577253196832)
+++ app/src/main/java/com/guansu/management/ui/accont/AccountPresenter.java	(date 1577253196832)
@@ -0,0 +1,186 @@
+package com.guansu.management.ui.accont;//package com.wisdom.regulatory.ui.welcome;
+
+import android.content.Context;
+import android.text.TextUtils;
+
+import com.guansu.management.api.MyObserve;
+import com.guansu.management.base.BaseCommonPresenter;
+import com.guansu.management.bean.UserInfo;
+import com.guansu.management.common.UserSharedPreferencesUtils;
+import com.guansu.management.model.AccountModelIml;
+import com.guansu.management.model.bean.LoginResult;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class AccountPresenter extends BaseCommonPresenter<AccountContract.LoginInterface> implements AccountContract.Presenter {
+
+    public AccountPresenter(AccountContract.LoginInterface view) {
+        super(view);
+    }
+
+    @Override
+    public void login(final Context context, final String account, final String pwd) {
+        if (TextUtils.isEmpty(account)) {
+            return;
+        }
+        if (TextUtils.isEmpty(pwd)) {
+            return;
+        }
+        view.showLoadingDialog("登录中……");
+        new AccountModelIml().login(account,pwd).subscribe(new MyObserve<UserInfo>(view) {
+            @Override
+            protected void onSuccess(UserInfo userInfo) {
+                UserSharedPreferencesUtils userSharedPreferencesUtils = new UserSharedPreferencesUtils(context);
+                userSharedPreferencesUtils.setAccount(account);
+                userSharedPreferencesUtils.setPwd(pwd);
+                userSharedPreferencesUtils.setUserid(userInfo.getUserId());
+                userSharedPreferencesUtils.saveSharedPreferences();
+                view.loginSuccessed();
+            }
+        });
+    }
+
+    @Override
+    public void getVerify(String account) {
+        if (TextUtils.isEmpty(account)) {
+            return;
+        }
+        new AccountModelIml().getVerify(account).subscribe(new MyObserve<LoginResult>(view) {
+            @Override
+            protected void onSuccess(LoginResult list) {
+                view.showToast("验证码已发送");
+            }
+        });
+    }
+
+    @Override
+    public void findPWD(String account, String verify, String pwd) {
+
+    }
+
+    @Override
+    public void updatePWD(String user, String pass, String newpassone) {
+
+    }
+
+    @Override
+    public void Eixt() {
+
+    }
+
+   /* @Override
+    public void getVerify(String account) {
+
+    }
+
+    @Override
+    public void findPWD(String account, String verify, String pwd) {
+    }
+    @Override
+    public void updatePWD(String user,String pass, String newpassone){
+        new AccountModelIml().getUpdate(user,pass,newpassone).subscribe(new MyObserve<CommonResponse>(view) {
+            @Override
+            protected void onSuccess(CommonResponse v) {
+                view.loginSuccessed();
+            }
+        });
+    }
+    @Override
+    public void Eixt() {
+        new AccountModelIml().getExit().safeSubscribe(new MyObserve<CommonResponse>(view) {
+            @Override
+            protected void onSuccess(CommonResponse o) {
+                view.loginSuccessed();
+            }
+        });
+    }*/
+    //    private StartModelimp mStartModelimp;
+//    private CountDownTimer countDownTimer;
+//
+//    public AccountPresenter(WelcomeContract.WelcomeInterface view, int time) {
+//        super(view);
+//        mStartModelimp = new StartModelimp();
+//        countDownTimer = new TimeCount(time, 1000);
+//        countDownTimer.start();
+//    }
+//
+//
+//    @Override
+//    public void getAdMessage() {
+//        mStartModelimp.getLaucherMessage().subscribe(new MyObserve<LaucherEntity>(view) {
+//            @Override
+//            protected void onSuccess(LaucherEntity laucherEntity) {
+//                if (laucherEntity.getAd() != null) {
+//                    downloadAdPic(laucherEntity.getAd().getImage());
+//                }
+//                view.saveAD(laucherEntity);
+//
+//            }
+//        });
+//    }
+//
+//    //先进行缓存，然后下次加载出来
+//    private void downloadAdPic(String url) {
+//        GlideApp.with(YiXianTongApplication.getInstance()).download(url);
+//    }
+//
+//    @Override
+//    public boolean validateFirst(int version_code) {
+//        int localVersion = Tools.getVersionCode();
+//        // 判断当前版本号不一致则显示引导页
+//        if (version_code != localVersion) {
+//            Observable.timer(1, TimeUnit.SECONDS).subscribe(new MyObserve<Long>(view) {
+//                @Override
+//                protected void onSuccess(Long aLong) {
+//                    view.toGuide();
+//                }
+//            });
+//
+////            new Handler().postDelayed(new Runnable() {
+////                @Override
+////                public void run() {
+////                    view.toGuide();
+////                }
+////            }, 1000);
+//            countDownTimer.cancel();
+//        }
+//        return version_code != localVersion;
+//    }
+//
+//
+//    class TimeCount extends CountDownTimer {
+//
+//        /**
+//         * @param millisInFuture    The number of millis in the future from the call
+//         *                          to {@link #start()} until the countdown is done and {@link #onFinish()}
+//         *                          is called.
+//         * @param countDownInterval The interval along the way to receive
+//         *                          {@link #onTick(long)} callbacks.
+//         */
+//        public TimeCount(long millisInFuture, long countDownInterval) {
+//            super(millisInFuture, countDownInterval);
+//        }
+//
+//        @Override
+//        public void onFinish() {
+//            if (view.isLogin()) {
+//                view.toHome();
+//            } else {
+//                view.toLogin(null);
+//            }
+//        }
+//
+//        @Override
+//        public void onTick(long millisUntilFinished) {
+//        }
+//
+//    }
+//
+//    @Override
+//    public void unsubscribe() {
+//        countDownTimer.cancel();
+//        super.unsubscribe();
+//    }
+}
Index: app/src/main/java/com/guansu/management/config/HttpConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/config/HttpConstants.java	(date 1576647726434)
+++ app/src/main/java/com/guansu/management/config/HttpConstants.java	(date 1576647726434)
@@ -0,0 +1,22 @@
+package com.guansu.management.config;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+
+public class HttpConstants {
+    private static final String DEV_URL = "http://192.168.0.103:18080";
+    public static final String BASE_URL = DEV_URL;
+    public static final String SUCCESS_CODE = "0000000";
+    public static final String SESSION_TIMEOUT = "010000";
+    public static final String NO_DATA = "020000";
+    public static final String ERROR_SYSTEM = "030100";
+    public static final String WARNING_MESSAGE_MIN = "040100";
+    public static final String WARNING_MESSAGE_MAX = "040999";
+    public static final String BUSSINESS_CODE_MIN= "050100";
+    public static final String BUSSINESS_CODE_MAX= "050999";
+    public static final String BUSSINESS_CODE_TOKEN= "401";
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/wigdet/EncodingUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/EncodingUtils.java	(date 1575623370918)
+++ app/src/main/java/com/guansu/management/wigdet/EncodingUtils.java	(date 1575623370918)
@@ -0,0 +1,96 @@
+package com.guansu.management.wigdet;
+
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+
+import com.google.zxing.BarcodeFormat;
+import com.google.zxing.EncodeHintType;
+import com.google.zxing.WriterException;
+import com.google.zxing.common.BitMatrix;
+import com.google.zxing.qrcode.QRCodeWriter;
+import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @author: dongyaoyao
+ */
+public class EncodingUtils {
+    public static Bitmap createQRCode(String content, int widthPix, int heightPix, Bitmap logoBm) {
+        try {
+            if (content == null || "".equals(content)) {
+                return null;
+            }
+            // 配置参数
+            Map<EncodeHintType, Object> hints = new HashMap<EncodeHintType, Object>();
+            hints.put(EncodeHintType.CHARACTER_SET, "utf-8");
+            // 容错级别
+            hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
+            // 图像数据转换，使用了矩阵转换
+            BitMatrix bitMatrix = new QRCodeWriter().encode(content, BarcodeFormat.QR_CODE, widthPix,
+                    heightPix, hints);
+            int[] pixels = new int[widthPix * heightPix];
+            // 下面这里按照二维码的算法，逐个生成二维码的图片，
+            // 两个for循环是图片横列扫描的结果
+            for (int y = 0; y < heightPix; y++) {
+                for (int x = 0; x < widthPix; x++) {
+                    if (bitMatrix.get(x, y)) {
+                        pixels[y * widthPix + x] = 0xff000000;
+                    } else {
+                        pixels[y * widthPix + x] = 0xffffffff;
+                    }
+                }
+            }
+            // 生成二维码图片的格式，使用ARGB_8888
+            Bitmap bitmap = Bitmap.createBitmap(widthPix, heightPix, Bitmap.Config.ARGB_8888);
+            bitmap.setPixels(pixels, 0, widthPix, 0, 0, widthPix, heightPix);
+            if (logoBm != null) {
+                bitmap = addLogo(bitmap, logoBm);
+            }
+            //必须使用compress方法将bitmap保存到文件中再进行读取。直接返回的bitmap是没有任何压缩的，内存消耗巨大！
+            return bitmap;
+        } catch (WriterException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    /**
+     * 在二维码中间添加Logo图案
+     */
+    private static Bitmap addLogo(Bitmap src, Bitmap logo) {
+        if (src == null) {
+            return null;
+        }
+        if (logo == null) {
+            return src;
+        }
+        //获取图片的宽高
+        int srcWidth = src.getWidth();
+        int srcHeight = src.getHeight();
+        int logoWidth = logo.getWidth();
+        int logoHeight = logo.getHeight();
+        if (srcWidth == 0 || srcHeight == 0) {
+            return null;
+        }
+        if (logoWidth == 0 || logoHeight == 0) {
+            return src;
+        }
+        //logo大小为二维码整体大小的1/5
+        float scaleFactor = srcWidth * 1.0f / 5 / logoWidth;
+        Bitmap bitmap = Bitmap.createBitmap(srcWidth, srcHeight, Bitmap.Config.ARGB_8888);
+        try {
+            Canvas canvas = new Canvas(bitmap);
+            canvas.drawBitmap(src, 0, 0, null);
+            canvas.scale(scaleFactor, scaleFactor, srcWidth / 2, srcHeight / 2);
+            canvas.drawBitmap(logo, (srcWidth - logoWidth) / 2, (srcHeight - logoHeight) / 2, null);
+//            canvas.save(Canvas.ALL_SAVE_FLAG);
+            canvas.restore();
+        } catch (Exception e) {
+            bitmap = null;
+            e.getStackTrace();
+        }
+        return bitmap;
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/banner/ViewPagerScroller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/banner/ViewPagerScroller.java	(date 1575452423772)
+++ app/src/main/java/com/guansu/management/wigdet/banner/ViewPagerScroller.java	(date 1575452423772)
@@ -0,0 +1,52 @@
+package com.guansu.management.wigdet.banner;
+
+import android.content.Context;
+import android.view.animation.Interpolator;
+import android.widget.Scroller;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class ViewPagerScroller extends Scroller {
+	private int mScrollDuration = 800;// 滑动速度,值越大滑动越慢，滑动太快会使3d效果不明显
+	private boolean zero;
+
+	public ViewPagerScroller(Context context) {
+		super(context);
+	}
+
+	public ViewPagerScroller(Context context, Interpolator interpolator) {
+		super(context, interpolator);
+	}
+
+	public ViewPagerScroller(Context context, Interpolator interpolator,
+                             boolean flywheel) {
+		super(context, interpolator, flywheel);
+	}
+
+	@Override
+	public void startScroll(int startX, int startY, int dx, int dy, int duration) {
+		super.startScroll(startX, startY, dx, dy, zero ? 0 : mScrollDuration);
+	}
+
+	@Override
+	public void startScroll(int startX, int startY, int dx, int dy) {
+		super.startScroll(startX, startY, dx, dy, zero ? 0 : mScrollDuration);
+	}
+
+	public int getScrollDuration() {
+		return mScrollDuration;
+	}
+
+	public void setScrollDuration(int scrollDuration) {
+		this.mScrollDuration = scrollDuration;
+	}
+
+	public boolean isZero() {
+		return zero;
+	}
+
+	public void setZero(boolean zero) {
+		this.zero = zero;
+	}
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/wigdet/banner/view/CBLoopViewPager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/banner/view/CBLoopViewPager.java	(date 1575452424684)
+++ app/src/main/java/com/guansu/management/wigdet/banner/view/CBLoopViewPager.java	(date 1575452424684)
@@ -0,0 +1,169 @@
+package com.guansu.management.wigdet.banner.view;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+
+import androidx.viewpager.widget.PagerAdapter;
+import androidx.viewpager.widget.ViewPager;
+
+import com.guansu.management.wigdet.banner.adapter.CBPageAdapter;
+import com.guansu.management.wigdet.banner.listener.OnItemClickListener;
+
+
+public class CBLoopViewPager extends ViewPager {
+    OnPageChangeListener mOuterPageChangeListener;
+    private OnItemClickListener onItemClickListener;
+    private CBPageAdapter mAdapter;
+
+    private boolean isCanScroll = true;
+    private boolean canLoop = false;
+
+    public void setAdapter(PagerAdapter adapter, boolean canLoop) {
+        mAdapter = (CBPageAdapter) adapter;
+        mAdapter.setCanLoop(canLoop);
+        mAdapter.setViewPager(this);
+        super.setAdapter(mAdapter);
+
+        setCurrentItem(getFristItem(), false);
+    }
+
+    public int getFristItem() {
+        return canLoop ? mAdapter.getRealCount() : 0;
+    }
+
+    public int getLastItem() {
+        return mAdapter.getRealCount() - 1;
+    }
+
+    public boolean isCanScroll() {
+        return isCanScroll;
+    }
+
+    public void setCanScroll(boolean isCanScroll) {
+        this.isCanScroll = isCanScroll;
+    }
+
+    private float oldX = 0, newX = 0;
+    private static final float sens = 5;
+
+    @Override
+    public boolean onTouchEvent(MotionEvent ev) {
+        if (isCanScroll) {
+            if (onItemClickListener != null) {
+                switch (ev.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                        oldX = ev.getX();
+                        break;
+
+                    case MotionEvent.ACTION_UP:
+                        newX = ev.getX();
+                        if (Math.abs(oldX - newX) < sens) {
+                            onItemClickListener.onItemClick((getRealItem()));
+                        }
+                        oldX = 0;
+                        newX = 0;
+                        break;
+                }
+            }
+            return super.onTouchEvent(ev);
+        } else
+            return false;
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(MotionEvent ev) {
+        if (isCanScroll)
+            return super.onInterceptTouchEvent(ev);
+        else
+            return false;
+    }
+
+    public CBPageAdapter getAdapter() {
+        return mAdapter;
+    }
+
+    public int getRealItem() {
+        return mAdapter != null ? mAdapter.toRealPosition(super.getCurrentItem()) : 0;
+    }
+
+    @Override
+    public void setOnPageChangeListener(OnPageChangeListener listener) {
+        mOuterPageChangeListener = listener;
+    }
+
+
+    public CBLoopViewPager(Context context) {
+        super(context);
+        init();
+    }
+
+    public CBLoopViewPager(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    private void init() {
+        super.setOnPageChangeListener(onPageChangeListener);
+    }
+
+    private OnPageChangeListener onPageChangeListener = new OnPageChangeListener() {
+        private float mPreviousPosition = -1;
+
+        @Override
+        public void onPageSelected(int position) {
+            int realPosition = mAdapter.toRealPosition(position);
+            if (mPreviousPosition != realPosition) {
+                mPreviousPosition = realPosition;
+                if (mOuterPageChangeListener != null) {
+                    mOuterPageChangeListener.onPageSelected(realPosition);
+                }
+            }
+        }
+
+        @Override
+        public void onPageScrolled(int position, float positionOffset,
+                                   int positionOffsetPixels) {
+            int realPosition = position;
+
+            if (mOuterPageChangeListener != null) {
+                if (realPosition != mAdapter.getRealCount() - 1) {
+                    mOuterPageChangeListener.onPageScrolled(realPosition,
+                            positionOffset, positionOffsetPixels);
+                } else {
+                    if (positionOffset > .5) {
+                        mOuterPageChangeListener.onPageScrolled(0, 0, 0);
+                    } else {
+                        mOuterPageChangeListener.onPageScrolled(realPosition,
+                                0, 0);
+                    }
+                }
+            }
+        }
+
+        @Override
+        public void onPageScrollStateChanged(int state) {
+            if (mOuterPageChangeListener != null) {
+                mOuterPageChangeListener.onPageScrollStateChanged(state);
+            }
+        }
+    };
+
+    public boolean isCanLoop() {
+        return canLoop;
+    }
+
+    public void setCanLoop(boolean canLoop) {
+        this.canLoop = canLoop;
+        if (canLoop == false) {
+            setCurrentItem(getRealItem(), false);
+        }
+        if (mAdapter == null) return;
+        mAdapter.setCanLoop(canLoop);
+        mAdapter.notifyDataSetChanged();
+    }
+
+    public void setOnItemClickListener(OnItemClickListener onItemClickListener) {
+        this.onItemClickListener = onItemClickListener;
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/banner/ConvenientBanner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/banner/ConvenientBanner.java	(date 1575452423055)
+++ app/src/main/java/com/guansu/management/wigdet/banner/ConvenientBanner.java	(date 1575452423055)
@@ -0,0 +1,338 @@
+package com.guansu.management.wigdet.banner;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+
+import androidx.viewpager.widget.ViewPager;
+
+
+import com.guansu.management.R;
+import com.guansu.management.wigdet.banner.adapter.CBPageAdapter;
+import com.guansu.management.wigdet.banner.holder.CBViewHolderCreator;
+import com.guansu.management.wigdet.banner.listener.CBPageChangeListener;
+import com.guansu.management.wigdet.banner.listener.OnItemClickListener;
+import com.guansu.management.wigdet.banner.view.CBLoopViewPager;
+
+import java.lang.ref.WeakReference;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * 页面翻转控件，极方便的广告栏
+ * 支持无限循环，自动翻页，翻页特效
+ */
+public class ConvenientBanner<T> extends LinearLayout {
+    private List<T> mDatas;
+    private int[] page_indicatorId;
+    private ArrayList<ImageView> mPointViews = new ArrayList<ImageView>();
+    private CBPageChangeListener pageChangeListener;
+    private ViewPager.OnPageChangeListener onPageChangeListener;
+    private CBPageAdapter pageAdapter;
+    private CBLoopViewPager viewPager;
+    private ViewPagerScroller scroller;
+    private ViewGroup loPageTurningPoint;
+    private long autoTurningTime;
+    private boolean turning;
+    private boolean canTurn = false;
+    private boolean manualPageable = true;
+    private boolean canLoop = false;
+    public enum PageIndicatorAlign{
+        ALIGN_PARENT_LEFT,ALIGN_PARENT_RIGHT,CENTER_HORIZONTAL
+    }
+    private AdSwitchTask adSwitchTask ;
+
+    public ConvenientBanner(Context context) {
+        super(context);
+        init(context);
+    }
+
+    public ConvenientBanner(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context);
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    public ConvenientBanner(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init(context);
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    public ConvenientBanner(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init(context);
+    }
+
+    private void init(Context context) {
+        View hView = LayoutInflater.from(context).inflate(
+                R.layout.include_viewpager, this, true);
+        viewPager = (CBLoopViewPager) hView.findViewById(R.id.cbLoopViewPager);
+        loPageTurningPoint = (ViewGroup) hView
+                .findViewById(R.id.loPageTurningPoint);
+        initViewPagerScroll();
+
+        adSwitchTask = new AdSwitchTask(this);
+    }
+
+    static class AdSwitchTask implements Runnable {
+
+        private final WeakReference<ConvenientBanner> reference;
+
+        AdSwitchTask(ConvenientBanner convenientBanner) {
+            this.reference = new WeakReference<ConvenientBanner>(convenientBanner);
+        }
+
+        @Override
+        public void run() {
+            ConvenientBanner convenientBanner = reference.get();
+
+            if(convenientBanner != null){
+                if (convenientBanner.viewPager != null && convenientBanner.turning) {
+                    int page = convenientBanner.viewPager.getCurrentItem() + 1;
+                    convenientBanner.viewPager.setCurrentItem(page);
+                    convenientBanner.postDelayed(convenientBanner.adSwitchTask, convenientBanner.autoTurningTime);
+                }
+            }
+        }
+    }
+
+    public ConvenientBanner setPages(CBViewHolderCreator holderCreator, List<T> datas){
+        this.mDatas = datas;
+        pageAdapter = new CBPageAdapter(holderCreator,mDatas);
+        viewPager.setAdapter(pageAdapter,canLoop);
+
+        if (page_indicatorId != null)
+            setPageIndicator(page_indicatorId);
+        return this;
+    }
+
+    /**
+     * 通知数据变化
+     * 如果只是增加数据建议使用 notifyDataSetAdd()
+     */
+    public void notifyDataSetChanged(){
+        viewPager.getAdapter().notifyDataSetChanged();
+        if (page_indicatorId != null)
+            setPageIndicator(page_indicatorId);
+    }
+
+    /**
+     * 设置底部指示器是否可见
+     *
+     * @param visible
+     */
+    public ConvenientBanner setPointViewVisible(boolean visible) {
+        loPageTurningPoint.setVisibility(visible ? View.VISIBLE : View.GONE);
+        return this;
+    }
+
+    /**
+     * 底部指示器资源图片
+     *
+     * @param page_indicatorId
+     */
+    public ConvenientBanner setPageIndicator(int[] page_indicatorId) {
+        loPageTurningPoint.removeAllViews();
+        mPointViews.clear();
+        this.page_indicatorId = page_indicatorId;
+        if(mDatas==null)return this;
+        for (int count = 0; count < mDatas.size(); count++) {
+            // 翻页指示的点
+            ImageView pointView = new ImageView(getContext());
+            pointView.setPadding(5, 0, 5, 0);
+            if (mPointViews.isEmpty())
+                pointView.setImageResource(page_indicatorId[1]);
+            else
+                pointView.setImageResource(page_indicatorId[0]);
+            mPointViews.add(pointView);
+            loPageTurningPoint.addView(pointView);
+        }
+        pageChangeListener = new CBPageChangeListener(mPointViews,
+                page_indicatorId);
+        viewPager.setOnPageChangeListener(pageChangeListener);
+        pageChangeListener.onPageSelected(viewPager.getRealItem());
+        if(onPageChangeListener != null)pageChangeListener.setOnPageChangeListener(onPageChangeListener);
+
+        return this;
+    }
+
+    /**
+     * 指示器的方向
+     * @param align  三个方向：居左 （RelativeLayout.ALIGN_PARENT_LEFT），居中 （RelativeLayout.CENTER_HORIZONTAL），居右 （RelativeLayout.ALIGN_PARENT_RIGHT）
+     * @return
+     */
+    public ConvenientBanner setPageIndicatorAlign(PageIndicatorAlign align) {
+        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) loPageTurningPoint.getLayoutParams();
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT, align == PageIndicatorAlign.ALIGN_PARENT_LEFT ? RelativeLayout.TRUE : 0);
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT, align == PageIndicatorAlign.ALIGN_PARENT_RIGHT ? RelativeLayout.TRUE : 0);
+        layoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL, align == PageIndicatorAlign.CENTER_HORIZONTAL ? RelativeLayout.TRUE : 0);
+        loPageTurningPoint.setLayoutParams(layoutParams);
+        return this;
+    }
+
+    /***
+     * 是否开启了翻页
+     * @return
+     */
+    public boolean isTurning() {
+        return turning;
+    }
+
+    /***
+     * 开始翻页
+     * @param autoTurningTime 自动翻页时间
+     * @return
+     */
+    public ConvenientBanner startTurning(long autoTurningTime) {
+        //如果是正在翻页的话先停掉
+        if(turning){
+            stopTurning();
+        }
+        //设置可以翻页并开启翻页
+        canTurn = true;
+        this.autoTurningTime = autoTurningTime;
+        turning = true;
+        postDelayed(adSwitchTask, autoTurningTime);
+        return this;
+    }
+
+    public void stopTurning() {
+        turning = false;
+        removeCallbacks(adSwitchTask);
+    }
+
+    /**
+     * 自定义翻页动画效果
+     *
+     * @param transformer
+     * @return
+     */
+    public ConvenientBanner setPageTransformer(ViewPager.PageTransformer transformer) {
+        viewPager.setPageTransformer(true, transformer);
+        return this;
+    }
+
+
+    /**
+     * 设置ViewPager的滑动速度
+     * */
+    private void initViewPagerScroll() {
+        try {
+            Field mScroller = null;
+            mScroller = ViewPager.class.getDeclaredField("mScroller");
+            mScroller.setAccessible(true);
+            scroller = new ViewPagerScroller(
+                    viewPager.getContext());
+            mScroller.set(viewPager, scroller);
+
+        } catch (NoSuchFieldException e) {
+            e.printStackTrace();
+        } catch (IllegalArgumentException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public boolean isManualPageable() {
+        return viewPager.isCanScroll();
+    }
+
+    public void setManualPageable(boolean manualPageable) {
+        viewPager.setCanScroll(manualPageable);
+    }
+
+    //触碰控件的时候，翻页应该停止，离开的时候如果之前是开启了翻页的话则重新启动翻页
+    @Override
+    public boolean dispatchTouchEvent(MotionEvent ev) {
+
+        int action = ev.getAction();
+        if (action == MotionEvent.ACTION_UP||action == MotionEvent.ACTION_CANCEL||action == MotionEvent.ACTION_OUTSIDE) {
+            // 开始翻页
+            if (canTurn)startTurning(autoTurningTime);
+        } else if (action == MotionEvent.ACTION_DOWN) {
+            // 停止翻页
+            if (canTurn)stopTurning();
+        }
+        return super.dispatchTouchEvent(ev);
+    }
+
+    //获取当前的页面index
+    public int getCurrentItem(){
+        if (viewPager!=null) {
+            return viewPager.getRealItem();
+        }
+        return -1;
+    }
+    //设置当前的页面index
+    public void setcurrentitem(int index){
+        if (viewPager!=null) {
+            viewPager.setCurrentItem(index);
+        }
+    }
+
+    public ViewPager.OnPageChangeListener getOnPageChangeListener() {
+        return onPageChangeListener;
+    }
+
+    /**
+     * 设置翻页监听器
+     * @param onPageChangeListener
+     * @return
+     */
+    public ConvenientBanner setOnPageChangeListener(ViewPager.OnPageChangeListener onPageChangeListener) {
+        this.onPageChangeListener = onPageChangeListener;
+        //如果有默认的监听器（即是使用了默认的翻页指示器）则把用户设置的依附到默认的上面，否则就直接设置
+        if(pageChangeListener != null)pageChangeListener.setOnPageChangeListener(onPageChangeListener);
+        else viewPager.setOnPageChangeListener(onPageChangeListener);
+        return this;
+    }
+
+    public boolean isCanLoop() {
+        return viewPager.isCanLoop();
+    }
+
+    /**
+     * 监听item点击
+     * @param onItemClickListener
+     */
+    public ConvenientBanner setOnItemClickListener(OnItemClickListener onItemClickListener) {
+        if (onItemClickListener == null) {
+            viewPager.setOnItemClickListener(null);
+            return this;
+        }
+        viewPager.setOnItemClickListener(onItemClickListener);
+        return this;
+    }
+
+    /**
+     * 设置ViewPager的滚动速度
+     * @param scrollDuration
+     */
+    public void setScrollDuration(int scrollDuration){
+        scroller.setScrollDuration(scrollDuration);
+    }
+
+    public int getScrollDuration() {
+        return scroller.getScrollDuration();
+    }
+
+    public CBLoopViewPager getViewPager() {
+        return viewPager;
+    }
+
+    public void setCanLoop(boolean canLoop) {
+        this.canLoop = canLoop;
+        viewPager.setCanLoop(canLoop);
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/banner/adapter/CBPageAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/banner/adapter/CBPageAdapter.java	(date 1575452425008)
+++ app/src/main/java/com/guansu/management/wigdet/banner/adapter/CBPageAdapter.java	(date 1575452425008)
@@ -0,0 +1,106 @@
+package com.guansu.management.wigdet.banner.adapter;
+
+import android.view.View;
+import android.view.ViewGroup;
+
+import androidx.viewpager.widget.PagerAdapter;
+
+import com.guansu.management.R;
+import com.guansu.management.wigdet.banner.holder.CBViewHolderCreator;
+import com.guansu.management.wigdet.banner.holder.Holder;
+import com.guansu.management.wigdet.banner.view.CBLoopViewPager;
+
+import java.util.List;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class CBPageAdapter<T> extends PagerAdapter {
+    protected List<T> mDatas;
+    protected CBViewHolderCreator holderCreator;
+//    private View.OnClickListener onItemClickListener;
+    private boolean canLoop = false;
+    private CBLoopViewPager viewPager;
+    private final int MULTIPLE_COUNT = 300;
+
+    public int toRealPosition(int position) {
+        int realCount = getRealCount();
+        if (realCount == 0)
+            return 0;
+        int realPosition = position % realCount;
+        return realPosition;
+    }
+
+    @Override
+    public int getCount() {
+        return canLoop ? getRealCount()*MULTIPLE_COUNT : getRealCount();
+    }
+
+    public int getRealCount() {
+        return mDatas == null ? 0 : mDatas.size();
+    }
+
+    @Override
+    public Object instantiateItem(ViewGroup container, int position) {
+        int realPosition = toRealPosition(position);
+        View view = getView(realPosition, null, container);
+//        if(onItemClickListener != null) view.setOnClickListener(onItemClickListener);
+        container.addView(view);
+        return view;
+    }
+
+    @Override
+    public void destroyItem(ViewGroup container, int position, Object object) {
+        View view = (View) object;
+        container.removeView(view);
+    }
+
+    @Override
+    public void finishUpdate(ViewGroup container) {
+        int position = viewPager.getCurrentItem();
+        if (position == 0) {
+            position = viewPager.getFristItem();
+        } else if (position == getCount() - 1) {
+            position = viewPager.getLastItem();
+        }
+        try {
+            viewPager.setCurrentItem(position, false);
+        }catch (IllegalStateException e){}
+    }
+
+    @Override
+    public boolean isViewFromObject(View view, Object object) {
+        return view == object;
+    }
+
+    public void setCanLoop(boolean canLoop) {
+        this.canLoop = canLoop;
+    }
+
+    public void setViewPager(CBLoopViewPager viewPager) {
+        this.viewPager = viewPager;
+    }
+
+    public CBPageAdapter(CBViewHolderCreator holderCreator, List<T> datas) {
+        this.holderCreator = holderCreator;
+        this.mDatas = datas;
+    }
+
+    public View getView(int position, View view, ViewGroup container) {
+        Holder holder = null;
+        if (view == null) {
+            holder = (Holder) holderCreator.createHolder();
+            view = holder.createView(container.getContext());
+            view.setTag(R.id.cb_item_tag, holder);
+        } else {
+            holder = (Holder<T>) view.getTag(R.id.cb_item_tag);
+        }
+        if (mDatas != null && !mDatas.isEmpty())
+            holder.UpdateUI(container.getContext(), position, mDatas.get(position));
+        return view;
+    }
+
+//    public void setOnItemClickListener(View.OnClickListener onItemClickListener) {
+//        this.onItemClickListener = onItemClickListener;
+//    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/banner/listener/CBPageChangeListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/banner/listener/CBPageChangeListener.java	(date 1575452424092)
+++ app/src/main/java/com/guansu/management/wigdet/banner/listener/CBPageChangeListener.java	(date 1575452424092)
@@ -0,0 +1,45 @@
+package com.guansu.management.wigdet.banner.listener;
+
+import android.widget.ImageView;
+
+import androidx.viewpager.widget.ViewPager;
+
+import java.util.ArrayList;
+
+/**
+ * 翻页指示器适配器
+ */
+public class CBPageChangeListener implements ViewPager.OnPageChangeListener {
+    private ArrayList<ImageView> pointViews;
+    private int[] page_indicatorId;
+    private ViewPager.OnPageChangeListener onPageChangeListener;
+    public CBPageChangeListener(ArrayList<ImageView> pointViews, int page_indicatorId[]){
+        this.pointViews=pointViews;
+        this.page_indicatorId = page_indicatorId;
+    }
+    @Override
+    public void onPageScrollStateChanged(int state) {
+        if(onPageChangeListener != null)onPageChangeListener.onPageScrollStateChanged(state);
+    }
+
+    @Override
+    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+        if(onPageChangeListener != null)onPageChangeListener.onPageScrolled(position,positionOffset,positionOffsetPixels);
+    }
+
+    @Override
+    public void onPageSelected(int index) {
+        for (int i = 0; i < pointViews.size(); i++) {
+            pointViews.get(index).setImageResource(page_indicatorId[1]);
+            if (index != i) {
+                pointViews.get(i).setImageResource(page_indicatorId[0]);
+            }
+        }
+        if(onPageChangeListener != null)onPageChangeListener.onPageSelected(index);
+
+    }
+
+    public void setOnPageChangeListener(ViewPager.OnPageChangeListener onPageChangeListener) {
+        this.onPageChangeListener = onPageChangeListener;
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/banner/holder/Holder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/banner/holder/Holder.java	(date 1575452423303)
+++ app/src/main/java/com/guansu/management/wigdet/banner/holder/Holder.java	(date 1575452423303)
@@ -0,0 +1,12 @@
+package com.guansu.management.wigdet.banner.holder;
+
+import android.content.Context;
+import android.view.View;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public interface Holder<T>{
+    View createView(Context context);
+    void UpdateUI(Context context, int position, T data);
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/wigdet/banner/holder/CBViewHolderCreator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/banner/holder/CBViewHolderCreator.java	(date 1575452424651)
+++ app/src/main/java/com/guansu/management/wigdet/banner/holder/CBViewHolderCreator.java	(date 1575452424651)
@@ -0,0 +1,8 @@
+package com.guansu.management.wigdet.banner.holder;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public interface CBViewHolderCreator<Holder> {
+	public Holder createHolder();
+}
Index: app/src/main/java/com/guansu/management/wigdet/dialog/BaseDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/dialog/BaseDialog.java	(date 1575522989930)
+++ app/src/main/java/com/guansu/management/wigdet/dialog/BaseDialog.java	(date 1575522989930)
@@ -0,0 +1,795 @@
+package com.guansu.management.wigdet.dialog;
+
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.res.Resources;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.SystemClock;
+import android.util.SparseArray;
+import android.util.SparseIntArray;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import androidx.annotation.ColorRes;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.IdRes;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.StringRes;
+import androidx.annotation.StyleRes;
+import androidx.appcompat.app.AppCompatDialog;
+
+
+import com.guansu.management.R;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+public class BaseDialog extends AppCompatDialog implements
+        DialogInterface.OnShowListener,
+        DialogInterface.OnCancelListener,
+        DialogInterface.OnDismissListener {
+
+    private static final Handler HANDLER = new Handler(Looper.getMainLooper());
+
+    private List<OnShowListener> mOnShowListeners;
+    private List<OnCancelListener> mOnCancelListeners;
+    private List<OnDismissListener> mOnDismissListeners;
+
+    public BaseDialog(Context context) {
+        this(context, R.style.BaseDialogStyle);
+    }
+
+    public BaseDialog(Context context, int themeResId) {
+        super(context, themeResId > 0 ? themeResId : R.style.BaseDialogStyle);
+    }
+
+    /**
+     * 设置一个显示监听器
+     *
+     * @param listener       监听器对象
+     * @deprecated          请使用 {@link #addOnShowListener(BaseDialog.OnShowListener)}}
+     */
+    @Deprecated
+    @Override
+    public void setOnShowListener(@Nullable DialogInterface.OnShowListener listener) {
+        addOnShowListener(new ShowListenerWrapper(listener));
+    }
+
+    /**
+     * 设置一个取消监听器
+     *
+     * @param listener       监听器对象
+     * @deprecated          请使用 {@link #addOnCancelListener(BaseDialog.OnCancelListener)}
+     */
+    @Deprecated
+    @Override
+    public void setOnCancelListener(@Nullable DialogInterface.OnCancelListener listener) {
+        addOnCancelListener(new CancelListenerWrapper(listener));
+    }
+
+    /**
+     * 设置一个销毁监听器
+     *
+     * @param listener       监听器对象
+     * @deprecated          请使用 {@link #addOnDismissListener(BaseDialog.OnDismissListener)}
+     */
+    @Deprecated
+    @Override
+    public void setOnDismissListener(@Nullable DialogInterface.OnDismissListener listener) {
+        addOnDismissListener(new DismissListenerWrapper(listener));
+    }
+
+    /**
+     * 添加一个取消监听器
+     *
+     * @param listener      监听器对象
+     */
+    public void addOnShowListener(@Nullable BaseDialog.OnShowListener listener) {
+        if (mOnShowListeners == null) {
+            mOnShowListeners = new ArrayList<>();
+            super.setOnShowListener(this);
+        }
+        mOnShowListeners.add(listener);
+    }
+
+    /**
+     * 添加一个取消监听器
+     *
+     * @param listener      监听器对象
+     */
+    public void addOnCancelListener(@Nullable BaseDialog.OnCancelListener listener) {
+        if (mOnCancelListeners == null) {
+            mOnCancelListeners = new ArrayList<>();
+            super.setOnCancelListener(this);
+        }
+        mOnCancelListeners.add(listener);
+    }
+
+    /**
+     * 添加一个销毁监听器
+     *
+     * @param listener      监听器对象
+     */
+    public void addOnDismissListener(@Nullable BaseDialog.OnDismissListener listener) {
+        if (mOnDismissListeners == null) {
+            mOnDismissListeners = new ArrayList<>();
+            super.setOnDismissListener(this);
+        }
+        mOnDismissListeners.add(listener);
+    }
+
+    /**
+     * 设置显示监听器集合
+     */
+    private void setOnShowListeners(@Nullable List<OnShowListener> listeners) {
+        super.setOnShowListener(this);
+        mOnShowListeners = listeners;
+    }
+
+    /**
+     * 设置取消监听器集合
+     */
+    private void setOnCancelListeners(@Nullable List<OnCancelListener> listeners) {
+        super.setOnCancelListener(this);
+        mOnCancelListeners = listeners;
+    }
+
+    /**
+     * 设置销毁监听器集合
+     */
+    private void setOnDismissListeners(@Nullable List<OnDismissListener> listeners) {
+        super.setOnDismissListener(this);
+        mOnDismissListeners = listeners;
+    }
+
+    /**
+     * {@link DialogInterface.OnShowListener}
+     */
+    @Override
+    public void onShow(DialogInterface dialog) {
+        if (mOnShowListeners != null) {
+            for (BaseDialog.OnShowListener listener : mOnShowListeners) {
+                listener.onShow(this);
+            }
+        }
+    }
+
+    /**
+     * {@link DialogInterface.OnCancelListener}
+     */
+    @Override
+    public void onCancel(DialogInterface dialog) {
+        if (mOnCancelListeners != null) {
+            for (BaseDialog.OnCancelListener listener : mOnCancelListeners) {
+                listener.onCancel(this);
+            }
+        }
+    }
+
+    /**
+     * {@link DialogInterface.OnDismissListener}
+     */
+    @Override
+    public void onDismiss(DialogInterface dialog) {
+
+        // 移除和这个 Dialog 相关的消息回调
+        HANDLER.removeCallbacksAndMessages(this);
+
+        if (mOnDismissListeners != null) {
+            for (BaseDialog.OnDismissListener listener : mOnDismissListeners) {
+                listener.onDismiss(this);
+            }
+        }
+    }
+
+    /**
+     * 延迟执行
+     */
+    public final boolean post(Runnable r) {
+        return postDelayed(r, 0);
+    }
+
+    /**
+     * 延迟一段时间执行
+     */
+    public final boolean postDelayed(Runnable r, long delayMillis) {
+        if (delayMillis < 0) {
+            delayMillis = 0;
+        }
+        return postAtTime(r, SystemClock.uptimeMillis() + delayMillis);
+    }
+
+    /**
+     * 在指定的时间执行
+     */
+    public final boolean postAtTime(Runnable r, long uptimeMillis) {
+        return HANDLER.postAtTime(r, this, uptimeMillis);
+    }
+
+    /**
+     * Dialog 动画样式
+     */
+    public static final class AnimStyle {
+
+        // 默认动画效果
+        static final int DEFAULT = R.style.ScaleAnimStyle;
+
+        // 缩放动画
+        public static final int SCALE = R.style.ScaleAnimStyle;
+
+        // IOS 动画
+        public static final int IOS = R.style.IOSAnimStyle;
+
+        // 吐司动画
+        public static final int TOAST = android.R.style.Animation_Toast;
+
+        // 顶部弹出动画
+        public static final int TOP = R.style.TopAnimStyle;
+
+        // 底部弹出动画
+        public static final int BOTTOM = R.style.BottomAnimStyle;
+
+        // 左边弹出动画
+        public static final int LEFT = R.style.LeftAnimStyle;
+
+        // 右边弹出动画
+        public static final int RIGHT = R.style.RightAnimStyle;
+    }
+
+    @SuppressWarnings("unchecked")
+    public static class Builder<B extends Builder> {
+
+        protected static final int MATCH_PARENT = ViewGroup.LayoutParams.MATCH_PARENT;
+        protected static final int WRAP_CONTENT = ViewGroup.LayoutParams.WRAP_CONTENT;
+
+        private BaseDialog mDialog;
+
+        // Context 对象
+        private Context mContext;
+
+        // Dialog 布局
+        private View mContentView;
+
+        // Dialog Show 监听
+        private List<OnShowListener> mOnShowListeners;
+        // Dialog Cancel 监听
+        private List<OnCancelListener> mOnCancelListeners;
+        // Dialog Dismiss 监听
+        private List<OnDismissListener> mOnDismissListeners;
+        // Dialog Key 监听
+        private DialogInterface.OnKeyListener mOnKeyListener;
+
+        // 点击空白是否能够取消  默认点击阴影可以取消
+        private boolean mCancelable = true;
+
+        private SparseArray<CharSequence> mTextArray = new SparseArray<>();
+        private SparseIntArray mVisibilityArray = new SparseIntArray();
+        private SparseArray<Drawable> mBackgroundArray = new SparseArray<>();
+        private SparseArray<Drawable> mImageArray = new SparseArray<>();
+        private SparseArray<OnClickListener> mClickArray = new SparseArray<>();
+
+        // 主题
+        private int mThemeResId = -1;
+        // 动画
+        private int mAnimations = -1;
+        // 位置
+        private int mGravity = Gravity.CENTER;
+        // 宽度和高度
+        private int mWidth = WRAP_CONTENT;
+        private int mHeight = WRAP_CONTENT;
+        // 垂直和水平边距
+        private int mVerticalMargin;
+        private int mHorizontalMargin;
+
+        public Builder(Context context) {
+            mContext = context;
+        }
+
+        /**
+         * 延迟执行，一定要在创建了Dialog之后调用（供子类调用）
+         */
+        protected final boolean post(Runnable r) {
+            return mDialog.post(r);
+        }
+
+        /**
+         * 延迟一段时间执行，一定要在创建了Dialog之后调用（仅供子类调用）
+         */
+        protected final boolean postDelayed(Runnable r, long delayMillis) {
+            return mDialog.postDelayed(r, delayMillis);
+        }
+
+        /**
+         * 在指定的时间执行，一定要在创建了Dialog之后调用（仅供子类调用）
+         */
+        protected final boolean postAtTime(Runnable r, long uptimeMillis) {
+            return mDialog.postAtTime(r, uptimeMillis);
+        }
+
+        /**
+         * 是否设置了取消（仅供子类调用）
+         */
+        protected boolean isCancelable() {
+            return mCancelable;
+        }
+
+        /**
+         * 获取上下文对象（仅供子类调用）
+         */
+        protected Context getContext() {
+            return mContext;
+        }
+
+        /**
+         * 获取 Dialog 重心（仅供子类调用）
+         */
+        protected int getGravity() {
+            return mGravity;
+        }
+
+        /**
+         * 获取资源对象（仅供子类调用）
+         */
+        protected Resources getResources() {
+            return mContext.getResources();
+        }
+
+        /**
+         * 根据 id 获取一个文本（仅供子类调用）
+         */
+        protected CharSequence getText(@StringRes int resId) {
+            return mContext.getText(resId);
+        }
+
+        /**
+         * 根据 id 获取一个 String（仅供子类调用）
+         */
+        protected String getString(@StringRes int resId) {
+            return mContext.getString(resId);
+        }
+
+        /**
+         * 根据 id 获取一个颜色（仅供子类调用）
+         */
+        protected int getColor(@ColorRes int id) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                return mContext.getColor(id);
+            }else {
+                return mContext.getResources().getColor(id);
+            }
+        }
+
+        /**
+         * 根据 id 获取一个 Drawable（仅供子类调用）
+         */
+        protected Drawable getDrawable(@DrawableRes int id) {
+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                return mContext.getDrawable(id);
+            }else {
+                return mContext.getResources().getDrawable(id);
+            }
+        }
+
+        /**
+         * 根据 id 查找 View（仅供子类调用）
+         */
+        protected <V extends View> V findViewById(@IdRes int id) {
+            return mContentView.findViewById(id);
+        }
+
+        /**
+         * 获取当前 Dialog 对象（仅供子类调用）
+         */
+        protected BaseDialog getDialog() {
+            return mDialog;
+        }
+
+        /**
+         * 销毁当前 Dialog（仅供子类调用）
+         */
+        protected void dismiss() {
+            mDialog.dismiss();
+        }
+
+        /**
+         * 设置主题 id
+         */
+        public B setThemeStyle(@StyleRes int themeResId) {
+            mThemeResId = themeResId;
+            return (B) this;
+        }
+
+        /**
+         * 设置布局
+         */
+        public B setContentView(@LayoutRes int layoutId) {
+            return setContentView(LayoutInflater.from(mContext).inflate(layoutId, null));
+        }
+        public B setContentView(@NonNull View view) {
+            mContentView = view;
+            return (B) this;
+        }
+
+        /**
+         * 设置重心位置
+         */
+        public B setGravity(int gravity) {
+            // 适配 Android 4.2 新特性，布局反方向（开发者选项 - 强制使用从右到左的布局方向）
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                gravity = Gravity.getAbsoluteGravity(gravity, mContext.getResources().getConfiguration().getLayoutDirection());
+            }
+            mGravity = gravity;
+            if (mAnimations == -1) {
+                switch (mGravity) {
+                    case Gravity.TOP:
+                        mAnimations = AnimStyle.TOP;
+                        break;
+                    case Gravity.BOTTOM:
+                        mAnimations = AnimStyle.BOTTOM;
+                        break;
+                    case Gravity.LEFT:
+                        mAnimations = AnimStyle.LEFT;
+                        break;
+                    case Gravity.RIGHT:
+                        mAnimations = AnimStyle.RIGHT;
+                        break;
+                }
+            }
+            return (B) this;
+        }
+
+        /**
+         * 设置宽度
+         */
+        public B setWidth(int width) {
+            mWidth = width;
+            return (B) this;
+        }
+
+        /**
+         * 设置高度
+         */
+        public B setHeight(int height) {
+            mHeight = height;
+            return (B) this;
+        }
+
+        /**
+         * 是否可以取消
+         */
+        public B setCancelable(boolean cancelable) {
+            mCancelable = cancelable;
+            return (B) this;
+        }
+
+        /**
+         * 设置动画，已经封装好几种样式，具体可见{@link AnimStyle}类
+         */
+        public B setAnimStyle(@StyleRes int resId) {
+            mAnimations = resId;
+            return (B) this;
+        }
+
+        /**
+         * 设置垂直间距
+         */
+        public B setVerticalMargin(int margin) {
+            mVerticalMargin = margin;
+            return (B) this;
+        }
+
+        /**
+         * 设置水平间距
+         */
+        public B setHorizontalMargin(int margin) {
+            mHorizontalMargin = margin;
+            return (B) this;
+        }
+
+        /**
+         * 添加显示监听
+         */
+        public B addOnShowListener(@NonNull BaseDialog.OnShowListener listener) {
+            if (mOnShowListeners == null) {
+                mOnShowListeners = new ArrayList<>();
+            }
+            mOnShowListeners.add(listener);
+            return (B) this;
+        }
+
+        /**
+         * 添加取消监听
+         */
+        public B addOnCancelListener(@NonNull BaseDialog.OnCancelListener listener) {
+            if (mOnCancelListeners == null) {
+                mOnCancelListeners = new ArrayList<>();
+            }
+            mOnCancelListeners.add(listener);
+            return (B) this;
+        }
+
+        /**
+         * 添加销毁监听
+         */
+        public B addOnDismissListener(@NonNull BaseDialog.OnDismissListener listener) {
+            if (mOnDismissListeners == null) {
+                mOnDismissListeners = new ArrayList<>();
+            }
+            mOnDismissListeners.add(listener);
+            return (B) this;
+        }
+
+        /**
+         * 设置按键监听
+         */
+        public B setOnKeyListener(@NonNull DialogInterface.OnKeyListener onKeyListener) {
+            mOnKeyListener = onKeyListener;
+            return (B) this;
+        }
+
+        /**
+         * 设置文本
+         */
+        public B setText(@IdRes int id, @StringRes int resId) {
+            return setText(id, mContext.getResources().getString(resId));
+        }
+        public B setText(@IdRes int id, CharSequence text) {
+            mTextArray.put(id, text);
+            return (B) this;
+        }
+
+        /**
+         * 设置可见状态
+         */
+        public B setVisibility(@IdRes int id, int visibility) {
+            mVisibilityArray.put(id, visibility);
+            return (B) this;
+        }
+
+        /**
+         * 设置背景
+         */
+        public B setBackground(@IdRes int id, @DrawableRes int resId) {
+            return setBackground(id, mContext.getResources().getDrawable(resId));
+        }
+        public B setBackground(@IdRes int id, Drawable drawable) {
+            mBackgroundArray.put(id, drawable);
+            return (B) this;
+        }
+
+        /**
+         * 设置图片
+         */
+        public B setImageDrawable(@IdRes int id, @DrawableRes int resId) {
+            return setBackground(id, mContext.getResources().getDrawable(resId));
+        }
+        public B setImageDrawable(@IdRes int id, Drawable drawable) {
+            mImageArray.put(id, drawable);
+            return (B) this;
+        }
+
+        /**
+         * 设置点击事件
+         */
+        public B setOnClickListener(@IdRes int id, @NonNull BaseDialog.OnClickListener listener) {
+            mClickArray.put(id, listener);
+            return (B) this;
+        }
+
+        /**
+         * 创建
+         */
+        public BaseDialog create() {
+
+            // 判断布局是否为空
+            if (mContentView == null) {
+                throw new IllegalArgumentException("Dialog layout cannot be empty");
+            }
+
+            ViewGroup.LayoutParams layoutParams = mContentView.getLayoutParams();
+            if (layoutParams != null) {
+
+                if (mWidth == ViewGroup.LayoutParams.WRAP_CONTENT) {
+                    mWidth = layoutParams.width;
+                }
+                if (mHeight == ViewGroup.LayoutParams.WRAP_CONTENT) {
+                    mHeight = layoutParams.height;
+                }
+            }
+
+//            // 判断有没有设置主题
+//            if (mThemeResId == -1) {
+//                mDialog = new BaseDialog(mContext);
+//            } else {
+//                mDialog = new BaseDialog(mContext, mThemeResId);
+//            }
+
+            mDialog = createDialog(mContext, mThemeResId);
+
+            mDialog.setContentView(mContentView);
+
+            mDialog.setCancelable(mCancelable);
+            if (mCancelable) {
+                mDialog.setCanceledOnTouchOutside(true);
+            }
+
+            if (mOnShowListeners != null) {
+                mDialog.setOnShowListeners(mOnShowListeners);
+            }
+
+            if (mOnCancelListeners != null) {
+                mDialog.setOnCancelListeners(mOnCancelListeners);
+            }
+
+            if (mOnDismissListeners != null) {
+                mDialog.setOnDismissListeners(mOnDismissListeners);
+            }
+
+            if (mOnKeyListener != null) {
+                mDialog.setOnKeyListener(mOnKeyListener);
+            }
+
+            // 判断有没有设置动画
+            if (mAnimations == -1) {
+                // 没有的话就设置默认的动画
+                mAnimations = AnimStyle.DEFAULT;
+            }
+
+            // 设置参数
+            WindowManager.LayoutParams params = mDialog.getWindow().getAttributes();
+            params.width = mWidth;
+            params.height = mHeight;
+            params.gravity = mGravity;
+            params.windowAnimations = mAnimations;
+            params.horizontalMargin = mHorizontalMargin;
+            params.verticalMargin = mVerticalMargin;
+            mDialog.getWindow().setAttributes(params);
+
+            // 设置文本
+            for (int i = 0; i < mTextArray.size(); i++) {
+                ((TextView) mContentView.findViewById(mTextArray.keyAt(i))).setText(mTextArray.valueAt(i));
+            }
+
+            // 设置可见状态
+            for (int i = 0; i < mVisibilityArray.size(); i++) {
+                mContentView.findViewById(mVisibilityArray.keyAt(i)).setVisibility(mVisibilityArray.valueAt(i));
+            }
+
+            // 设置背景
+            for (int i = 0; i < mBackgroundArray.size(); i++) {
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                    mContentView.findViewById(mBackgroundArray.keyAt(i)).setBackground(mBackgroundArray.valueAt(i));
+                }else {
+                    mContentView.findViewById(mBackgroundArray.keyAt(i)).setBackgroundDrawable(mBackgroundArray.valueAt(i));
+                }
+            }
+
+            // 设置图片
+            for (int i = 0; i < mImageArray.size(); i++) {
+                ((ImageView) mContentView.findViewById(mImageArray.keyAt(i))).setImageDrawable(mImageArray.valueAt(i));
+            }
+
+            // 设置点击事件
+            for (int i = 0; i < mClickArray.size(); i++) {
+                mContentView.findViewById(mClickArray.keyAt(i)).setOnClickListener(new ViewClickWrapper(mDialog, mClickArray.valueAt(i)));
+            }
+
+            return mDialog;
+        }
+
+        /**
+         * 创建对话框对象（子类可以重写此方法来改变 Dialog 类型）
+         */
+        protected BaseDialog createDialog(Context context, int themeResId) {
+            return new BaseDialog(context, themeResId);
+        }
+
+        /**
+         * 显示
+         */
+        public BaseDialog show() {
+            final BaseDialog dialog = create();
+            dialog.show();
+            return dialog;
+        }
+    }
+
+    public interface OnClickListener<V extends View> {
+        void onClick(BaseDialog dialog, V view);
+    }
+
+    public interface OnShowListener {
+        void onShow(BaseDialog dialog);
+    }
+
+    public interface OnCancelListener {
+        void onCancel(BaseDialog dialog);
+    }
+
+    public interface OnDismissListener {
+        void onDismiss(BaseDialog dialog);
+    }
+
+    /**
+     * 点击事件包装类
+     */
+    private static final class ViewClickWrapper implements View.OnClickListener {
+
+        private final BaseDialog mDialog;
+        private final BaseDialog.OnClickListener mListener;
+
+        private ViewClickWrapper(BaseDialog dialog, BaseDialog.OnClickListener listener) {
+            mDialog = dialog;
+            mListener = listener;
+        }
+
+        @SuppressWarnings("unchecked")
+        @Override
+        public final void onClick(View v) {
+            mListener.onClick(mDialog, v);
+        }
+    }
+
+    /**
+     * 显示监听包装类
+     */
+    private static final class ShowListenerWrapper implements BaseDialog.OnShowListener {
+
+        private final DialogInterface.OnShowListener mListener;
+
+        private ShowListenerWrapper(DialogInterface.OnShowListener listener) {
+            mListener = listener;
+        }
+
+        @Override
+        public void onShow(BaseDialog dialog) {
+            mListener.onShow(dialog);
+        }
+    }
+
+    /**
+     * 取消监听包装类
+     */
+    private static final class CancelListenerWrapper implements BaseDialog.OnCancelListener {
+
+        private final DialogInterface.OnCancelListener mListener;
+
+        private CancelListenerWrapper(DialogInterface.OnCancelListener listener) {
+            mListener = listener;
+        }
+
+        @Override
+        public void onCancel(BaseDialog dialog) {
+            mListener.onCancel(dialog);
+        }
+    }
+
+    /**
+     * 销毁监听包装类
+     */
+    private static final class DismissListenerWrapper implements BaseDialog.OnDismissListener {
+
+        private final DialogInterface.OnDismissListener mListener;
+
+        private DismissListenerWrapper(DialogInterface.OnDismissListener listener) {
+            mListener = listener;
+        }
+
+        @Override
+        public void onDismiss(BaseDialog dialog) {
+            mListener.onDismiss(dialog);
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/wigdet/dialog/BaseDialogFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/dialog/BaseDialogFragment.java	(date 1575522989817)
+++ app/src/main/java/com/guansu/management/wigdet/dialog/BaseDialogFragment.java	(date 1575522989817)
@@ -0,0 +1,144 @@
+package com.guansu.management.wigdet.dialog;
+
+import android.app.Dialog;
+import android.os.Bundle;
+import android.os.SystemClock;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.DialogFragment;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentActivity;
+import androidx.fragment.app.FragmentManager;
+import androidx.fragment.app.FragmentTransaction;
+
+public class BaseDialogFragment extends DialogFragment {
+
+    private BaseDialog mDialog;
+
+    private static String sShowTag;
+    private static long sLastTime;
+
+    /**
+     * 父类同名方法简化
+     */
+    public void show(Fragment fragment) {
+        show(fragment.getFragmentManager(), fragment.getClass().getName());
+    }
+
+    /**
+     * 父类同名方法简化
+     */
+    public void show(FragmentActivity activity) {
+        show(activity.getSupportFragmentManager(), activity.getClass().getName());
+    }
+
+    @Override
+    public void show(FragmentManager manager, String tag) {
+        if (!isRepeatedShow(tag)) {
+            super.show(manager, tag);
+        }
+    }
+
+    @Override
+    public int show(FragmentTransaction transaction, String tag) {
+        if (!isRepeatedShow(tag)) {
+            return super.show(transaction, tag);
+        }
+        return -1;
+    }
+
+    /**
+     * 根据 tag 判断这个 Dialog 是否重复显示了
+     *
+     * @param tag Tag标记
+     */
+    protected boolean isRepeatedShow(String tag) {
+        boolean result = tag.equals(sShowTag) && SystemClock.uptimeMillis() - sLastTime < 500;
+        sShowTag = tag;
+        sLastTime = SystemClock.uptimeMillis();
+        return result;
+    }
+
+    @NonNull
+    @Override
+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
+        if (mDialog != null) {
+            return mDialog;
+        } else {
+            // 不使用 Dialog，替换成 BaseDialog 对象
+            return mDialog = new BaseDialog(getActivity());
+        }
+    }
+
+    public void setDialog(BaseDialog dialog) {
+        mDialog = dialog;
+    }
+
+
+    @Override
+    public Dialog getDialog() {
+        if (mDialog != null) {
+            return mDialog;
+        }
+        return super.getDialog();
+    }
+
+    public static class Builder<B extends BaseDialog.Builder> extends BaseDialog.Builder<B> {
+
+        private FragmentActivity mActivity;
+        private BaseDialogFragment mDialogFragment;
+
+        public Builder(FragmentActivity activity) {
+            super(activity);
+            mActivity = activity;
+        }
+
+        /**
+         * 获取当前 Activity 对象（仅供子类调用）
+         */
+        protected FragmentActivity getActivity() {
+            return mActivity;
+        }
+
+        /**
+         * 获取当前 DialogFragment 对象（仅供子类调用）
+         */
+        protected BaseDialogFragment getDialogFragment() {
+            return mDialogFragment;
+        }
+
+
+        /**
+         * 获取 Fragment 的标记
+         */
+        protected String getFragmentTag() {
+            return getClass().getName();
+        }
+
+        /*
+        // 重写父类的方法（仅供子类调用）
+        @Override
+        protected void dismiss() {
+            try {
+                mDialogFragment.dismiss();
+            } catch (IllegalStateException e) {
+                // java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState
+                // 这里不能调用 DialogFragment 的 dismiss 方法，因为在前台 show 之后却在后台 dismiss 会导致崩溃
+                // 使用 Dialog 的 dismiss 方法却不会出现这种情况，除此之外没有更好的解决方案，故此这句 API 被注释
+            }
+        }
+        */
+
+        @Override
+        public BaseDialog show() {
+            final BaseDialog dialog = create();
+            mDialogFragment = new BaseDialogFragment();
+            mDialogFragment.setDialog(dialog);
+            mDialogFragment.show(mActivity.getSupportFragmentManager(), getFragmentTag());
+            // 解决 Dialog 设置了而 DialogFragment 没有生效的问题
+            mDialogFragment.setCancelable(isCancelable());
+            return dialog;
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/wigdet/banner/listener/OnItemClickListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/banner/listener/OnItemClickListener.java	(date 1575452424269)
+++ app/src/main/java/com/guansu/management/wigdet/banner/listener/OnItemClickListener.java	(date 1575452424269)
@@ -0,0 +1,8 @@
+package com.guansu.management.wigdet.banner.listener;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public interface OnItemClickListener {
+    public void onItemClick(int position);
+}
Index: app/src/main/java/com/guansu/management/wigdet/dialog/PaySuccessDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/dialog/PaySuccessDialog.java	(date 1575522989843)
+++ app/src/main/java/com/guansu/management/wigdet/dialog/PaySuccessDialog.java	(date 1575522989843)
@@ -0,0 +1,42 @@
+package com.guansu.management.wigdet.dialog;
+
+import android.view.Gravity;
+import android.view.View;
+import android.widget.TextView;
+
+import androidx.fragment.app.FragmentActivity;
+
+import com.guansu.management.R;
+
+public final class PaySuccessDialog {
+
+
+    public static final class Builder extends BaseDialogFragment.Builder<Builder> {
+
+
+        public Builder(FragmentActivity activity) {
+            super(activity);
+            setAnimStyle(BaseDialog.AnimStyle.SCALE);
+            setWidth(WRAP_CONTENT);
+            setContentView(R.layout.dialog_paysuccess);
+
+            //  setAnimStyle(BaseDialog.AnimStyle.TOAST);
+            setGravity(Gravity.CENTER);
+            setCancelable(true);
+            ((TextView) findViewById(R.id.tv_cofirm)).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    dismiss();
+                }
+            });
+        }
+
+
+        @Override
+        public BaseDialog create() {
+            // 如果内容为空就设置隐藏
+            return super.create();
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/wigdet/statusbar/FlymeStatusBarUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/statusbar/FlymeStatusBarUtils.java	(date 1575452423145)
+++ app/src/main/java/com/guansu/management/wigdet/statusbar/FlymeStatusBarUtils.java	(date 1575452423145)
@@ -0,0 +1,216 @@
+package com.guansu.management.wigdet.statusbar;
+
+import android.app.Activity;
+import android.os.Build;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+
+public class FlymeStatusBarUtils {
+    private static Method mSetStatusBarColorIcon;
+    private static Method mSetStatusBarDarkIcon;
+    private static Field mStatusBarColorFiled;
+    private static int SYSTEM_UI_FLAG_LIGHT_STATUS_BAR = 0;
+
+    static {
+        try {
+            mSetStatusBarColorIcon = Activity.class.getMethod("setStatusBarDarkIcon", int.class);
+        } catch (NoSuchMethodException e) {
+        }
+        try {
+            mSetStatusBarDarkIcon = Activity.class.getMethod("setStatusBarDarkIcon", boolean.class);
+        } catch (NoSuchMethodException e) {
+        }
+        try {
+            mStatusBarColorFiled = WindowManager.LayoutParams.class.getField("statusBarColor");
+        } catch (NoSuchFieldException e) {
+        }
+        try {
+            Field field = View.class.getField("SYSTEM_UI_FLAG_LIGHT_STATUS_BAR");
+            SYSTEM_UI_FLAG_LIGHT_STATUS_BAR = field.getInt(null);
+        } catch (NoSuchFieldException e) {
+        } catch (IllegalAccessException e) {
+        }
+    }
+
+    /**
+     * 判断颜色是否偏黑色
+     *
+     * @param color 颜色
+     * @param level 级别
+     * @return
+     */
+    public static boolean isBlackColor(int color, int level) {
+        int grey = toGrey(color);
+        return grey < level;
+    }
+
+    /**
+     * 颜色转换成灰度值
+     *
+     * @param rgb 颜色
+     * @return　灰度值
+     */
+    public static int toGrey(int rgb) {
+        int blue = rgb & 0x000000FF;
+        int green = (rgb & 0x0000FF00) >> 8;
+        int red = (rgb & 0x00FF0000) >> 16;
+        return (red * 38 + green * 75 + blue * 15) >> 7;
+    }
+
+    /**
+     * 设置状态栏字体图标颜色
+     *
+     * @param activity 当前activity
+     * @param color    颜色
+     */
+    public static void setStatusBarDarkIcon(Activity activity, int color) {
+        if (mSetStatusBarColorIcon != null) {
+            try {
+                mSetStatusBarColorIcon.invoke(activity, color);
+            } catch (IllegalAccessException e) {
+            } catch (InvocationTargetException e) {
+            }
+        } else {
+            boolean whiteColor = isBlackColor(color, 50);
+            if (mStatusBarColorFiled != null) {
+                setStatusBarDarkIcon(activity, whiteColor, whiteColor);
+                setStatusBarDarkIcon(activity.getWindow(), color);
+            } else {
+                setStatusBarDarkIcon(activity, whiteColor);
+            }
+        }
+    }
+
+    /**
+     * 设置状态栏字体图标颜色(只限全屏非activity情况)
+     *
+     * @param window 当前窗口
+     * @param color  颜色
+     */
+    public static void setStatusBarDarkIcon(Window window, int color) {
+        try {
+            setStatusBarColor(window, color);
+            if (Build.VERSION.SDK_INT > 22) {
+                setStatusBarDarkIcon(window.getDecorView(), true);
+            }
+        } catch (Exception e) {
+        }
+    }
+
+    /**
+     * 设置状态栏字体图标颜色
+     *
+     * @param activity 当前activity
+     * @param dark     是否深色 true为深色 false 为白色
+     */
+    public static void setStatusBarDarkIcon(Activity activity, boolean dark) {
+        setStatusBarDarkIcon(activity, dark, true);
+    }
+
+    private static boolean changeMeizuFlag(WindowManager.LayoutParams winParams, String flagName, boolean on) {
+        try {
+            Field f = winParams.getClass().getDeclaredField(flagName);
+            f.setAccessible(true);
+            int bits = f.getInt(winParams);
+            Field f2 = winParams.getClass().getDeclaredField("meizuFlags");
+            f2.setAccessible(true);
+            int meizuFlags = f2.getInt(winParams);
+            int oldFlags = meizuFlags;
+            if (on) {
+                meizuFlags |= bits;
+            } else {
+                meizuFlags &= ~bits;
+            }
+            if (oldFlags != meizuFlags) {
+                f2.setInt(winParams, meizuFlags);
+                return true;
+            }
+        } catch (NoSuchFieldException e) {
+        } catch (IllegalAccessException e) {
+        } catch (IllegalArgumentException e) {
+        } catch (Throwable e) {
+        }
+        return false;
+    }
+
+    /**
+     * 设置状态栏颜色
+     *
+     * @param view
+     * @param dark
+     */
+    private static void setStatusBarDarkIcon(View view, boolean dark) {
+        int oldVis = view.getSystemUiVisibility();
+        int newVis = oldVis;
+        if (dark) {
+            newVis |= SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
+        } else {
+            newVis &= ~SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
+        }
+        if (newVis != oldVis) {
+            view.setSystemUiVisibility(newVis);
+        }
+    }
+
+    /**
+     * 设置状态栏颜色
+     *
+     * @param window
+     * @param color
+     */
+    private static void setStatusBarColor(Window window, int color) {
+        WindowManager.LayoutParams winParams = window.getAttributes();
+        if (mStatusBarColorFiled != null) {
+            try {
+                int oldColor = mStatusBarColorFiled.getInt(winParams);
+                if (oldColor != color) {
+                    mStatusBarColorFiled.set(winParams, color);
+                    window.setAttributes(winParams);
+                }
+            } catch (IllegalAccessException e) {
+            }
+        }
+    }
+
+    /**
+     * 设置状态栏字体图标颜色(只限全屏非activity情况)
+     *
+     * @param window 当前窗口
+     * @param dark   是否深色 true为深色 false 为白色
+     */
+    public static void setStatusBarDarkIcon(Window window, boolean dark) {
+        if (Build.VERSION.SDK_INT < 23) {
+            changeMeizuFlag(window.getAttributes(), "MEIZU_FLAG_DARK_STATUS_BAR_ICON", dark);
+        } else {
+            View decorView = window.getDecorView();
+            if (decorView != null) {
+                setStatusBarDarkIcon(decorView, dark);
+                setStatusBarColor(window, 0);
+            }
+        }
+    }
+
+    private static void setStatusBarDarkIcon(Activity activity, boolean dark, boolean flag) {
+        if (mSetStatusBarDarkIcon != null) {
+            try {
+                mSetStatusBarDarkIcon.invoke(activity, dark);
+            } catch (IllegalAccessException e) {
+            } catch (InvocationTargetException e) {
+            }
+        } else {
+            if (flag) {
+                setStatusBarDarkIcon(activity.getWindow(), dark);
+            }
+        }
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/statusbar/OSUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/statusbar/OSUtils.java	(date 1575452424880)
+++ app/src/main/java/com/guansu/management/wigdet/statusbar/OSUtils.java	(date 1575452424880)
@@ -0,0 +1,123 @@
+package com.guansu.management.wigdet.statusbar;
+
+import android.os.Build;
+import android.text.TextUtils;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class OSUtils {
+    private static final String ROM_MIUI = "MIUI";
+    private static final String ROM_EMUI = "EMUI";
+    private static final String ROM_FLYME = "FLYME";
+    private static final String ROM_OPPO = "OPPO";
+    private static final String ROM_SMARTISAN = "SMARTISAN";
+    private static final String ROM_VIVO = "VIVO";
+    private static final String ROM_QIKU = "QIKU";
+
+    private static final String KEY_VERSION_MIUI = "ro.miui.ui.version.name";
+    private static final String KEY_VERSION_EMUI = "ro.build.version.emui";
+    private static final String KEY_VERSION_OPPO = "ro.build.version.opporom";
+    private static final String KEY_VERSION_SMARTISAN = "ro.smartisan.version";
+    private static final String KEY_VERSION_VIVO = "ro.vivo.os.version";
+
+    private static String sName;
+    private static String sVersion;
+
+    public static boolean isEmui() {
+        return check(ROM_EMUI);
+    }
+
+    public static boolean isMiui() {
+        return check(ROM_MIUI);
+    }
+
+    public static boolean isVivo() {
+        return check(ROM_VIVO);
+    }
+
+    public static boolean isOppo() {
+        return check(ROM_OPPO);
+    }
+
+    public static boolean isFlyme() {
+        return check(ROM_FLYME);
+    }
+
+    public static boolean is360() {
+        return check(ROM_QIKU) || check("360");
+    }
+
+    public static boolean isSmartisan() {
+        return check(ROM_SMARTISAN);
+    }
+
+    public static String getName() {
+        if (sName == null) {
+            check("");
+        }
+        return sName;
+    }
+
+    public static String getVersion() {
+        if (sVersion == null) {
+            check("");
+        }
+        return sVersion;
+    }
+
+    private static boolean check(String rom) {
+        if (sName != null) {
+            return sName.equals(rom);
+        }
+
+        if (!TextUtils.isEmpty(sVersion = getProp(KEY_VERSION_MIUI))) {
+            sName = ROM_MIUI;
+        } else if (!TextUtils.isEmpty(sVersion = getProp(KEY_VERSION_EMUI))) {
+            sName = ROM_EMUI;
+        } else if (!TextUtils.isEmpty(sVersion = getProp(KEY_VERSION_OPPO))) {
+            sName = ROM_OPPO;
+        } else if (!TextUtils.isEmpty(sVersion = getProp(KEY_VERSION_VIVO))) {
+            sName = ROM_VIVO;
+        } else if (!TextUtils.isEmpty(sVersion = getProp(KEY_VERSION_SMARTISAN))) {
+            sName = ROM_SMARTISAN;
+        } else {
+            sVersion = Build.DISPLAY;
+            if (sVersion.toUpperCase().contains(ROM_FLYME)) {
+                sName = ROM_FLYME;
+            } else {
+                sVersion = Build.UNKNOWN;
+                sName = Build.MANUFACTURER.toUpperCase();
+            }
+        }
+        return sName.equals(rom);
+    }
+
+    private static String getProp(String name) {
+        String line;
+        BufferedReader input = null;
+        try {
+            Process p = Runtime.getRuntime().exec("getprop " + name);
+            input = new BufferedReader(new InputStreamReader(p.getInputStream()), 1024);
+            line = input.readLine();
+            input.close();
+        } catch (IOException ex) {
+            return null;
+        } finally {
+            if (input != null) {
+                try {
+                    input.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+        return line;
+    }
+}
+
Index: app/src/main/java/com/guansu/management/wigdet/bottombar/BottomBarTab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/bottombar/BottomBarTab.java	(date 1576466991788)
+++ app/src/main/java/com/guansu/management/wigdet/bottombar/BottomBarTab.java	(date 1576466991788)
@@ -0,0 +1,162 @@
+package com.guansu.management.wigdet.bottombar;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import androidx.annotation.DrawableRes;
+import androidx.core.content.ContextCompat;
+
+import com.guansu.management.R;
+
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class BottomBarTab extends FrameLayout {
+    private ImageView mIcon;
+    private TextView mTvTitle;
+    private Context mContext;
+    private int mTabPosition = -1;
+    private int[] tabImageOn = {R.mipmap.home, R.mipmap.message,1, R.mipmap.footprint, R.mipmap.my};
+    private int[] tabImageOff = {R.mipmap.home_no, R.mipmap.message_no,1, R.mipmap.footprint_no, R.mipmap.my_no};
+    private TextView mTvUnreadCount;
+
+    public BottomBarTab(Context context, @DrawableRes int icon, CharSequence title) {
+        this(context, null, icon, title);
+    }
+
+    public BottomBarTab(Context context, AttributeSet attrs, int icon, CharSequence title) {
+        this(context, attrs, 0, icon, title);
+    }
+
+    public BottomBarTab(Context context, AttributeSet attrs, int defStyleAttr, int icon, CharSequence title) {
+        super(context, attrs, defStyleAttr);
+        init(context, icon, title);
+    }
+
+    private void init(Context context, int icon, CharSequence title) {
+        mContext = context;
+        TypedArray typedArray = context.obtainStyledAttributes(new int[]{R.attr.selectableItemBackgroundBorderless});
+        Drawable drawable = typedArray.getDrawable(0);
+        setBackgroundDrawable(drawable);
+        typedArray.recycle();
+
+        LinearLayout lLContainer = new LinearLayout(context);
+        lLContainer.setOrientation(LinearLayout.VERTICAL);
+        lLContainer.setGravity(Gravity.CENTER);
+        LayoutParams paramsContainer = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+        paramsContainer.gravity = Gravity.CENTER_HORIZONTAL;
+        lLContainer.setLayoutParams(paramsContainer);
+
+        mIcon = new ImageView(context);
+        int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 18, getResources().getDisplayMetrics());
+        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(size, size);
+        params.topMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 10, getResources().getDisplayMetrics());
+        mIcon.setImageResource(icon);
+        mIcon.setLayoutParams(params);
+        mIcon.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+//        mIcon.setColorFilter(ContextCompat.getColor(context, R.color.tab_unselect));
+        lLContainer.addView(mIcon);
+
+        mTvTitle = new TextView(context);
+        mTvTitle.setText(title);
+        LinearLayout.LayoutParams paramsTv = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+        paramsTv.topMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics());
+        mTvTitle.setTextSize(TypedValue.COMPLEX_UNIT_DIP,12);
+        mTvTitle.setTextColor(ContextCompat.getColor(context, R.color.textColor));
+        mTvTitle.setLayoutParams(paramsTv);
+        lLContainer.addView(mTvTitle);
+        addView(lLContainer);
+
+        int min = dip2px(context, 30);
+        int padding = dip2px(context, 5);
+        mTvUnreadCount = new TextView(context);
+        mTvUnreadCount.setBackgroundResource(R.drawable.fragmentation_help);
+        mTvUnreadCount.setMinWidth(min);
+        mTvUnreadCount.setTextColor(Color.WHITE);
+        mTvUnreadCount.setPadding(padding, 0, padding, 0);
+        mTvUnreadCount.setGravity(Gravity.CENTER);
+        LayoutParams tvUnReadParams = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, min);
+        tvUnReadParams.gravity = Gravity.CENTER;
+        tvUnReadParams.leftMargin = dip2px(context, 17);
+        tvUnReadParams.bottomMargin = dip2px(context, 14);
+        mTvUnreadCount.setLayoutParams(tvUnReadParams);
+        mTvUnreadCount.setVisibility(GONE);
+
+        addView(mTvUnreadCount);
+    }
+
+    @Override
+    public void setSelected(boolean selected) {
+        super.setSelected(selected);
+        if (selected) {
+            mIcon.setImageResource(tabImageOn[getTabPosition()]);
+            mTvTitle.setTextColor(ContextCompat.getColor(mContext, R.color.contentColor));
+        } else {
+            mIcon.setImageResource(tabImageOff[getTabPosition()]);
+            mTvTitle.setTextColor(ContextCompat.getColor(mContext, R.color.textColor));
+        }
+    }
+
+    public void setTabPosition(int position) {
+        mTabPosition = position;
+        if (position == 0) {
+            setSelected(true);
+        }
+    }
+
+    public int getTabPosition() {
+        return mTabPosition;
+    }
+
+    /**
+     * 设置未读数量
+     */
+    public void setUnreadCount(int num) {
+        if (num <= 0) {
+            mTvUnreadCount.setText(String.valueOf(0));
+            mTvUnreadCount.setVisibility(GONE);
+        } else {
+            mTvUnreadCount.setVisibility(VISIBLE);
+            if (num > 99) {
+                mTvUnreadCount.setText("99+");
+            } else {
+                mTvUnreadCount.setText(String.valueOf(num));
+            }
+        }
+    }
+
+    /**
+     * 获取当前未读数量
+     */
+    public int getUnreadCount() {
+        int count = 0;
+        if (TextUtils.isEmpty(mTvUnreadCount.getText())) {
+            return count;
+        }
+        if (mTvUnreadCount.getText().toString().equals("99+")) {
+            return 99;
+        }
+        try {
+            count = Integer.valueOf(mTvUnreadCount.getText().toString());
+        } catch (Exception ignored) {
+        }
+        return count;
+    }
+
+    private int dip2px(Context context, float dp) {
+        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/bottombar/BottomBar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/bottombar/BottomBar.java	(date 1576546697398)
+++ app/src/main/java/com/guansu/management/wigdet/bottombar/BottomBar.java	(date 1576546697398)
@@ -0,0 +1,229 @@
+package com.guansu.management.wigdet.bottombar;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.view.animation.Interpolator;
+import android.widget.LinearLayout;
+
+import androidx.core.content.ContextCompat;
+import androidx.core.view.ViewCompat;
+
+import com.guansu.management.R;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+/**
+ * Created by dongyaoyao
+ */
+public class BottomBar extends LinearLayout {
+    private static final int TRANSLATE_DURATION_MILLIS = 200;
+
+    private final Interpolator mInterpolator = new AccelerateDecelerateInterpolator();
+    private boolean mVisible = true;
+
+    private List<BottomBarTab> mTabs = new ArrayList<>();
+
+    private LinearLayout mTabLayout;
+
+    private LayoutParams mTabParams;
+    private int mCurrentPosition = 0;
+    private OnTabSelectedListener mListener;
+
+    public BottomBar(Context context) {
+        this(context, null);
+    }
+
+    public BottomBar(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public BottomBar(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init(context, attrs);
+    }
+
+    private void init(Context context, AttributeSet attrs) {
+        setOrientation(VERTICAL);
+
+        View view = new View(context);
+        view.setBackgroundColor(ContextCompat.getColor(context, R.color.white));
+        addView(view, new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1));
+
+        mTabLayout = new LinearLayout(context);
+        mTabLayout.setBackgroundColor(Color.WHITE);
+        mTabLayout.setOrientation(LinearLayout.HORIZONTAL);
+        addView(mTabLayout, new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+
+        mTabParams = new LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT);
+        mTabParams.weight = 1;
+    }
+
+    public BottomBar addItem(final BottomBarTab tab) {
+        tab.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (mListener == null) return;
+
+                int pos = tab.getTabPosition();
+                if (mCurrentPosition == pos) {
+                    mListener.onTabReselected(pos);
+                } else {
+                    mListener.onTabSelected(pos, mCurrentPosition);
+                    tab.setSelected(true);
+                    mListener.onTabUnselected(mCurrentPosition);
+                    mTabs.get(mCurrentPosition).setSelected(false);
+                    mCurrentPosition = pos;
+                }
+            }
+        });
+        tab.setTabPosition(mTabLayout.getChildCount());
+        tab.setLayoutParams(mTabParams);
+        mTabLayout.addView(tab);
+        mTabs.add(tab);
+        return this;
+    }
+
+    public void setOnTabSelectedListener(OnTabSelectedListener onTabSelectedListener) {
+        mListener = onTabSelectedListener;
+    }
+
+    public void setCurrentItem(final int position) {
+        mTabLayout.post(new Runnable() {
+            @Override
+            public void run() {
+                mTabLayout.getChildAt(position).performClick();
+            }
+        });
+    }
+
+    public int getCurrentItemPosition() {
+        return mCurrentPosition;
+    }
+
+    /**
+     * 获取 Tab
+     */
+    public BottomBarTab getItem(int index) {
+        if (mTabs.size() < index) return null;
+        return mTabs.get(index);
+    }
+
+    public interface OnTabSelectedListener {
+        void onTabSelected(int position, int prePosition);
+
+        void onTabUnselected(int position);
+
+        void onTabReselected(int position);
+    }
+
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        Parcelable superState = super.onSaveInstanceState();
+        return new SavedState(superState, mCurrentPosition);
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Parcelable state) {
+        SavedState ss = (SavedState) state;
+        super.onRestoreInstanceState(ss.getSuperState());
+
+        if (mCurrentPosition != ss.position) {
+            mTabLayout.getChildAt(mCurrentPosition).setSelected(false);
+            mTabLayout.getChildAt(ss.position).setSelected(true);
+        }
+        mCurrentPosition = ss.position;
+    }
+
+    static class SavedState extends BaseSavedState {
+        private int position;
+
+        public SavedState(Parcel source) {
+            super(source);
+            position = source.readInt();
+        }
+
+        public SavedState(Parcelable superState, int position) {
+            super(superState);
+            this.position = position;
+        }
+
+        @Override
+        public void writeToParcel(Parcel out, int flags) {
+            super.writeToParcel(out, flags);
+            out.writeInt(position);
+        }
+
+        public static final Creator<SavedState> CREATOR = new Creator<SavedState>() {
+            public SavedState createFromParcel(Parcel in) {
+                return new SavedState(in);
+            }
+
+            public SavedState[] newArray(int size) {
+                return new SavedState[size];
+            }
+        };
+    }
+
+
+    public void hide() {
+        hide(true);
+    }
+
+    public void show() {
+        show(true);
+    }
+
+    public void hide(boolean anim) {
+        toggle(false, anim, false);
+    }
+
+    public void show(boolean anim) {
+        toggle(true, anim, false);
+    }
+
+    public boolean isVisible() {
+        return mVisible;
+    }
+
+    private void toggle(final boolean visible, final boolean animate, boolean force) {
+        if (mVisible != visible || force) {
+            mVisible = visible;
+            int height = getHeight();
+            if (height == 0 && !force) {
+                ViewTreeObserver vto = getViewTreeObserver();
+                if (vto.isAlive()) {
+                    // view树完成测量并且分配空间而绘制过程还没有开始的时候播放动画。
+                    vto.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                        @Override
+                        public boolean onPreDraw() {
+                            ViewTreeObserver currentVto = getViewTreeObserver();
+                            if (currentVto.isAlive()) {
+                                currentVto.removeOnPreDrawListener(this);
+                            }
+                            toggle(visible, animate, true);
+                            return true;
+                        }
+                    });
+                    return;
+                }
+            }
+            int translationY = visible ? 0 : height;
+            if (animate) {
+                animate().setInterpolator(mInterpolator)
+                        .setDuration(TRANSLATE_DURATION_MILLIS)
+                        .translationY(translationY);
+            } else {
+                ViewCompat.setTranslationY(this, translationY);
+            }
+        }
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/datepicker/CustomDatePicker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/datepicker/CustomDatePicker.java	(date 1575612379229)
+++ app/src/main/java/com/guansu/management/wigdet/datepicker/CustomDatePicker.java	(date 1575612379229)
@@ -0,0 +1,574 @@
+package com.guansu.management.wigdet.datepicker;
+
+import android.app.Dialog;
+import android.content.Context;
+import android.text.TextUtils;
+import android.view.Gravity;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+
+
+import com.guansu.management.R;
+
+import java.text.DecimalFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+
+/**
+ * @author 13992
+ */
+public class CustomDatePicker implements View.OnClickListener, PickerView.OnSelectListener {
+
+    private Context mContext;
+    private Callback mCallback;
+    private Calendar mBeginTime, mEndTime, mSelectedTime;
+    private boolean mCanDialogShow;
+
+    private Dialog mPickerDialog;
+    private PickerView mDpvYear, mDpvMonth, mDpvDay;
+
+    private int mBeginYear, mBeginMonth, mBeginDay, mBeginHour, mBeginMinute,
+            mEndYear, mEndMonth, mEndDay, mEndHour, mEndMinute;
+    private List<String> mYearUnits = new ArrayList<>(), mMonthUnits = new ArrayList<>(), mDayUnits = new ArrayList<>(),
+            mHourUnits = new ArrayList<>(), mMinuteUnits = new ArrayList<>();
+    private DecimalFormat mDecimalFormat = new DecimalFormat("00");
+
+    private boolean mCanShowPreciseTime;
+    private int mScrollUnits = SCROLL_UNIT_HOUR + SCROLL_UNIT_MINUTE;
+
+    /**
+     * 时间单位：时、分
+     */
+    private static final int SCROLL_UNIT_HOUR = 0b1;
+    private static final int SCROLL_UNIT_MINUTE = 0b10;
+
+    /**
+     * 时间单位的最大显示值
+     */
+    private static final int MAX_MINUTE_UNIT = 59;
+    private static final int MAX_HOUR_UNIT = 23;
+    private static final int MAX_MONTH_UNIT = 12;
+
+    /**
+     * 级联滚动延迟时间
+     */
+    private static final long LINKAGE_DELAY_DEFAULT = 100L;
+
+    /**
+     * 时间选择结果回调接口
+     */
+    public interface Callback {
+        void onTimeSelected(long timestamp);
+    }
+
+    /**
+     * 通过日期字符串初始换时间选择器
+     *  @param context      Activity Context
+     * @param callback     选择结果回调
+     * @param beginDateStr 日期字符串，格式为 yyyy-MM-dd HH:mm
+     * @param endDateStr   日期字符串，格式为 yyyy-MM-dd HH:mm
+     */
+
+
+    /**
+     * 通过时间戳初始换时间选择器，毫秒级别
+     *
+     * @param context        Activity Context
+     * @param callback       选择结果回调
+     * @param beginTimestamp 毫秒级时间戳
+     * @param endTimestamp   毫秒级时间戳
+     */
+    public CustomDatePicker(Context context, Callback callback, long beginTimestamp, long endTimestamp) {
+        if (context == null || callback == null || beginTimestamp <= 0 || beginTimestamp >= endTimestamp) {
+            mCanDialogShow = false;
+            return;
+        }
+
+        mContext = context;
+        mCallback = callback;
+        mBeginTime = Calendar.getInstance();
+        mBeginTime.setTimeInMillis(beginTimestamp);
+        mEndTime = Calendar.getInstance();
+        mEndTime.setTimeInMillis(endTimestamp);
+        mSelectedTime = Calendar.getInstance();
+
+        initView();
+        initData();
+        mCanDialogShow = true;
+    }
+
+    private void initView() {
+        mPickerDialog = new Dialog(mContext, R.style.date_picker_dialog);
+        mPickerDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
+        mPickerDialog.setContentView(R.layout.dialog_date_picker);
+
+        Window window = mPickerDialog.getWindow();
+        if (window != null) {
+            WindowManager.LayoutParams lp = window.getAttributes();
+            lp.gravity = Gravity.BOTTOM;
+            lp.width = WindowManager.LayoutParams.MATCH_PARENT;
+            lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
+            window.setAttributes(lp);
+        }
+
+        mPickerDialog.findViewById(R.id.tv_cancel).setOnClickListener(this);
+        mPickerDialog.findViewById(R.id.tv_confirm).setOnClickListener(this);
+
+        mDpvYear = mPickerDialog.findViewById(R.id.dpv_year);
+        mDpvYear.setOnSelectListener(this);
+        mDpvMonth = mPickerDialog.findViewById(R.id.dpv_month);
+        mDpvMonth.setOnSelectListener(this);
+        mDpvDay = mPickerDialog.findViewById(R.id.dpv_day);
+        mDpvDay.setOnSelectListener(this);
+    }
+
+    @Override
+    public void onClick(View v) {
+        switch (v.getId()) {
+            case R.id.tv_cancel:
+                break;
+
+            case R.id.tv_confirm:
+                if (mCallback != null) {
+                    mCallback.onTimeSelected(mSelectedTime.getTimeInMillis());
+                }
+                break;
+        }
+
+        if (mPickerDialog != null && mPickerDialog.isShowing()) {
+            mPickerDialog.dismiss();
+        }
+    }
+
+    @Override
+    public void onSelect(View view, String selected) {
+        if (view == null || TextUtils.isEmpty(selected)) return;
+
+        int timeUnit;
+        try {
+            timeUnit = Integer.parseInt(selected);
+        } catch (Throwable ignored) {
+            return;
+        }
+
+        switch (view.getId()) {
+            case R.id.dpv_year:
+                mSelectedTime.set(Calendar.YEAR, timeUnit);
+                linkageMonthUnit(true, LINKAGE_DELAY_DEFAULT);
+                break;
+
+            case R.id.dpv_month:
+                // 防止类似 2018/12/31 滚动到11月时因溢出变成 2018/12/01
+                int lastSelectedMonth = mSelectedTime.get(Calendar.MONTH) + 1;
+                mSelectedTime.add(Calendar.MONTH, timeUnit - lastSelectedMonth);
+                linkageDayUnit(true, LINKAGE_DELAY_DEFAULT);
+                break;
+
+            case R.id.dpv_day:
+                mSelectedTime.set(Calendar.DAY_OF_MONTH, timeUnit);
+                linkageHourUnit(true, LINKAGE_DELAY_DEFAULT);
+                break;
+        }
+    }
+
+    private void initData() {
+        mSelectedTime.setTimeInMillis(mBeginTime.getTimeInMillis());
+
+        mBeginYear = mBeginTime.get(Calendar.YEAR);
+        // Calendar.MONTH 值为 0-11
+        mBeginMonth = mBeginTime.get(Calendar.MONTH) + 1;
+        mBeginDay = mBeginTime.get(Calendar.DAY_OF_MONTH);
+        mBeginHour = mBeginTime.get(Calendar.HOUR_OF_DAY);
+        mBeginMinute = mBeginTime.get(Calendar.MINUTE);
+
+        mEndYear = mEndTime.get(Calendar.YEAR);
+        mEndMonth = mEndTime.get(Calendar.MONTH) + 1;
+        mEndDay = mEndTime.get(Calendar.DAY_OF_MONTH);
+        mEndHour = mEndTime.get(Calendar.HOUR_OF_DAY);
+        mEndMinute = mEndTime.get(Calendar.MINUTE);
+
+        boolean canSpanYear = mBeginYear != mEndYear;
+        boolean canSpanMon = !canSpanYear && mBeginMonth != mEndMonth;
+        boolean canSpanDay = !canSpanMon && mBeginDay != mEndDay;
+        boolean canSpanHour = !canSpanDay && mBeginHour != mEndHour;
+        boolean canSpanMinute = !canSpanHour && mBeginMinute != mEndMinute;
+        if (canSpanYear) {
+            initDateUnits(MAX_MONTH_UNIT, mBeginTime.getActualMaximum(Calendar.DAY_OF_MONTH), MAX_HOUR_UNIT, MAX_MINUTE_UNIT);
+        } else if (canSpanMon) {
+            initDateUnits(mEndMonth, mBeginTime.getActualMaximum(Calendar.DAY_OF_MONTH), MAX_HOUR_UNIT, MAX_MINUTE_UNIT);
+        } else if (canSpanDay) {
+            initDateUnits(mEndMonth, mEndDay, MAX_HOUR_UNIT, MAX_MINUTE_UNIT);
+        } else if (canSpanHour) {
+            initDateUnits(mEndMonth, mEndDay, mEndHour, MAX_MINUTE_UNIT);
+        } else if (canSpanMinute) {
+            initDateUnits(mEndMonth, mEndDay, mEndHour, mEndMinute);
+        }
+    }
+
+    private void initDateUnits(int endMonth, int endDay, int endHour, int endMinute) {
+        for (int i = mBeginYear; i <= mEndYear; i++) {
+            mYearUnits.add(String.valueOf(i));
+        }
+
+        for (int i = mBeginMonth; i <= endMonth; i++) {
+            mMonthUnits.add(mDecimalFormat.format(i));
+        }
+
+        for (int i = mBeginDay; i <= endDay; i++) {
+            mDayUnits.add(mDecimalFormat.format(i));
+        }
+
+        if ((mScrollUnits & SCROLL_UNIT_HOUR) != SCROLL_UNIT_HOUR) {
+            mHourUnits.add(mDecimalFormat.format(mBeginHour));
+        } else {
+            for (int i = mBeginHour; i <= endHour; i++) {
+                mHourUnits.add(mDecimalFormat.format(i));
+            }
+        }
+
+        if ((mScrollUnits & SCROLL_UNIT_MINUTE) != SCROLL_UNIT_MINUTE) {
+            mMinuteUnits.add(mDecimalFormat.format(mBeginMinute));
+        } else {
+            for (int i = mBeginMinute; i <= endMinute; i++) {
+                mMinuteUnits.add(mDecimalFormat.format(i));
+            }
+        }
+
+        mDpvYear.setDataList(mYearUnits);
+        mDpvYear.setSelected(0);
+        mDpvMonth.setDataList(mMonthUnits);
+        mDpvMonth.setSelected(0);
+        mDpvDay.setDataList(mDayUnits);
+        mDpvDay.setSelected(0);
+
+        setCanScroll();
+    }
+
+    private void setCanScroll() {
+        mDpvYear.setCanScroll(mYearUnits.size() > 1);
+        mDpvMonth.setCanScroll(mMonthUnits.size() > 1);
+        mDpvDay.setCanScroll(mDayUnits.size() > 1);
+    }
+
+    /**
+     * 联动“月”变化
+     *
+     * @param showAnim 是否展示滚动动画
+     * @param delay    联动下一级延迟时间
+     */
+    private void linkageMonthUnit(final boolean showAnim, final long delay) {
+        int minMonth;
+        int maxMonth;
+        int selectedYear = mSelectedTime.get(Calendar.YEAR);
+        if (mBeginYear == mEndYear) {
+            minMonth = mBeginMonth;
+            maxMonth = mEndMonth;
+        } else if (selectedYear == mBeginYear) {
+            minMonth = mBeginMonth;
+            maxMonth = MAX_MONTH_UNIT;
+        } else if (selectedYear == mEndYear) {
+            minMonth = 1;
+            maxMonth = mEndMonth;
+        } else {
+            minMonth = 1;
+            maxMonth = MAX_MONTH_UNIT;
+        }
+
+        // 重新初始化时间单元容器
+        mMonthUnits.clear();
+        for (int i = minMonth; i <= maxMonth; i++) {
+            mMonthUnits.add(mDecimalFormat.format(i));
+        }
+        mDpvMonth.setDataList(mMonthUnits);
+
+        // 确保联动时不会溢出或改变关联选中值
+        int selectedMonth = getValueInRange(mSelectedTime.get(Calendar.MONTH) + 1, minMonth, maxMonth);
+        mSelectedTime.set(Calendar.MONTH, selectedMonth - 1);
+        mDpvMonth.setSelected(selectedMonth - minMonth);
+        if (showAnim) {
+            mDpvMonth.startAnim();
+        }
+
+        // 联动“日”变化
+        mDpvMonth.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                linkageDayUnit(showAnim, delay);
+            }
+        }, delay);
+    }
+
+    /**
+     * 联动“日”变化
+     *
+     * @param showAnim 是否展示滚动动画
+     * @param delay    联动下一级延迟时间
+     */
+    private void linkageDayUnit(final boolean showAnim, final long delay) {
+        int minDay;
+        int maxDay;
+        int selectedYear = mSelectedTime.get(Calendar.YEAR);
+        int selectedMonth = mSelectedTime.get(Calendar.MONTH) + 1;
+        if (mBeginYear == mEndYear && mBeginMonth == mEndMonth) {
+            minDay = mBeginDay;
+            maxDay = mEndDay;
+        } else if (selectedYear == mBeginYear && selectedMonth == mBeginMonth) {
+            minDay = mBeginDay;
+            maxDay = mSelectedTime.getActualMaximum(Calendar.DAY_OF_MONTH);
+        } else if (selectedYear == mEndYear && selectedMonth == mEndMonth) {
+            minDay = 1;
+            maxDay = mEndDay;
+        } else {
+            minDay = 1;
+            maxDay = mSelectedTime.getActualMaximum(Calendar.DAY_OF_MONTH);
+        }
+
+        mDayUnits.clear();
+        for (int i = minDay; i <= maxDay; i++) {
+            mDayUnits.add(mDecimalFormat.format(i));
+        }
+        mDpvDay.setDataList(mDayUnits);
+
+        int selectedDay = getValueInRange(mSelectedTime.get(Calendar.DAY_OF_MONTH), minDay, maxDay);
+        mSelectedTime.set(Calendar.DAY_OF_MONTH, selectedDay);
+        mDpvDay.setSelected(selectedDay - minDay);
+        if (showAnim) {
+            mDpvDay.startAnim();
+        }
+
+        mDpvDay.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                linkageHourUnit(showAnim, delay);
+            }
+        }, delay);
+    }
+
+    /**
+     * 联动“时”变化
+     *
+     * @param showAnim 是否展示滚动动画
+     * @param delay    联动下一级延迟时间
+     */
+    private void linkageHourUnit(final boolean showAnim, final long delay) {
+        if ((mScrollUnits & SCROLL_UNIT_HOUR) == SCROLL_UNIT_HOUR) {
+            int minHour;
+            int maxHour;
+            int selectedYear = mSelectedTime.get(Calendar.YEAR);
+            int selectedMonth = mSelectedTime.get(Calendar.MONTH) + 1;
+            int selectedDay = mSelectedTime.get(Calendar.DAY_OF_MONTH);
+            if (mBeginYear == mEndYear && mBeginMonth == mEndMonth && mBeginDay == mEndDay) {
+                minHour = mBeginHour;
+                maxHour = mEndHour;
+            } else if (selectedYear == mBeginYear && selectedMonth == mBeginMonth && selectedDay == mBeginDay) {
+                minHour = mBeginHour;
+                maxHour = MAX_HOUR_UNIT;
+            } else if (selectedYear == mEndYear && selectedMonth == mEndMonth && selectedDay == mEndDay) {
+                minHour = 0;
+                maxHour = mEndHour;
+            } else {
+                minHour = 0;
+                maxHour = MAX_HOUR_UNIT;
+            }
+
+            mHourUnits.clear();
+            for (int i = minHour; i <= maxHour; i++) {
+                mHourUnits.add(mDecimalFormat.format(i));
+            }
+
+            int selectedHour = getValueInRange(mSelectedTime.get(Calendar.HOUR_OF_DAY), minHour, maxHour);
+            mSelectedTime.set(Calendar.HOUR_OF_DAY, selectedHour);
+        }
+    }
+
+    /**
+     * 联动“分”变化
+     *
+     * @param showAnim 是否展示滚动动画
+     */
+    private void linkageMinuteUnit(final boolean showAnim) {
+        if ((mScrollUnits & SCROLL_UNIT_MINUTE) == SCROLL_UNIT_MINUTE) {
+            int minMinute;
+            int maxMinute;
+            int selectedYear = mSelectedTime.get(Calendar.YEAR);
+            int selectedMonth = mSelectedTime.get(Calendar.MONTH) + 1;
+            int selectedDay = mSelectedTime.get(Calendar.DAY_OF_MONTH);
+            int selectedHour = mSelectedTime.get(Calendar.HOUR_OF_DAY);
+            if (mBeginYear == mEndYear && mBeginMonth == mEndMonth && mBeginDay == mEndDay && mBeginHour == mEndHour) {
+                minMinute = mBeginMinute;
+                maxMinute = mEndMinute;
+            } else if (selectedYear == mBeginYear && selectedMonth == mBeginMonth && selectedDay == mBeginDay && selectedHour == mBeginHour) {
+                minMinute = mBeginMinute;
+                maxMinute = MAX_MINUTE_UNIT;
+            } else if (selectedYear == mEndYear && selectedMonth == mEndMonth && selectedDay == mEndDay && selectedHour == mEndHour) {
+                minMinute = 0;
+                maxMinute = mEndMinute;
+            } else {
+                minMinute = 0;
+                maxMinute = MAX_MINUTE_UNIT;
+            }
+
+            mMinuteUnits.clear();
+            for (int i = minMinute; i <= maxMinute; i++) {
+                mMinuteUnits.add(mDecimalFormat.format(i));
+            }
+
+            int selectedMinute = getValueInRange(mSelectedTime.get(Calendar.MINUTE), minMinute, maxMinute);
+            mSelectedTime.set(Calendar.MINUTE, selectedMinute);
+
+        }
+
+        setCanScroll();
+    }
+
+    private int getValueInRange(int value, int minValue, int maxValue) {
+        if (value < minValue) {
+            return minValue;
+        } else if (value > maxValue) {
+            return maxValue;
+        } else {
+            return value;
+        }
+    }
+
+    /**
+     * 展示时间选择器
+     *
+     * @param dateStr 日期字符串，格式为 yyyy-MM-dd 或 yyyy-MM-dd HH:mm
+     */
+    public void show(String dateStr) {
+        if (!canShow() || TextUtils.isEmpty(dateStr)) return;
+        // 弹窗时，考虑用户体验，不展示滚动动画
+        if (setSelectedTime(dateStr, false)) {
+            mPickerDialog.show();
+        }
+    }
+
+    private boolean canShow() {
+        return mCanDialogShow && mPickerDialog != null;
+    }
+
+    /**
+     * 设置日期选择器的选中时间
+     *
+     * @param dateStr  日期字符串
+     * @param showAnim 是否展示动画
+     * @return 是否设置成功
+     */
+    public boolean setSelectedTime(String dateStr, boolean showAnim) {
+        return canShow() && !TextUtils.isEmpty(dateStr)
+                && setSelectedTime(DateFormatUtils.str2Long(dateStr, mCanShowPreciseTime), showAnim);
+    }
+
+    /**
+     * 展示时间选择器
+     *
+     * @param timestamp 时间戳，毫秒级别
+     */
+    public void show(long timestamp) {
+        if (!canShow()) return;
+
+        if (setSelectedTime(timestamp, false)) {
+            mPickerDialog.show();
+        }
+    }
+
+    /**
+     * 设置日期选择器的选中时间
+     *
+     * @param timestamp 毫秒级时间戳
+     * @param showAnim  是否展示动画
+     * @return 是否设置成功
+     */
+    public boolean setSelectedTime(long timestamp, boolean showAnim) {
+        if (!canShow()) return false;
+
+        if (timestamp < mBeginTime.getTimeInMillis()) {
+            timestamp = mBeginTime.getTimeInMillis();
+        } else if (timestamp > mEndTime.getTimeInMillis()) {
+            timestamp = mEndTime.getTimeInMillis();
+        }
+        mSelectedTime.setTimeInMillis(timestamp);
+
+        mYearUnits.clear();
+        for (int i = mBeginYear; i <= mEndYear; i++) {
+            mYearUnits.add(String.valueOf(i));
+        }
+        mDpvYear.setDataList(mYearUnits);
+        mDpvYear.setSelected(mSelectedTime.get(Calendar.YEAR) - mBeginYear);
+        linkageMonthUnit(showAnim, showAnim ? LINKAGE_DELAY_DEFAULT : 0);
+        return true;
+    }
+
+    /**
+     * 设置是否允许点击屏幕或物理返回键关闭
+     */
+    public void setCancelable(boolean cancelable) {
+        if (!canShow()) return;
+
+        mPickerDialog.setCancelable(cancelable);
+    }
+
+    /**
+     * 设置日期控件是否显示时和分
+     */
+    public void setCanShowPreciseTime(boolean canShowPreciseTime) {
+        if (!canShow()) return;
+
+        if (canShowPreciseTime) {
+            initScrollUnit();
+        } else {
+            initScrollUnit(SCROLL_UNIT_HOUR, SCROLL_UNIT_MINUTE);
+        }
+        mCanShowPreciseTime = canShowPreciseTime;
+    }
+
+    private void initScrollUnit(Integer... units) {
+        if (units == null || units.length == 0) {
+            mScrollUnits = SCROLL_UNIT_HOUR + SCROLL_UNIT_MINUTE;
+        } else {
+            for (int unit : units) {
+                mScrollUnits ^= unit;
+            }
+        }
+    }
+
+    /**
+     * 设置日期控件是否可以循环滚动
+     */
+    public void setScrollLoop(boolean canLoop) {
+        if (!canShow()) return;
+
+        mDpvYear.setCanScrollLoop(canLoop);
+        mDpvMonth.setCanScrollLoop(canLoop);
+        mDpvDay.setCanScrollLoop(canLoop);
+    }
+
+    /**
+     * 设置日期控件是否展示滚动动画
+     */
+    public void setCanShowAnim(boolean canShowAnim) {
+        if (!canShow()) return;
+
+        mDpvYear.setCanShowAnim(canShowAnim);
+        mDpvMonth.setCanShowAnim(canShowAnim);
+        mDpvDay.setCanShowAnim(canShowAnim);
+    }
+
+    /**
+     * 销毁弹窗
+     */
+    public void onDestroy() {
+        if (mPickerDialog != null) {
+            mPickerDialog.dismiss();
+            mPickerDialog = null;
+
+            mDpvYear.onDestroy();
+            mDpvMonth.onDestroy();
+            mDpvDay.onDestroy();
+        }
+    }
+
+}
Index: app/src/main/java/com/guansu/management/wigdet/datepicker/DateFormatUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/datepicker/DateFormatUtils.java	(date 1575612379262)
+++ app/src/main/java/com/guansu/management/wigdet/datepicker/DateFormatUtils.java	(date 1575612379262)
@@ -0,0 +1,52 @@
+package com.guansu.management.wigdet.datepicker;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
+
+/**
+ * @author 13992
+ */
+public class DateFormatUtils {
+
+    private static final String DATE_FORMAT_PATTERN_YMD = "yyyy-MM-dd";
+
+    /**
+     * 时间戳转字符串
+     *
+     * @param timestamp     时间戳
+     * @param isPreciseTime 是否包含时分
+     * @return 格式化的日期字符串
+     */
+    public static String long2Str(long timestamp, boolean isPreciseTime) {
+        return long2Str(timestamp, getFormatPattern(isPreciseTime));
+    }
+
+    private static String long2Str(long timestamp, String pattern) {
+        return new SimpleDateFormat(pattern, Locale.CHINA).format(new Date(timestamp));
+    }
+
+    /**
+     * 字符串转时间戳
+     *
+     * @param dateStr       日期字符串
+     * @param isPreciseTime 是否包含时分
+     * @return 时间戳
+     */
+    public static long str2Long(String dateStr, boolean isPreciseTime) {
+        return str2Long(dateStr, getFormatPattern(isPreciseTime));
+    }
+
+    private static long str2Long(String dateStr, String pattern) {
+        try {
+            return new SimpleDateFormat(pattern, Locale.CHINA).parse(dateStr).getTime();
+        } catch (Throwable ignored) {
+        }
+        return 0;
+    }
+
+    private static String getFormatPattern(boolean showSpecificTime) {
+            return DATE_FORMAT_PATTERN_YMD;
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/home/adapter/ImageAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/home/adapter/ImageAdapter.java	(date 1576562015946)
+++ app/src/main/java/com/guansu/management/fragment/home/adapter/ImageAdapter.java	(date 1576562015946)
@@ -0,0 +1,50 @@
+package com.guansu.management.fragment.home.adapter;
+
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.bumptech.glide.Glide;
+import com.guansu.management.R;
+import com.guansu.management.bean.HomeBean;
+import com.guansu.management.bean.ImagesListBean;
+
+import java.util.List;
+
+/**
+ * @author: dongyaoyao
+ */
+public class ImageAdapter extends RecyclerView.Adapter<ImageAdapter.SelectedPicViewHolder> {
+    private List<ImagesListBean> imagesListBeans;
+
+    public ImageAdapter(List<ImagesListBean> img_list) {
+        this.imagesListBeans=img_list;
+    }
+
+    @Override
+    public SelectedPicViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        return new SelectedPicViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_image, null));
+    }
+    @Override
+    public void onBindViewHolder(SelectedPicViewHolder holder, final int position) {
+        Glide.with(holder.itemView).load(imagesListBeans.get(position).getImage()).into(holder.iv_img);
+    }
+    @Override
+    public int getItemCount() {
+        return imagesListBeans.size();
+    }
+
+    public class SelectedPicViewHolder extends RecyclerView.ViewHolder {
+
+        private ImageView iv_img;
+
+        public SelectedPicViewHolder(View itemView) {
+            super(itemView);
+            iv_img = itemView.findViewById(R.id.iv_img);
+
+        }
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/statusbar/StatusBarUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/statusbar/StatusBarUtils.java	(date 1575452424958)
+++ app/src/main/java/com/guansu/management/wigdet/statusbar/StatusBarUtils.java	(date 1575452424958)
@@ -0,0 +1,238 @@
+package com.guansu.management.wigdet.statusbar;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Color;
+import android.os.Build;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+
+import androidx.annotation.ColorInt;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.UUID;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class StatusBarUtils {
+
+    public static boolean supportTransparentStatusBar() {
+        return OSUtils.isMiui()
+                || OSUtils.isFlyme()
+                || (OSUtils.isOppo() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
+                || Build.VERSION.SDK_INT >= Build.VERSION_CODES.M;
+    }
+
+    /**
+     * 设置状态栏透明
+     *
+     * @param window
+     */
+    public static void transparentStatusBar(Window window) {
+        if (OSUtils.isMiui() || OSUtils.isFlyme()) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                transparentStatusBarAbove21(window);
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+                window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
+            }
+        } else if ((OSUtils.isOppo() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)) {
+            transparentStatusBarAbove21(window);
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            transparentStatusBarAbove21(window);
+        }
+    }
+
+    @TargetApi(21)
+    private static void transparentStatusBarAbove21(Window window) {
+        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
+        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
+        window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
+                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
+        window.setStatusBarColor(Color.TRANSPARENT);
+    }
+
+    /**
+     * 设置状态栏图标白色主题
+     *
+     * @param window
+     */
+    public static void setLightMode(Window window) {
+        if (OSUtils.isMiui()) {
+            setMIUIStatusBarDarkMode(window, false);
+        } else if (OSUtils.isFlyme()) {
+            setFlymeStatusBarDarkMode(window, false);
+        } else if (OSUtils.isOppo()) {
+            setOppoStatusBarDarkMode(window, false);
+        } else {
+            setStatusBarDarkMode(window, false);
+        }
+    }
+
+    /**
+     * 设置状态栏图片黑色主题
+     *
+     * @param window
+     */
+    public static void setDarkMode(Window window) {
+        if (OSUtils.isMiui()) {
+            setMIUIStatusBarDarkMode(window, true);
+        } else if (OSUtils.isFlyme()) {
+            setFlymeStatusBarDarkMode(window, true);
+        } else if (OSUtils.isOppo()) {
+            setOppoStatusBarDarkMode(window, true);
+        } else {
+            setStatusBarDarkMode(window, true);
+        }
+    }
+
+    private static void setStatusBarDarkMode(Window window, boolean darkMode) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            if (darkMode) {
+                window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
+            } else {
+                window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
+            }
+        }
+    }
+
+    private static void setMIUIStatusBarDarkMode(Window window, boolean darkMode) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            Class<? extends Window> clazz = window.getClass();
+            try {
+                Class<?> layoutParams = Class.forName("android.view.MiuiWindowManager$LayoutParams");
+                Field field = layoutParams.getField("EXTRA_FLAG_STATUS_BAR_DARK_MODE");
+                int darkModeFlag = field.getInt(layoutParams);
+                Method extraFlagField = clazz.getMethod("setExtraFlags", int.class, int.class);
+                extraFlagField.invoke(window, darkMode ? darkModeFlag : 0, darkModeFlag);
+            } catch (Exception e) {
+            }
+        }
+        setStatusBarDarkMode(window, darkMode);
+    }
+
+    private static void setFlymeStatusBarDarkMode(Window window, boolean darkMode) {
+        FlymeStatusBarUtils.setStatusBarDarkIcon(window, darkMode);
+    }
+
+    private static final int SYSTEM_UI_FLAG_OP_STATUS_BAR_TINT = 0x00000010;
+
+    private static void setOppoStatusBarDarkMode(Window window, boolean darkMode) {
+        int vis = window.getDecorView().getSystemUiVisibility();
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            if (darkMode) {
+                vis |= View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
+            } else {
+                vis &= ~View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
+            }
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            if (darkMode) {
+                vis |= SYSTEM_UI_FLAG_OP_STATUS_BAR_TINT;
+            } else {
+                vis &= ~SYSTEM_UI_FLAG_OP_STATUS_BAR_TINT;
+            }
+        }
+        window.getDecorView().setSystemUiVisibility(vis);
+    }
+
+    /**
+     * 设置状态栏颜色和透明度
+     *
+     * @param window
+     * @param color
+     * @param alpha
+     */
+    public static void setStatusBarColor(Window window, @ColorInt int color, int alpha) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            window.setStatusBarColor(calculateStatusColor(color, alpha));
+        }
+    }
+
+    /**
+     * 计算状态栏颜色
+     *
+     * @param color color值
+     * @param alpha alpha值
+     * @return 最终的状态栏颜色
+     */
+    private static int calculateStatusColor(@ColorInt int color, int alpha) {
+        if (alpha == 0) {
+            return color;
+        }
+        float a = 1 - alpha / 255f;
+        int red = color >> 16 & 0xff;
+        int green = color >> 8 & 0xff;
+        int blue = color & 0xff;
+        red = (int) (red * a + 0.5);
+        green = (int) (green * a + 0.5);
+        blue = (int) (blue * a + 0.5);
+        return 0xff << 24 | red << 16 | green << 8 | blue;
+    }
+
+    /**
+     * 获取状态栏高度
+     *
+     * @param context
+     * @return
+     */
+    public static int getStatusBarHeight(Context context) {
+        int resourceId = context.getResources().getIdentifier("status_bar_height", "dimen", "android");
+        return context.getResources().getDimensionPixelSize(resourceId);
+    }
+
+    /**
+     * 获取导航栏高度
+     *
+     * @param context
+     * @return
+     */
+    public static int getNavigationBarHeight(Context context) {
+        int resourceId = context.getResources().getIdentifier("navigation_bar_height", "dimen", "android");
+        return context.getResources().getDimensionPixelSize(resourceId);
+    }
+
+    /**
+     * 检测是否有虚拟导航栏
+     *
+     * @param context
+     * @return
+     */
+    public static boolean checkDeviceHasNavigationBar(Context context) {
+        boolean hasNavigationBar = false;
+        Resources rs = context.getResources();
+        int id = rs.getIdentifier("config_showNavigationBar", "bool", "android");
+        if (id > 0) {
+            hasNavigationBar = rs.getBoolean(id);
+        }
+        try {
+            Class systemPropertiesClass = Class.forName("android.os.SystemProperties");
+            Method m = systemPropertiesClass.getMethod("get", String.class);
+            String navBarOverride = (String) m.invoke(systemPropertiesClass, "qemu.hw.mainkeys");
+            if ("1".equals(navBarOverride)) {
+                hasNavigationBar = false;
+            } else if ("0".equals(navBarOverride)) {
+                hasNavigationBar = true;
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return hasNavigationBar;
+    }
+
+    /**
+     * 计算View Id
+     *
+     * @return
+     */
+    public static int generateViewId() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            return View.generateViewId();
+        } else {
+            return UUID.randomUUID().hashCode();
+        }
+    }
+}
Index: app/src/main/java/com/guansu/management/utils/OrderInfoUtil2_0.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/utils/OrderInfoUtil2_0.java	(date 1577073939846)
+++ app/src/main/java/com/guansu/management/utils/OrderInfoUtil2_0.java	(date 1577073939846)
@@ -0,0 +1,197 @@
+package com.guansu.management.utils;
+
+import android.util.Log;
+
+import com.guansu.management.paymentmoney.SignUtils;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Random;
+
+/**
+ * 2.0 订单串本地签名逻辑
+ * 注意：本 Demo 仅作为展示用途，实际项目中不能将 RSA_PRIVATE 和签名逻辑放在客户端进行！
+ */
+
+public class OrderInfoUtil2_0 {
+
+	/**
+	 * 构造授权参数列表
+	 *
+	 * @param pid
+	 * @param app_id
+	 * @param target_id
+	 * @return
+	 */
+	public static Map<String, String> buildAuthInfoMap(String pid, String app_id, String target_id, boolean rsa2) {
+		Map<String, String> keyValues = new HashMap<String, String>();
+
+		// 商户签约拿到的app_id，如：2013081700024223
+		keyValues.put("app_id", app_id);
+
+		// 商户签约拿到的pid，如：2088102123816631
+		keyValues.put("pid", pid);
+
+		// 服务接口名称， 固定值
+		keyValues.put("apiname", "com.alipay.account.auth");
+
+		// 服务接口名称， 固定值
+		keyValues.put("methodname", "alipay.open.auth.sdk.code.get");
+
+		// 商户类型标识， 固定值
+		keyValues.put("app_name", "mc");
+
+		// 业务类型， 固定值
+		keyValues.put("biz_type", "openservice");
+
+		// 产品码， 固定值
+		keyValues.put("product_id", "APP_FAST_LOGIN");
+
+		// 授权范围， 固定值
+		keyValues.put("scope", "kuaijie");
+
+		// 商户唯一标识，如：kkkkk091125
+		keyValues.put("target_id", target_id);
+
+		// 授权类型， 固定值
+		keyValues.put("auth_type", "AUTHACCOUNT");
+
+		// 签名类型
+		keyValues.put("sign_type", rsa2 ? "RSA2" : "RSA");
+
+		return keyValues;
+	}
+
+	/**
+	 * 构造支付订单参数列表
+	 */
+	public static Map<String, String> buildOrderParamMap(String app_id, boolean rsa2) {
+		Map<String, String> keyValues = new HashMap<String, String>();
+
+		keyValues.put("app_id", app_id);
+
+		keyValues.put("biz_content", "{\"timeout_express\":\"30m\",\"product_code\":\"QUICK_MSECURITY_PAY\",\"total_amount\":\"0.01\",\"subject\":\"1\",\"body\":\"我是测试数据\",\"out_trade_no\":\"" + getOutTradeNo() +  "\"}");
+
+		keyValues.put("charset", "utf-8");
+
+		keyValues.put("method", "alipay.trade.app.pay");
+
+		keyValues.put("sign_type", rsa2 ? "RSA2" : "RSA");
+
+		keyValues.put("timestamp", "2019-12-23 16:55:53");
+
+		keyValues.put("version", "1.0");
+		Log.e("keyValues",keyValues.toString());
+
+		return keyValues;
+	}
+
+	/**
+	 * 构造支付订单参数信息
+	 *
+	 * @param map
+	 * 支付订单参数
+	 * @return
+	 */
+	public static String buildOrderParam(Map<String, String> map) {
+		List<String> keys = new ArrayList<String>(map.keySet());
+
+		StringBuilder sb = new StringBuilder();
+		for (int i = 0; i < keys.size() - 1; i++) {
+			String key = keys.get(i);
+			String value = map.get(key);
+			sb.append(buildKeyValue(key, value, true));
+			sb.append("&");
+		}
+
+		String tailKey = keys.get(keys.size() - 1);
+		String tailValue = map.get(tailKey);
+		sb.append(buildKeyValue(tailKey, tailValue, true));
+
+		return sb.toString();
+	}
+
+	/**
+	 * 拼接键值对
+	 *
+	 * @param key
+	 * @param value
+	 * @param isEncode
+	 * @return
+	 */
+	private static String buildKeyValue(String key, String value, boolean isEncode) {
+		StringBuilder sb = new StringBuilder();
+		sb.append(key);
+		sb.append("=");
+		if (isEncode) {
+			try {
+				sb.append(URLEncoder.encode(value, "UTF-8"));
+			} catch (UnsupportedEncodingException e) {
+				sb.append(value);
+			}
+		} else {
+			sb.append(value);
+		}
+		return sb.toString();
+	}
+
+	/**
+	 * 对支付参数信息进行签名
+	 *
+	 * @param map
+	 *            待签名授权信息
+	 *
+	 * @return
+	 */
+	public static String getSign(Map<String, String> map, String rsaKey, boolean rsa2) {
+		List<String> keys = new ArrayList<String>(map.keySet());
+		// key排序
+		Collections.sort(keys);
+
+		StringBuilder authInfo = new StringBuilder();
+		for (int i = 0; i < keys.size() - 1; i++) {
+			String key = keys.get(i);
+			String value = map.get(key);
+			authInfo.append(buildKeyValue(key, value, false));
+			authInfo.append("&");
+		}
+
+		String tailKey = keys.get(keys.size() - 1);
+		String tailValue = map.get(tailKey);
+		authInfo.append(buildKeyValue(tailKey, tailValue, false));
+
+		String oriSign = SignUtils.sign(authInfo.toString(), rsaKey, rsa2);
+		String encodedSign = "";
+
+		try {
+			encodedSign = URLEncoder.encode(oriSign, "UTF-8");
+		} catch (UnsupportedEncodingException e) {
+			e.printStackTrace();
+		}
+		return "sign=" + encodedSign;
+	}
+
+	/**
+	 * 要求外部订单号必须唯一。
+	 * @return
+	 */
+	private static String getOutTradeNo() {
+		SimpleDateFormat format = new SimpleDateFormat("MMddHHmmss", Locale.getDefault());
+		Date date = new Date();
+		String key = format.format(date);
+
+		Random r = new Random();
+		key = key + r.nextInt();
+		key = key.substring(0, 15);
+		return key;
+	}
+
+}
Index: app/src/main/java/com/guansu/management/wigdet/datepicker/PickerView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/datepicker/PickerView.java	(date 1575612867802)
+++ app/src/main/java/com/guansu/management/wigdet/datepicker/PickerView.java	(date 1575612867802)
@@ -0,0 +1,386 @@
+package com.guansu.management.wigdet.datepicker;
+
+import android.animation.ObjectAnimator;
+import android.animation.PropertyValuesHolder;
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Paint.Align;
+import android.graphics.Paint.Style;
+import android.os.Handler;
+import android.os.Message;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+
+
+import androidx.core.content.ContextCompat;
+
+import com.guansu.management.R;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Timer;
+import java.util.TimerTask;
+
+/**
+ * 说明：内容选择器，例如年月日、省市区等
+ * 作者：liuwan1992
+ * 添加时间：2016/9/28
+ * 修改人：liuwan1992
+ * 修改时间：2018/12/21
+ */
+public class PickerView extends View {
+
+    private Context mContext;
+
+    private Paint mPaint;
+    private int mLightColor, mDarkColor;
+    private float mHalfWidth, mHalfHeight, mQuarterHeight;
+    private float mMinTextSize, mTextSizeRange;
+    private float mTextSpacing, mHalfTextSpacing;
+
+    private float mScrollDistance;
+    private float mLastTouchY;
+    private List<String> mDataList = new ArrayList<>();
+    private int mSelectedIndex;
+    private boolean mCanScroll = true;
+    private boolean mCanScrollLoop = true;
+    private OnSelectListener mOnSelectListener;
+    private ObjectAnimator mScrollAnim;
+    private boolean mCanShowAnim = true;
+
+    private Timer mTimer = new Timer();
+    private TimerTask mTimerTask;
+    private Handler mHandler = new ScrollHandler(this);
+
+    /**
+     * 自动回滚到中间的速度
+     */
+    private static final float AUTO_SCROLL_SPEED = 10;
+
+    /**
+     * 透明度：最小 120，最大 255，极差 135
+     */
+    private static final int TEXT_ALPHA_MIN = 120;
+    private static final int TEXT_ALPHA_RANGE = 135;
+
+    /**
+     * 选择结果回调接口
+     */
+    public interface OnSelectListener {
+        void onSelect(View view, String selected);
+    }
+
+    private static class ScrollTimerTask extends TimerTask {
+        private WeakReference<Handler> mWeakHandler;
+
+        private ScrollTimerTask(Handler handler) {
+            mWeakHandler = new WeakReference<>(handler);
+        }
+
+        @Override
+        public void run() {
+            Handler handler = mWeakHandler.get();
+            if (handler == null) return;
+
+            handler.sendEmptyMessage(0);
+        }
+    }
+
+    private static class ScrollHandler extends Handler {
+        private WeakReference<PickerView> mWeakView;
+
+        private ScrollHandler(PickerView view) {
+            mWeakView = new WeakReference<>(view);
+        }
+
+        @Override
+        public void handleMessage(Message msg) {
+            PickerView view = mWeakView.get();
+            if (view == null) return;
+
+            view.keepScrolling();
+        }
+    }
+
+    public PickerView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        mContext = context;
+        initPaint();
+        mTimer = new Timer();
+    }
+
+    private void initPaint() {
+        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mPaint.setStyle(Style.FILL);
+        mPaint.setTextAlign(Align.CENTER);
+        mLightColor = ContextCompat.getColor(mContext, R.color.black);
+        mDarkColor = ContextCompat.getColor(mContext, R.color.black);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        mHalfWidth = getMeasuredWidth() / 2f;
+        int height = getMeasuredHeight();
+        mHalfHeight = height / 2f;
+        mQuarterHeight = height / 4f;
+        float maxTextSize = height / 7f;
+        mMinTextSize = maxTextSize / 2.2f;
+        mTextSizeRange = maxTextSize - mMinTextSize;
+        mTextSpacing = mMinTextSize * 2.8f;
+        mHalfTextSpacing = mTextSpacing / 2f;
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        if (mSelectedIndex >= mDataList.size()) return;
+
+        // 绘制选中的 text
+        drawText(canvas, mLightColor, mScrollDistance, mDataList.get(mSelectedIndex));
+
+        // 绘制选中上方的 text
+        for (int i = 1; i <= mSelectedIndex; i++) {
+            drawText(canvas, mDarkColor, mScrollDistance - i * mTextSpacing,
+                    mDataList.get(mSelectedIndex - i));
+        }
+
+        // 绘制选中下方的 text
+        int size = mDataList.size() - mSelectedIndex;
+        for (int i = 1; i < size; i++) {
+            drawText(canvas, mDarkColor, mScrollDistance + i * mTextSpacing,
+                    mDataList.get(mSelectedIndex + i));
+        }
+    }
+
+    private void drawText(Canvas canvas, int textColor, float offsetY, String text) {
+        if (TextUtils.isEmpty(text)) return;
+
+        float scale = 1 - (float) Math.pow(offsetY / mQuarterHeight, 2);
+        scale = scale < 0 ? 0 : scale;
+        mPaint.setTextSize(mMinTextSize + mTextSizeRange * scale);
+        mPaint.setColor(textColor);
+        mPaint.setAlpha(TEXT_ALPHA_MIN + (int) (TEXT_ALPHA_RANGE * scale));
+
+        // text 居中绘制，mHalfHeight + offsetY 是 text 的中心坐标
+        Paint.FontMetrics fm = mPaint.getFontMetrics();
+        float baseline = mHalfHeight + offsetY - (fm.top + fm.bottom) / 2f;
+        canvas.drawText(text, mHalfWidth, baseline, mPaint);
+    }
+
+    @Override
+    public boolean dispatchTouchEvent(MotionEvent event) {
+        return mCanScroll && super.dispatchTouchEvent(event);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        switch (event.getActionMasked()) {
+            case MotionEvent.ACTION_DOWN:
+                cancelTimerTask();
+                mLastTouchY = event.getY();
+                break;
+
+            case MotionEvent.ACTION_MOVE:
+                float offsetY = event.getY();
+                mScrollDistance += offsetY - mLastTouchY;
+                if (mScrollDistance > mHalfTextSpacing) {
+                    if (!mCanScrollLoop) {
+                        if (mSelectedIndex == 0) {
+                            mLastTouchY = offsetY;
+                            invalidate();
+                            break;
+                        } else {
+                            mSelectedIndex--;
+                        }
+                    } else {
+                        // 往下滑超过离开距离，将末尾元素移到首位
+                        moveTailToHead();
+                    }
+                    mScrollDistance -= mTextSpacing;
+                } else if (mScrollDistance < -mHalfTextSpacing) {
+                    if (!mCanScrollLoop) {
+                        if (mSelectedIndex == mDataList.size() - 1) {
+                            mLastTouchY = offsetY;
+                            invalidate();
+                            break;
+                        } else {
+                            mSelectedIndex++;
+                        }
+                    } else {
+                        // 往上滑超过离开距离，将首位元素移到末尾
+                        moveHeadToTail();
+                    }
+                    mScrollDistance += mTextSpacing;
+                }
+                mLastTouchY = offsetY;
+                invalidate();
+                break;
+
+            case MotionEvent.ACTION_UP:
+                // 抬起手后 mSelectedIndex 由当前位置滚动到中间选中位置
+                if (Math.abs(mScrollDistance) < 0.01) {
+                    mScrollDistance = 0;
+                    break;
+                }
+                cancelTimerTask();
+                mTimerTask = new ScrollTimerTask(mHandler);
+                mTimer.schedule(mTimerTask, 0, 10);
+                break;
+        }
+        return true;
+    }
+
+    private void cancelTimerTask() {
+        if (mTimerTask != null) {
+            mTimerTask.cancel();
+            mTimerTask = null;
+        }
+        if (mTimer != null) {
+            mTimer.purge();
+        }
+    }
+
+    private void moveTailToHead() {
+        if (!mCanScrollLoop || mDataList.isEmpty()) return;
+
+        String tail = mDataList.get(mDataList.size() - 1);
+        mDataList.remove(mDataList.size() - 1);
+        mDataList.add(0, tail);
+    }
+
+    private void moveHeadToTail() {
+        if (!mCanScrollLoop || mDataList.isEmpty()) return;
+
+        String head = mDataList.get(0);
+        mDataList.remove(0);
+        mDataList.add(head);
+    }
+
+    private void keepScrolling() {
+        if (Math.abs(mScrollDistance) < AUTO_SCROLL_SPEED) {
+            mScrollDistance = 0;
+            if (mTimerTask != null) {
+                cancelTimerTask();
+
+                if (mOnSelectListener != null && mSelectedIndex < mDataList.size()) {
+                    mOnSelectListener.onSelect(this, mDataList.get(mSelectedIndex));
+                }
+            }
+        } else if (mScrollDistance > 0) {
+            // 向下滚动
+            mScrollDistance -= AUTO_SCROLL_SPEED;
+        } else {
+            // 向上滚动
+            mScrollDistance += AUTO_SCROLL_SPEED;
+        }
+        invalidate();
+    }
+
+    /**
+     * 设置数据
+     */
+    public void setDataList(List<String> list) {
+        if (list == null || list.isEmpty()) return;
+
+        mDataList = list;
+        // 重置 mSelectedIndex，防止溢出
+        mSelectedIndex = 0;
+        invalidate();
+    }
+
+    /**
+     * 选择选中项
+     */
+    public void setSelected(int index) {
+        if (index >= mDataList.size()) return;
+
+        mSelectedIndex = index;
+        if (mCanScrollLoop) {
+            // 可循环滚动时，mSelectedIndex 值固定为 mDataList / 2
+            int position = mDataList.size() / 2 - mSelectedIndex;
+            if (position < 0) {
+                for (int i = 0; i < -position; i++) {
+                    moveHeadToTail();
+                    mSelectedIndex--;
+                }
+            } else if (position > 0) {
+                for (int i = 0; i < position; i++) {
+                    moveTailToHead();
+                    mSelectedIndex++;
+                }
+            }
+        }
+        invalidate();
+    }
+
+    /**
+     * 设置选择结果监听
+     */
+    public void setOnSelectListener(OnSelectListener listener) {
+        mOnSelectListener = listener;
+    }
+
+    /**
+     * 是否允许滚动
+     */
+    public void setCanScroll(boolean canScroll) {
+        mCanScroll = canScroll;
+    }
+
+    /**
+     * 是否允许循环滚动
+     */
+    public void setCanScrollLoop(boolean canLoop) {
+        mCanScrollLoop = canLoop;
+    }
+
+    /**
+     * 执行滚动动画
+     */
+    public void startAnim() {
+        if (!mCanShowAnim) return;
+
+        if (mScrollAnim == null) {
+            PropertyValuesHolder alpha = PropertyValuesHolder.ofFloat("alpha", 1f, 0f, 1f);
+            PropertyValuesHolder scaleX = PropertyValuesHolder.ofFloat("scaleX", 1f, 1.3f, 1f);
+            PropertyValuesHolder scaleY = PropertyValuesHolder.ofFloat("scaleY", 1f, 1.3f, 1f);
+            mScrollAnim = ObjectAnimator.ofPropertyValuesHolder(this, alpha, scaleX, scaleY).setDuration(200);
+        }
+
+        if (!mScrollAnim.isRunning()) {
+            mScrollAnim.start();
+        }
+    }
+
+    /**
+     * 是否允许滚动动画
+     */
+    public void setCanShowAnim(boolean canShowAnim) {
+        mCanShowAnim = canShowAnim;
+    }
+
+    /**
+     * 销毁资源
+     */
+    public void onDestroy() {
+        mOnSelectListener = null;
+        mHandler.removeCallbacksAndMessages(null);
+        if (mScrollAnim != null && mScrollAnim.isRunning()) {
+            mScrollAnim.cancel();
+        }
+        cancelTimerTask();
+        if (mTimer != null) {
+            mTimer.cancel();
+            mTimer = null;
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/fragment/message/DetailsMessageFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/message/DetailsMessageFragment.java	(date 1576554289960)
+++ app/src/main/java/com/guansu/management/fragment/message/DetailsMessageFragment.java	(date 1576554289960)
@@ -0,0 +1,43 @@
+package com.guansu.management.fragment.message;
+
+import android.os.Bundle;
+import android.view.View;
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+
+/**
+ * @author: dongyaoyao
+ */
+public class DetailsMessageFragment extends BaseFragment {
+
+    public static DetailsMessageFragment newInstance() {
+        Bundle args = new Bundle();
+        DetailsMessageFragment fragment = new DetailsMessageFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_details_message;
+    }
+
+    @Override
+    public void initView(View view) {
+        setTitle("消息详情");
+        mTitlebar.showStatusBar(true);
+        mTitlebar.setBackgroundResource(R.drawable.but_release);
+
+    }
+
+    @Override
+    public void bindEvent() {
+
+
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/recyclerview/OnItemClickListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/recyclerview/OnItemClickListener.java	(date 1575452424591)
+++ app/src/main/java/com/guansu/management/wigdet/recyclerview/OnItemClickListener.java	(date 1575452424591)
@@ -0,0 +1,12 @@
+package com.guansu.management.wigdet.recyclerview;
+
+import android.view.View;
+/**
+ *
+ * Created by dongyaoyao
+ */
+public interface OnItemClickListener {
+    void onItemClick(View view, int position);
+
+    void onLongClick(View view, int position);
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/wigdet/recyclerview/RecyclerItemClickListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/recyclerview/RecyclerItemClickListener.java	(date 1575942601908)
+++ app/src/main/java/com/guansu/management/wigdet/recyclerview/RecyclerItemClickListener.java	(date 1575942601908)
@@ -0,0 +1,57 @@
+package com.guansu.management.wigdet.recyclerview;
+
+import android.content.Context;
+import android.view.GestureDetector;
+import android.view.MotionEvent;
+import android.view.View;
+
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.guansu.management.fragment.home.MessageFragment;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class RecyclerItemClickListener implements RecyclerView.OnItemTouchListener {
+    private View childView;
+    private RecyclerView touchView;
+
+    public RecyclerItemClickListener( final OnItemClickListener mListener) {
+        mGestureDetector = new GestureDetector(new GestureDetector.SimpleOnGestureListener() {
+            @Override
+            public boolean onSingleTapUp(MotionEvent ev) {
+                if (childView != null && mListener != null) {
+                    mListener.onItemClick(childView, touchView.getChildAdapterPosition(childView));
+                }
+                return true;
+            }
+            @Override
+            public void onLongPress(MotionEvent ev) {
+                if (childView != null && mListener != null) {
+                    mListener.onLongClick(childView, touchView.getChildAdapterPosition(childView));
+                }
+            }
+        });
+    }
+
+    GestureDetector mGestureDetector;
+
+    @Override
+    public boolean onInterceptTouchEvent(RecyclerView recyclerView, MotionEvent motionEvent) {
+        mGestureDetector.onTouchEvent(motionEvent);
+        childView = recyclerView.findChildViewUnder(motionEvent.getX(), motionEvent.getY());
+        touchView = recyclerView;
+        return false;
+    }
+
+    @Override
+    public void onTouchEvent(RecyclerView recyclerView, MotionEvent motionEvent) {
+
+    }
+
+    @Override
+    public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/recyclerview/DividerItemDecoration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/recyclerview/DividerItemDecoration.java	(date 1575452423115)
+++ app/src/main/java/com/guansu/management/wigdet/recyclerview/DividerItemDecoration.java	(date 1575452423115)
@@ -0,0 +1,302 @@
+package com.guansu.management.wigdet.recyclerview;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.view.View;
+
+import androidx.core.content.ContextCompat;
+import androidx.recyclerview.widget.GridLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+import androidx.recyclerview.widget.StaggeredGridLayoutManager;
+
+import com.guansu.management.R;
+import com.guansu.management.wigdet.utils.DimensUtils;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public class DividerItemDecoration extends RecyclerView.ItemDecoration {
+    private Paint mPaint;
+    //取名mDivider似乎更恰当
+    private Drawable mDivider;
+    //分割线高度，默认为1dp
+    private int mDividerHeight = 1;
+    //列表的方向
+    private int mOrientation;
+    //系统自带的参数
+    private static final int[] ATTRS = new int[]{android.R.attr.listDivider};
+    //水平
+    public static final int HORIZONTAL_LINE = RecyclerView.HORIZONTAL;
+    //垂直
+    public static final int VERTICAL_LINE = RecyclerView.VERTICAL;
+    //水平+垂直
+    public static final int BOTH_SET = 2;
+
+
+    /**
+     * 默认分割线：高度为1px，颜色为灰色
+     *
+     * @param context     上下文
+     * @param orientation 列表方向
+     */
+    public DividerItemDecoration(Context context, int orientation) {
+        this(context, orientation, 1, R.color.view_line);
+    }
+
+    /**
+     * 自定义分割线
+     *
+     * @param context     上下文
+     * @param orientation 列表方向
+     * @param drawableId  分割线图片
+     */
+    public DividerItemDecoration(Context context, int orientation, int drawableId) {
+        this.setOrientation(orientation);
+        //旧的getDrawable方法弃用了，这个是新的
+        mDivider = ContextCompat.getDrawable(context, drawableId);
+        mDividerHeight = mDivider.getIntrinsicHeight();
+    }
+
+    /**
+     * 自定义分割线
+     *
+     * @param context       上下文
+     * @param orientation   列表方向
+     * @param dividerHeight 分割线高度
+     * @param dividerColor  分割线颜色
+     */
+    public DividerItemDecoration(Context context, int orientation,
+                                 int dividerHeight, int dividerColor) {
+        this.setOrientation(orientation);
+        mDividerHeight = DimensUtils.dip2px(context, dividerHeight);
+        //抗锯齿画笔
+        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        mPaint.setColor(ContextCompat.getColor(context, dividerColor));
+        //填满颜色
+        mPaint.setStyle(Paint.Style.FILL);
+    }
+
+    /**
+     * 设置方向
+     *
+     * @param orientation
+     */
+    public void setOrientation(int orientation) {
+        if (orientation < 0 || orientation > 2)
+            throw new IllegalArgumentException("invalid orientation");
+        mOrientation = orientation;
+    }
+
+
+    /**
+     * 绘制分割线之后,需要留出一个外边框,就是说item之间的间距要换一下
+     *
+     * @param outRect outRect.set(0, 0, 0, 0);的四个参数理解成margin就好了
+     * @param view    视图
+     * @param parent  父级view
+     * @param state
+     */
+    @Override
+    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
+        //下面super...代码其实调用的就是那个过时的getItemOffsets,也就是说这个方法体内容也可以通通移到那个过时的getItemOffsets中
+        super.getItemOffsets(outRect, view, parent, state);
+        //获取layoutParams参数
+        RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) view.getLayoutParams();
+        //当前位置
+        int itemPosition = layoutParams.getViewLayoutPosition();
+        //ItemView数量
+        int childCount = parent.getAdapter().getItemCount();
+        switch (mOrientation) {
+            case BOTH_SET:
+                //获取Layout的相关参数
+                int spanCount = this.getSpanCount(parent);
+                if (isLastRaw(parent, itemPosition, spanCount, childCount)) {
+                    // 如果是最后一行，则不需要绘制底部
+                    outRect.set(0, 0, mDividerHeight, 0);
+                } else if (isLastColum(parent, itemPosition, spanCount, childCount)) {
+                    // 如果是最后一列，则不需要绘制右边
+                    outRect.set(0, 0, 0, mDividerHeight);
+                } else {
+                    outRect.set(0, 0, mDividerHeight, mDividerHeight);
+                }
+                break;
+            case VERTICAL_LINE:
+                childCount -= 1;
+                //水平布局右侧留Margin,如果是最后一列,就不要留Margin了
+                outRect.set(0, 0, (itemPosition != childCount) ? mDividerHeight : 0, 0);
+                break;
+            case HORIZONTAL_LINE:
+                childCount -= 1;
+                //垂直布局底部留边，最后一行不留
+                outRect.set(0, 0, 0, (itemPosition != childCount) ? mDividerHeight : 0);
+                break;
+        }
+    }
+
+    /**
+     * 绘制分割线
+     *
+     * @param c
+     * @param parent
+     * @param state
+     */
+    @Override
+    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
+        super.onDraw(c, parent, state);
+        if (mOrientation == VERTICAL_LINE) {
+            drawVertical(c, parent);
+        } else if (mOrientation == HORIZONTAL_LINE) {
+            drawHorizontal(c, parent);
+        } else {
+            drawHorizontal(c, parent);
+            drawVertical(c, parent);
+        }
+    }
+
+    /**
+     * 绘制横向 item 分割线
+     *
+     * @param canvas 画布
+     * @param parent 父容器
+     */
+    private void drawHorizontal(Canvas canvas, RecyclerView parent) {
+        final int x = parent.getPaddingLeft();
+        final int width = parent.getMeasuredWidth() - parent.getPaddingRight();
+        //getChildCount()(ViewGroup.getChildCount) 返回的是显示层面上的“所包含的子 View 个数”。
+        final int childSize = parent.getChildCount();
+        for (int i = 0; i < childSize; i++) {
+            final View child = parent.getChildAt(i);
+            RecyclerView.LayoutParams layoutParams =
+                    (RecyclerView.LayoutParams) child.getLayoutParams();
+            //item底部的Y轴坐标+margin值
+            final int y = child.getBottom() + layoutParams.bottomMargin;
+            final int height = y + mDividerHeight;
+            if (mDivider != null) {
+                //setBounds(x,y,width,height); x:组件在容器X轴上的起点 y:组件在容器Y轴上的起点
+                // width:组件的长度 height:组件的高度
+                mDivider.setBounds(x, y, width, height);
+                mDivider.draw(canvas);
+            }
+            if (mPaint != null) {
+                canvas.drawRect(x, y, width, height, mPaint);
+            }
+        }
+    }
+
+    /**
+     * 绘制纵向 item 分割线
+     *
+     * @param canvas
+     * @param parent
+     */
+    private void drawVertical(Canvas canvas, RecyclerView parent) {
+        final int top = parent.getPaddingTop();
+        final int bottom = parent.getMeasuredHeight() - parent.getPaddingBottom();
+        final int childSize = parent.getChildCount();
+        for (int i = 0; i < childSize; i++) {
+            final View child = parent.getChildAt(i);
+            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();
+            final int left = child.getRight() + layoutParams.rightMargin;
+            final int right = left + mDividerHeight;
+            if (mDivider != null) {
+                mDivider.setBounds(left, top, right, bottom);
+                mDivider.draw(canvas);
+            }
+            if (mPaint != null) {
+                canvas.drawRect(left, top, right, bottom, mPaint);
+            }
+        }
+    }
+
+
+    /**
+     * 获取列数
+     *
+     * @param parent
+     * @return
+     */
+    private int getSpanCount(RecyclerView parent) {
+        int spanCount = -1;
+        RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();
+        if (layoutManager instanceof GridLayoutManager) {
+            spanCount = ((GridLayoutManager) layoutManager).getSpanCount();
+        } else if (layoutManager instanceof StaggeredGridLayoutManager) {
+            spanCount = ((StaggeredGridLayoutManager) layoutManager)
+                    .getSpanCount();
+        }
+        return spanCount;
+    }
+
+
+    private boolean isLastColum(RecyclerView parent, int pos, int spanCount,
+                                int childCount) {
+        RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();
+        if (layoutManager instanceof GridLayoutManager) {
+            int orientation = ((GridLayoutManager) layoutManager)
+                    .getOrientation();
+            if (orientation == StaggeredGridLayoutManager.VERTICAL) {
+                // 如果是最后一列，则不需要绘制右边
+                if ((pos + 1) % spanCount == 0)
+                    return true;
+            } else {
+                childCount = childCount - childCount % spanCount;
+                // 如果是最后一列，则不需要绘制右边
+                if (pos >= childCount)
+                    return true;
+            }
+        } else if (layoutManager instanceof StaggeredGridLayoutManager) {
+            int orientation = ((StaggeredGridLayoutManager) layoutManager)
+                    .getOrientation();
+            if (orientation == StaggeredGridLayoutManager.VERTICAL) {
+                // 如果是最后一列，则不需要绘制右边
+                if ((pos + 1) % spanCount == 0)
+                    return true;
+            } else {
+                childCount = childCount - childCount % spanCount;
+                // 如果是最后一列，则不需要绘制右边
+                if (pos >= childCount)
+                    return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean isLastRaw(RecyclerView parent, int pos, int spanCount,
+                              int childCount) {
+        int orientation;
+        RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();
+        if (layoutManager instanceof GridLayoutManager) {
+            childCount = childCount - childCount % spanCount;
+            orientation = ((GridLayoutManager) layoutManager)
+                    .getOrientation();
+            if (orientation == StaggeredGridLayoutManager.VERTICAL) {
+                // 如果是最后一行，则不需要绘制底部
+                childCount = childCount - childCount % spanCount;
+                if (pos >= childCount)
+                    return true;
+            } else {// StaggeredGridLayoutManager 横向滚动
+                // 如果是最后一行，则不需要绘制底部
+                if ((pos + 1) % spanCount == 0)
+                    return true;
+            }
+        } else if (layoutManager instanceof StaggeredGridLayoutManager) {
+            orientation = ((StaggeredGridLayoutManager) layoutManager)
+                    .getOrientation();
+            if (orientation == StaggeredGridLayoutManager.VERTICAL) {
+                // 如果是最后一行，则不需要绘制底部
+                childCount = childCount - childCount % spanCount;
+                if (pos >= childCount)
+                    return true;
+            } else {// StaggeredGridLayoutManager 横向滚动
+                // 如果是最后一行，则不需要绘制底部
+                if ((pos + 1) % spanCount == 0)
+                    return true;
+            }
+        }
+        return false;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/wigdet/recyclerview/EndLessOnScrollListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/recyclerview/EndLessOnScrollListener.java	(date 1577092540540)
+++ app/src/main/java/com/guansu/management/wigdet/recyclerview/EndLessOnScrollListener.java	(date 1577092540540)
@@ -0,0 +1,72 @@
+package com.guansu.management.wigdet.recyclerview;
+
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+/**
+ * Created by dongyaoyao
+ */
+public abstract class EndLessOnScrollListener extends RecyclerView.OnScrollListener {
+
+    //声明一个LinearLayoutManager
+    private LinearLayoutManager mLinearLayoutManager;
+
+    //当前页，从1开始
+    private int currentPage = 1;
+    //已经加载出来的Item的数量
+    private int totalItemCount;
+
+    //主要用来存储上一个totalItemCount
+    private int previousTotal = 0;
+
+    //在屏幕上可见的item数量
+    private int visibleItemCount;
+
+    //在屏幕可见的Item中的第一个
+    private int firstVisibleItem;
+
+    //是否正在上拉数据
+    private boolean loading = true;
+    private boolean more = true;
+
+
+    public EndLessOnScrollListener(LinearLayoutManager linearLayoutManager) {
+        this.mLinearLayoutManager = linearLayoutManager;
+    }
+
+    @Override
+    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
+        super.onScrolled(recyclerView, dx, dy);
+        visibleItemCount = recyclerView.getChildCount();
+        totalItemCount = mLinearLayoutManager.getItemCount();
+        firstVisibleItem = mLinearLayoutManager.findFirstVisibleItemPosition();
+        if (loading) {
+            if (totalItemCount > previousTotal) {
+                //说明数据已经加载结束
+                loading = false;
+                previousTotal = totalItemCount;
+            }
+        }
+        if (!loading && firstVisibleItem != 0 && more && totalItemCount - visibleItemCount <= firstVisibleItem) {
+            currentPage++;
+            onLoadMore(currentPage);
+            loading = true;
+        }
+    }
+
+    public void refresh() {
+        currentPage = 1;
+        previousTotal = 0;
+        setMore(true);
+    }
+
+    public void setMore(boolean more) {
+        this.more = more;
+    }
+
+    /**
+     * 提供一个抽闲方法，在Activity中监听到这个EndLessOnScrollListener
+     * 并且实现这个方法
+     */
+    public abstract void onLoadMore(int currentPage);
+}
Index: app/src/main/java/com/guansu/management/wigdet/customimageview/DefinedCircleView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/customimageview/DefinedCircleView.java	(date 1575452423703)
+++ app/src/main/java/com/guansu/management/wigdet/customimageview/DefinedCircleView.java	(date 1575452423703)
@@ -0,0 +1,105 @@
+package com.guansu.management.wigdet.customimageview;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.Rect;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+
+import androidx.appcompat.widget.AppCompatImageView;
+
+import io.reactivex.annotations.Nullable;
+
+
+/**
+ * Created by Cai_yn on 2018/4/14.
+ * 自定义圆形头像
+ */
+
+public class DefinedCircleView extends AppCompatImageView {
+
+    private Paint paint = new Paint();
+
+    public DefinedCircleView(Context context) {
+        super(context);
+    }
+
+    public DefinedCircleView(Context context, @Nullable AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public DefinedCircleView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+    }
+
+    //将头像按比例缩放
+    private Bitmap scaleBitmap(Bitmap bitmap){
+        int width = getWidth();
+        //一定要强转成float 不然有可能由于精度不够 出现 scale为0 的错误
+        float scale = (float)width/(float)bitmap.getWidth();
+        Matrix matrix = new Matrix();
+        matrix.postScale(scale, scale);
+        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
+
+    }
+
+    //将原始图像裁剪成正方形
+    private Bitmap dealRawBitmap(Bitmap bitmap){
+        int width = bitmap.getWidth();
+        int height = bitmap.getHeight();
+        //获取宽度
+        int minWidth = width > height ?
+
+                height:width ;
+        //计算正方形的范围
+        int leftTopX = (width - minWidth)/2;
+        int leftTopY = (height - minWidth)/2;
+        //裁剪成正方形
+        Bitmap newBitmap = Bitmap.createBitmap(bitmap,leftTopX,leftTopY,minWidth,minWidth,null,false);
+        return  scaleBitmap(newBitmap);
+    }
+    @Override
+    protected void onDraw(Canvas canvas) {
+        Drawable drawable = getDrawable();
+        if (null != drawable) {
+            Bitmap rawBitmap =((BitmapDrawable)drawable).getBitmap();
+
+            //处理Bitmap 转成正方形
+            Bitmap newBitmap = dealRawBitmap(rawBitmap);
+            //将newBitmap 转换成圆形
+            Bitmap circleBitmap = toRoundCorner(newBitmap, 14);
+
+            final Rect rect = new Rect(0, 0, circleBitmap.getWidth(), circleBitmap.getHeight());
+            paint.reset();
+            //绘制到画布上
+            canvas.drawBitmap(circleBitmap, rect, rect, paint);
+        } else {
+            super.onDraw(canvas);
+        }
+    }
+
+    private Bitmap toRoundCorner(Bitmap bitmap, int pixels) {
+
+        //指定为 ARGB_4444 能够减小图片大小
+        Bitmap output = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_4444);
+        Canvas canvas = new Canvas(output);
+
+        final int color = 0xff424242;
+        final Rect rect = new Rect(0, 0,bitmap.getWidth(), bitmap.getHeight());
+        paint.setAntiAlias(true);
+        canvas.drawARGB(0, 0, 0, 0);
+        paint.setColor(color);
+        int x = bitmap.getWidth();
+        canvas.drawCircle(x / 2, x / 2, x / 2, paint);
+        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
+        canvas.drawBitmap(bitmap, rect, rect, paint);
+        return output;
+    }
+
+}
Index: app/src/main/java/com/guansu/management/fragment/release/DetailsNextFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/release/DetailsNextFragment.java	(date 1577256068597)
+++ app/src/main/java/com/guansu/management/fragment/release/DetailsNextFragment.java	(date 1577256068597)
@@ -0,0 +1,330 @@
+package com.guansu.management.fragment.release;
+import android.app.Dialog;
+import android.graphics.Color;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+import android.widget.GridLayout;
+import android.widget.ImageButton;
+import android.widget.TextView;
+import androidx.annotation.RequiresApi;
+import com.google.gson.Gson;
+import com.guansu.management.R;
+import com.guansu.management.activity.CheckPermissionsActivity;
+import com.guansu.management.api.MyObserve;
+import com.guansu.management.bean.FileBean;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.common.UserSharedPreferencesUtils;
+import com.guansu.management.config.Constants;
+import com.guansu.management.config.HttpConstants;
+import com.guansu.management.fragment.release.data.CalendarList;
+import com.guansu.management.model.HomeModellml;
+import com.guansu.management.model.ReleaseModellml;
+import com.guansu.management.wigdet.datepicker.PickValueView;
+import com.lljjcoder.citypickerview.widget.CityPicker;
+import com.lzy.imagepicker.bean.ImageItem;
+import com.lzy.okgo.OkGo;
+import com.lzy.okgo.callback.StringCallback;
+import com.lzy.okgo.model.HttpParams;
+import com.lzy.okgo.model.Response;
+import org.json.JSONArray;
+import org.json.JSONException;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import butterknife.BindView;
+/**
+ * @author: dongyaoyao
+ */
+public class  DetailsNextFragment extends CheckPermissionsActivity implements PickValueView.onSelectedChangeListener {
+    @BindView(R.id.tvTime)
+    TextView tvTime;
+    @BindView(R.id.imageBlack)
+    ImageButton imageBlack;
+    @BindView(R.id.textViewTitle)
+    TextView textViewTitle;
+    @BindView(R.id.tvPhoto)
+    TextView tvPhoto;
+    @BindView(R.id.tvContent)
+    TextView tvContent;
+    @BindView(R.id.textViewAddress)
+    TextView textViewAddress;
+    @BindView(R.id.textViewSetAddress)
+    EditText textViewSetAddress;
+    @BindView(R.id.tvNumber)
+    TextView tvNumber;
+    @BindView(R.id.tvName)
+    TextView tvName;
+    @BindView(R.id.textViewSo)
+    TextView textViewSo;
+    @BindView(R.id.checkBoxSo)
+    CheckBox checkBoxSo;
+    @BindView(R.id.tvLabel)
+    TextView tvLabel;
+    @BindView(R.id.editTextLabel)
+    EditText editTextLabel;
+    @BindView(R.id.butAddition)
+    Button butAddition;
+    @BindView(R.id.gridLayoutLevel)
+    GridLayout gridLayoutLevel;
+    @BindView(R.id.butRelease)
+    Button butRelease;
+    @BindView(R.id.textViewStartEndTime)
+    TextView textViewStartEndTime;
+    @BindView(R.id.textViewNumber)
+    TextView textViewNumber;
+    @BindView(R.id.tvSetAddress)
+    TextView tvSetAddress;
+    private Dialog dialog;
+    private CalendarList calendarList;
+    private String selectedStr;
+    String userId,visible,startTime,endTime;
+    List<String> tage=new ArrayList<>();
+    private String lat, lng, province,city,district;
+    public static DetailsNextFragment newInstance(ArrayList<ImageItem> selImageList, String context) {
+        Bundle args = new Bundle();
+        DetailsNextFragment fragment = new DetailsNextFragment();
+        args.putString(Constants.KEY_TITLE, context);
+        args.putParcelableArrayList(Constants.KEY_URL, selImageList);
+        fragment.setArguments(args);
+        return fragment;
+    }
+    @Override
+    protected void locationResult(String longitude, String latitude, String address
+            , String city, String province, String district) {
+        this.lng = longitude;
+        this.lat = latitude;
+        this.province = province;
+        this.city = city;
+        this.district = district;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_details;
+    }
+    @Override
+    public void initView(View view) {
+        hideTitle();
+        initApi();
+        mTitlebar.showStatusBar(true);
+        mTitlebar.setBackgroundResource(R.drawable.but_release);
+        mTitlebar.getLeftImageButton().setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                Bundle bundle = new Bundle();
+                bundle.putString("title", "0");
+                setFragmentResult(RESULT_OK, bundle);
+            }
+        });
+        showDialogTwo();
+        startLocation();
+}
+    @Override
+    public void bindEvent() {
+        UserSharedPreferencesUtils userSharedPreferencesUtils = new UserSharedPreferencesUtils(getContext());
+        userId = userSharedPreferencesUtils.getUserid();
+        checkBoxSo.setChecked(false);
+        //将adapter 添加到spinner中
+        textViewAddress.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                selectAddress();
+            }
+        });
+        tvTime.setOnClickListener(new OnClickListenerWrapper() {
+            @RequiresApi(api = Build.VERSION_CODES.N)
+            @Override
+            protected void onSingleClick(View v) {
+                dialog.show();
+            }
+        });
+        butAddition.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                if ("".equals(editTextLabel.getText().toString())) {
+                    showToast("请输入您要添加的标签");
+                } else {
+                    tage.add(editTextLabel.getText().toString()+",");
+                    layoutFilterItem(gridLayoutLevel, editTextLabel.getText().toString());
+                    editTextLabel.setText("");
+                }
+            }
+        });
+        calendarList.setOnDateSelected(new CalendarList.OnDateSelected() {
+            @Override
+            public void selected(String startDate, String endDate) {
+                startTime=startDate;
+                endTime=endDate;
+                textViewStartEndTime.setText(startDate + "-" + endDate);
+                dialog.dismiss();
+            }
+        });
+        imageBlack.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                getActivity().onBackPressed();//销毁自己
+            }
+        });
+
+        checkBoxSo.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView,
+                                         boolean isChecked) {
+                // TODO Auto-generated method stub
+                if(isChecked){
+                    textViewSo.setText(buttonView.getText()+"可见");
+                }else{
+                    textViewSo.setText(buttonView.getText()+"隐藏");
+                }
+            }
+        });
+        butRelease.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                if ("".equals(textViewStartEndTime.getText().toString())){
+                    showToast("请选择活动的开始/结束时间");
+                    return;
+                }
+                if ("".equals(textViewSetAddress.getText().toString())){
+                    showToast("请填写活动的详细地址");
+                    return;
+                }
+                if ("".equals(textViewNumber.getText().toString())){
+                    showToast("请选择参加活动的人数");
+                    return;
+                }
+                if ("".equals(tage.toString())){
+                    showToast("请增加活动标签");
+                    return;
+                }
+
+                showLoadingDialog("上传中……");
+                ArrayList<ImageItem> imageItems = getArguments().getParcelableArrayList(Constants.KEY_URL);
+                //圈子
+                final List<File> list = new ArrayList();
+                for (ImageItem imageItem : imageItems) {
+                    if (!imageItem.path.startsWith("http"))
+                        list.add(new File(imageItem.path));
+                }
+                HttpParams params = new HttpParams();
+                params.put("uid", userId);
+                OkGo.<String>post(HttpConstants.BASE_URL + HomeModellml.IMAGEUPLOADLIST)
+                        .tag(this)
+                        .isMultipart(true)
+                        .params(params)
+                        .addFileParams("file", list)
+                        .execute(new StringCallback() {
+                            @Override
+                            public void onSuccess(Response<String> response) {
+                                String body = response.body();
+                                Gson gson = new Gson();
+                                FileBean user = gson.fromJson(body, FileBean.class);
+                                getDataRelease(user.getData().getImageList());
+                            }
+                        });
+            }
+        });
+    }
+    private void getDataRelease(List<FileBean.DataBean.ImageListBean> imageList) {
+        Gson gson = new Gson();
+        String s = gson.toJson(imageList);
+        if (checkBoxSo.isChecked()){
+             visible="1";
+        }else {
+             visible="0";
+        }
+        try {
+            JSONArray jsonObject = new JSONArray(s);
+            new ReleaseModellml().user_activity_infosave(userId, getArguments().getString(Constants.KEY_TITLE),
+                    startTime,endTime
+                    ,textViewAddress.getText().toString(), textViewSetAddress.getText().toString(),
+                    textViewNumber.getText().toString(),visible,tage.toString(),lat,lng, jsonObject)
+                    .subscribe(new MyObserve<String>(this) {
+                        @Override
+                        protected void onSuccess(String activityDtoInfo) {
+                            Bundle bundle = new Bundle();
+                            bundle.putString("title", "1");
+                            setFragmentResult(RESULT_OK, bundle);
+                            getActivity().onBackPressed();//销毁自己
+                        }
+                    });
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+    }
+    private void layoutFilterItem(GridLayout gridLayoutLevel, String toString) {
+        View view = LayoutInflater.from(getContext()).inflate(R.layout.item_filter, gridLayoutLevel, false);
+        CheckBox mCheckBoxFilter = view.findViewById(R.id.checkBoxFilter);
+        mCheckBoxFilter.setChecked(false);
+        mCheckBoxFilter.setText(toString);
+        gridLayoutLevel.addView(view);
+    }
+    private void showDialogTwo() {
+        dialog = new Dialog(getContext(), R.style.BaseDialogStyle);
+        dialog.setContentView(R.layout.dialog_date);
+        calendarList = dialog.findViewById(R.id.calendarList);
+        dialog.setCanceledOnTouchOutside(false);
+        dialog.getWindow().setGravity(Gravity.CENTER);
+        Window w = dialog.getWindow();
+        WindowManager.LayoutParams lp = w.getAttributes();
+        lp.width = WindowManager.LayoutParams.MATCH_PARENT;
+        lp.height = WindowManager.LayoutParams.MATCH_PARENT;
+        dialog.onWindowAttributesChanged(lp);
+    }
+
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+
+    @Override
+    public void onSelected(PickValueView view, Object leftValue, Object middleValue, Object rightValue) {
+        selectedStr = (String) leftValue;
+    }
+    private void selectAddress() {
+        CityPicker cityPicker = new CityPicker.Builder(getContext())
+                .textSize(14)
+                .title("地址选择")
+                .titleBackgroundColor("#FFFFFF")
+                .confirTextColor("#696969")
+                .cancelTextColor("#696969")
+                .province(province)
+                .city(city)
+                .district(district)
+                .textColor(Color.parseColor("#000000"))
+                .provinceCyclic(true)
+                .cityCyclic(false)
+                .districtCyclic(false)
+                .visibleItemsCount(7)
+                .itemPadding(10)
+                .onlyShowProvinceAndCity(false)//false为三级联动，true为二级联动
+                .build();
+        cityPicker.show();
+        //监听方法，获取选择结果
+        cityPicker.setOnCityItemClickListener(new CityPicker.OnCityItemClickListener() {
+            @Override
+            public void onSelected(String... citySelected) {
+                //省份
+                String province = citySelected[0];
+                //城市
+                String city = citySelected[1];
+                //区县（如果设定了两级联动，那么该项返回空）
+                String district = citySelected[2];
+                //邮编
+                String code = citySelected[3];
+                //为TextView赋值
+                textViewAddress.setText(province.trim() + "-" + city.trim() + "-" + district.trim());
+            }
+        });
+    }
+}
Index: app/src/main/java/com/guansu/management/base/BaseActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/base/BaseActivity.java	(date 1577253955108)
+++ app/src/main/java/com/guansu/management/base/BaseActivity.java	(date 1577253955108)
@@ -0,0 +1,232 @@
+package com.guansu.management.base;
+
+import android.app.ProgressDialog;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.SystemClock;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.Toast;
+
+import com.guansu.management.R;
+import com.guansu.management.common.ActivityPageManager;
+import com.guansu.management.common.ReplaceViewHelper;
+import com.guansu.management.common.UserSharedPreferencesUtils;
+import com.guansu.management.fragment.LoginFragment;
+import com.guansu.management.wigdet.CommonTitleBar;
+
+import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.disposables.Disposable;
+import me.yokeyword.fragmentation.SupportActivity;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+public abstract class BaseActivity<T extends BasePresenter> extends SupportActivity
+        implements View.OnClickListener, BaseInterface {
+    /**
+     * 使用CompositeSubscription来持有所有的Subscriptions
+     */
+    protected CompositeDisposable mCompositeDisposable;
+    /**
+     * 子类页面布局的 根view
+     */
+    protected T presenter;
+
+    private ProgressDialog dialog;
+
+    public View mContentView;
+
+    private ReplaceViewHelper defaultReplaceViewHelper;
+    private Toast toast;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(onSetLayoutId());
+        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);//设置竖屏
+        //Activity管理
+        ActivityPageManager.getInstance().addActivity(this);
+        init();
+    }
+
+    public abstract int onSetLayoutId();
+
+    /**
+     * 初始化页面
+     */
+    public void init() {
+        defaultReplaceViewHelper = new ReplaceViewHelper(this);
+        initView();
+        bindEvent();
+    }
+
+    /**
+     * 初始化view
+     */
+    public abstract void initView();
+
+
+    /**
+     * 绑定事件
+     */
+    public abstract void bindEvent();
+
+
+    /**
+     * 创建相应的 presenter
+     */
+    public void createPresenter(T presenter) {
+        if (presenter != null) {
+            this.presenter = presenter;
+        }
+    }
+
+    public void setLoadingContentView(View mContentView) {
+        this.mContentView = mContentView;
+    }
+
+    /**
+     * 显示一个Toast信息
+     */
+    public void showToast(String content) {
+        if (toast == null) {
+            toast = Toast.makeText(this, content, Toast.LENGTH_SHORT);
+        } else {
+            toast.setText(content);
+        }
+        toast.show();
+    }
+
+    public void showLoadingDialog(String message) {
+        if (dialog == null) {
+            dialog = new ProgressDialog(this);
+            dialog.setCanceledOnTouchOutside(false);
+            dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
+        }
+        if (dialog.isShowing()) return;
+        dialog.setMessage(message);
+        dialog.show();
+    }
+
+    @Override
+    public void showLoadingDialog() {
+        showLoadingDialog("网络正在连接");
+    }
+
+    public void hideLoadingDialog() {
+        if (dialog != null && dialog.isShowing()) {
+            dialog.dismiss();
+        }
+    }
+
+    public void showLoadingPage() {
+        View view = LayoutInflater.from(this).inflate(R.layout.layout_loading, null);
+        defaultReplaceViewHelper.toReplaceView(mContentView, view);
+    }
+
+    public void showPage() {
+        defaultReplaceViewHelper.removeView();
+    }
+
+    public void showNoData() {
+    }
+
+    @Override
+    public void showError(Throwable e) {
+    }
+
+    @Override
+    public void showServiceError() {
+    }
+
+    @Override
+    public void showNetError() {
+    }
+
+
+    protected void retryloading() {
+
+    }
+
+
+    public void addDisposable(Disposable d) {
+        if (null != mCompositeDisposable) {
+            mCompositeDisposable.add(d);
+        } else {
+            presenter.addDisposable(d);
+        }
+
+    }
+
+    public void toLogin(String message) {
+        new UserSharedPreferencesUtils(this).clearSharedPreferences();
+        start(LoginFragment.newInstance());
+    }
+
+    /**
+     * 跳转页面
+     *
+     * @param clazz
+     */
+    public void skipAct(Class clazz) {
+        Intent intent = new Intent(this, clazz);
+        intent.putExtra("fromWhere", getClass().getSimpleName());
+        startActivity(intent);
+    }
+
+    public void skipAct(Class clazz, Bundle bundle) {
+        Intent intent = new Intent(this, clazz);
+        if (bundle != null) {
+            intent.putExtras(bundle);
+        }
+        intent.putExtra("fromWhere", getClass().getSimpleName());
+        startActivity(intent);
+    }
+
+    public void skipAct(Class clazz, Bundle bundle, int flags) {
+        Intent intent = new Intent(this, clazz);
+        if (bundle != null) {
+            intent.putExtras(bundle);
+        }
+        intent.putExtra("fromWhere", getClass().getSimpleName());
+        intent.setFlags(flags);
+        startActivity(intent);
+    }
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        ActivityPageManager.getInstance().removeActivity(this);
+        //一旦调用了 CompositeSubscription.unsubscribe()，这个CompositeSubscription对象就不可用了,
+        // 如果还想使用CompositeSubscription，就必须在创建一个新的对象了。
+        if (mCompositeDisposable != null) {
+            mCompositeDisposable.dispose();
+        }
+        //解绑 presenter
+        if (presenter != null) {
+            presenter.unsubscribe();
+            presenter = null;
+        }
+    }
+
+    public boolean isLogin() {
+        return !TextUtils.isEmpty(new UserSharedPreferencesUtils(this).getUserid());
+    }
+    private static final Handler HANDLER = new Handler(Looper.getMainLooper());
+
+    /**
+     * 在指定的时间执行
+     */
+    public final boolean postAtTime(Runnable r, long uptimeMillis) {
+        return HANDLER.postAtTime(r, this, uptimeMillis);
+    }
+
+    @Override
+    public void onPointerCaptureChanged(boolean hasCapture) {
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/base/BaseInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/base/BaseInterface.java	(date 1575452424344)
+++ app/src/main/java/com/guansu/management/base/BaseInterface.java	(date 1575452424344)
@@ -0,0 +1,38 @@
+package com.guansu.management.base;
+
+import io.reactivex.disposables.Disposable;
+
+/**
+ *
+ * Created by dongyaoyao
+ */
+
+public interface BaseInterface {
+
+    void showToast(String content);
+
+    void hideLoadingDialog();
+
+    void showLoadingDialog();
+
+    void showLoadingDialog(String message);
+
+    void showLoadingPage();
+
+    void showPage();
+
+    void showError(Throwable e);
+
+    void showServiceError();
+
+    void showNoData();
+
+    void showNetError();
+
+    void addDisposable(Disposable d);
+
+    //401 重新鉴权
+    void toLogin(String message);
+
+    boolean isLogin();
+}
Index: app/src/main/java/com/guansu/management/fragment/foot/FootAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/foot/FootAdapter.java	(date 1575774382969)
+++ app/src/main/java/com/guansu/management/fragment/foot/FootAdapter.java	(date 1575774382969)
@@ -0,0 +1,82 @@
+package com.guansu.management.fragment.foot;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.guansu.management.R;
+
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+/**
+ * @author: dongyaoyao
+ */
+public class FootAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+    private Context mcontext;
+   /* private int getGroupBeans() {
+        if (groupBeans != null) {
+            return groupBeans;
+        }
+        return null;
+    }*/
+
+    private int groupBeans;
+
+    public FootAdapter(Context mcontext, int groupBeans) {
+        this.mcontext = mcontext;
+        this.groupBeans = groupBeans;
+    }
+
+    @NonNull
+    @Override
+    public FootViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_foot, parent, false);
+        FootViewHolder myViewHolder = new FootViewHolder(view);
+
+        return myViewHolder;
+    }
+
+    @Override
+    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
+
+    }
+
+    @Override
+    public int getItemCount() {
+        return groupBeans;
+    }
+
+    public class FootViewHolder extends RecyclerView.ViewHolder {
+        @BindView(R.id.view)
+        View view;
+        @BindView(R.id.textViewAddress)
+        TextView textViewAddress;
+        @BindView(R.id.textViewTime)
+        TextView textViewTime;
+        @BindView(R.id.textViewCircle)
+        TextView textViewCircle;
+        public FootViewHolder(@NonNull View itemView) {
+            super(itemView);
+        }
+    }
+
+    /*  @Override
+      public int getItemCount() {
+          return groupBeans != null ? groupBeans.size() : 0;
+      }
+
+      public void setmList(List<UserInfo> rows) {
+          this.groupBeans = rows;
+          notifyDataSetChanged();
+      }
+      public void addmList(List<UserInfo> rows) {
+          groupBeans.addAll(rows);
+          notifyDataSetChanged();
+      }*/
+}
Index: app/src/main/java/com/guansu/management/fragment/release/data/CalendarList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/release/data/CalendarList.java	(date 1577181485363)
+++ app/src/main/java/com/guansu/management/fragment/release/data/CalendarList.java	(date 1577181485363)
@@ -0,0 +1,461 @@
+package com.guansu.management.fragment.release.data;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.GridLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.guansu.management.R;
+import com.guansu.management.common.OnClickListenerWrapper;
+
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * @date: $ $
+ * @author: dongyaoyao
+ */
+public class CalendarList extends FrameLayout {
+    RecyclerView recyclerView;
+    CalendarAdapter adapter;
+    TextView textViewFinish,textViewTime;
+    private DateBean startDate;//开始时间
+    private DateBean endDate;//结束时间
+    OnDateSelected onDateSelected;//选中监听
+    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
+
+    public CalendarList(Context context) {
+        super(context);
+        init(context);
+    }
+
+    public CalendarList(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context);
+    }
+
+    public CalendarList(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init(context);
+    }
+
+    private void init(Context context) {
+        addView(LayoutInflater.from(context).inflate(R.layout.item_calendar, this, false));
+        recyclerView = findViewById(R.id.recyclerView);
+        textViewFinish = findViewById(R.id.textViewFinish);
+        textViewTime = findViewById(R.id.textViewTime);
+        adapter = new CalendarAdapter();
+        GridLayoutManager gridLayoutManager = new GridLayoutManager(context, 7);
+        gridLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {
+            @Override
+            public int getSpanSize(int i) {
+                if (DateBean.item_type_month == adapter.data.get(i).getItemType()) {
+                    return 7;
+                } else {
+                    return 1;
+                }
+            }
+        });
+        recyclerView.setLayoutManager(gridLayoutManager);
+        recyclerView.setAdapter(adapter);
+        adapter.data.addAll(days("", ""));
+
+        MyItemD myItemD = new MyItemD();
+        recyclerView.addItemDecoration(myItemD);
+
+        adapter.setOnRecyclerviewItemClick(new CalendarAdapter.OnRecyclerviewItemClick() {
+            @Override
+            public void onItemClick(View v, int position) {
+                onClick(adapter.data.get(position));
+            }
+        });
+        textViewFinish.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                if (onDateSelected != null && startDate != null && endDate != null) {
+                    onDateSelected.selected(simpleDateFormat.format(startDate.getDate()), simpleDateFormat.format(endDate.getDate()));
+                }
+            }
+        });
+    }
+
+    private void onClick(DateBean dateBean) {
+        if (dateBean.getItemType() == DateBean.item_type_month || TextUtils.isEmpty(dateBean.getDay())) {
+            return;
+        }
+        //如果没有选中开始日期则此次操作选中开始日期
+        if (startDate == null) {
+            startDate = dateBean;
+            dateBean.setItemState(DateBean.ITEM_STATE_BEGIN_DATE);
+        } else if (endDate == null) {
+            //如果选中了开始日期但没有选中结束日期，本次操作选中结束日期
+            //如果当前点击的结束日期跟开始日期一致 则不做操作
+            if (startDate == dateBean) {
+
+            } else if (dateBean.getDate().getTime() < startDate.getDate().getTime()) {
+                //当前点选的日期小于当前选中的开始日期 则本次操作重新选中开始日期
+                startDate.setItemState(DateBean.ITEM_STATE_NORMAL);
+                startDate = dateBean;
+                startDate.setItemState(DateBean.ITEM_STATE_BEGIN_DATE);
+            } else {
+                //选中结束日期
+                endDate = dateBean;
+                endDate.setItemState(DateBean.ITEM_STATE_END_DATE);
+                setState();
+                textViewTime.setText("日期："+simpleDateFormat.format(startDate.getDate())+"-"+simpleDateFormat.format(endDate.getDate()));
+            }
+
+        } else if (startDate != null && endDate != null) {
+            //结束日期和开始日期都已选中
+            clearState();
+            //重新选择开始日期,结束日期清除
+            startDate.setItemState(DateBean.ITEM_STATE_NORMAL);
+            startDate = dateBean;
+            startDate.setItemState(DateBean.ITEM_STATE_BEGIN_DATE);
+
+            endDate.setItemState(DateBean.ITEM_STATE_NORMAL);
+            endDate = null;
+        }
+
+        adapter.notifyDataSetChanged();
+    }
+
+    //选中中间的日期
+    private void setState() {
+        if (endDate != null && startDate != null) {
+            int start = adapter.data.indexOf(startDate);
+            start += 1;
+            int end = adapter.data.indexOf(endDate);
+            for (; start < end; start++) {
+                DateBean dateBean = adapter.data.get(start);
+                if (!TextUtils.isEmpty(dateBean.getDay())) {
+                    dateBean.setItemState(DateBean.ITEM_STATE_SELECTED);
+                }
+            }
+        }
+    }
+
+    //取消选中状态
+    private void clearState() {
+        if (endDate != null && startDate != null) {
+            int start = adapter.data.indexOf(startDate);
+            start += 1;
+            int end = adapter.data.indexOf(endDate);
+            for (; start < end; start++) {
+                DateBean dateBean = adapter.data.get(start);
+                dateBean.setItemState(DateBean.ITEM_STATE_NORMAL);
+            }
+        }
+    }
+
+    //日历adapter
+    public static class CalendarAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+        ArrayList<DateBean> data = new ArrayList<>();
+        private CalendarAdapter.OnRecyclerviewItemClick onRecyclerviewItemClick;
+
+        public CalendarAdapter.OnRecyclerviewItemClick getOnRecyclerviewItemClick() {
+            return onRecyclerviewItemClick;
+        }
+
+        public void setOnRecyclerviewItemClick(CalendarAdapter.OnRecyclerviewItemClick onRecyclerviewItemClick) {
+            this.onRecyclerviewItemClick = onRecyclerviewItemClick;
+        }
+
+        @Override
+        public int getItemCount() {
+            return data.size();
+        }
+
+        @NonNull
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
+            if (i == DateBean.item_type_day) {
+                View rootView = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_day, viewGroup, false);
+
+                final CalendarAdapter.DayViewHolder dayViewHolder = new CalendarAdapter.DayViewHolder(rootView);
+                dayViewHolder.itemView.setOnClickListener(new OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        if (onRecyclerviewItemClick != null) {
+                            onRecyclerviewItemClick.onItemClick(v, dayViewHolder.getLayoutPosition());
+                        }
+                    }
+                });
+                return dayViewHolder;
+            } else if (i == DateBean.item_type_month) {
+                View rootView = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_month, viewGroup, false);
+                final CalendarAdapter.MonthViewHolder monthViewHolder = new CalendarAdapter.MonthViewHolder(rootView);
+                monthViewHolder.itemView.setOnClickListener(new OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        if (onRecyclerviewItemClick != null) {
+                            onRecyclerviewItemClick.onItemClick(v, monthViewHolder.getLayoutPosition());
+                        }
+                    }
+                });
+                return monthViewHolder;
+            }
+            return null;
+        }
+
+        @Override
+        public void onBindViewHolder(@NonNull RecyclerView.ViewHolder viewHolder, int i) {
+            if (viewHolder instanceof CalendarAdapter.MonthViewHolder) {
+                ((CalendarAdapter.MonthViewHolder) viewHolder).tv_month.setText(data.get(i).getMonthStr());
+            } else {
+                CalendarAdapter.DayViewHolder vh = ((CalendarAdapter.DayViewHolder) viewHolder);
+                vh.tv_day.setText(data.get(i).getDay());
+                vh.tv_check_in_check_out.setVisibility(View.GONE);
+                DateBean dateBean = data.get(i);
+
+                //设置item状态
+                if (dateBean.getItemState() == DateBean.ITEM_STATE_BEGIN_DATE || dateBean.getItemState() == DateBean.ITEM_STATE_END_DATE) {
+                    //开始日期或结束日期
+                    vh.itemView.setBackgroundColor(Color.parseColor("#ff6600"));
+                    vh.tv_day.setTextColor(Color.WHITE);
+                    vh.tv_check_in_check_out.setVisibility(View.VISIBLE);
+                    if (dateBean.getItemState() == DateBean.ITEM_STATE_END_DATE) {
+                        vh.tv_check_in_check_out.setText("结束");
+                    } else {
+                        vh.tv_check_in_check_out.setText("开始");
+                    }
+
+                } else if (dateBean.getItemState() == DateBean.ITEM_STATE_SELECTED) {
+                    //选中状态
+                    vh.itemView.setBackgroundColor(Color.parseColor("#ffa500"));
+                    vh.tv_day.setTextColor(Color.WHITE);
+                } else {
+                    //正常状态
+                    vh.itemView.setBackgroundColor(Color.WHITE);
+                    vh.tv_day.setTextColor(Color.BLACK);
+                }
+            }
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            return data.get(position).getItemType();
+        }
+
+        public class DayViewHolder extends RecyclerView.ViewHolder {
+            public TextView tv_day;
+            public TextView tv_check_in_check_out;
+
+            public DayViewHolder(@NonNull View itemView) {
+                super(itemView);
+                tv_day = itemView.findViewById(R.id.tv_day);
+                tv_check_in_check_out = itemView.findViewById(R.id.tv_check_in_check_out);
+            }
+        }
+
+        public class MonthViewHolder extends RecyclerView.ViewHolder {
+            public TextView tv_month;
+
+            public MonthViewHolder(@NonNull View itemView) {
+                super(itemView);
+                tv_month = itemView.findViewById(R.id.tv_month);
+            }
+        }
+
+        public interface OnRecyclerviewItemClick {
+            void onItemClick(View v, int position);
+        }
+    }
+
+    /**
+     * 生成日历数据
+     */
+    private List<DateBean> days(String sDate, String eDate) {
+        List<DateBean> dateBeans = new ArrayList<>();
+        try {
+            Calendar calendar = Calendar.getInstance();
+            //日期格式化
+            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
+            SimpleDateFormat formatYYYYMM = new SimpleDateFormat("yyyy-MM");
+
+            //起始日期
+            Date startDate = new Date();
+            calendar.setTime(startDate);
+
+            //结束日期
+            calendar.add(Calendar.MONTH, 5);
+            Date endDate = new Date(calendar.getTimeInMillis());
+
+
+            //格式化开始日期和结束日期为 yyyy-mm-dd格式
+            String endDateStr = format.format(endDate);
+            endDate = format.parse(endDateStr);
+
+            String startDateStr = format.format(startDate);
+            startDate = format.parse(startDateStr);
+
+            calendar.setTime(startDate);
+
+
+            calendar.set(Calendar.DAY_OF_MONTH, 1);
+            Calendar monthCalendar = Calendar.getInstance();
+
+
+            //按月生成日历 每行7个 最多6行 42个
+            //每一行有七个日期  日 一 二 三 四 五 六 的顺序
+            for (; calendar.getTimeInMillis() <= endDate.getTime(); ) {
+
+                //月份item
+                DateBean monthDateBean = new DateBean();
+                monthDateBean.setDate(calendar.getTime());
+                monthDateBean.setMonthStr(formatYYYYMM.format(monthDateBean.getDate()));
+                monthDateBean.setItemType(DateBean.item_type_month);
+                dateBeans.add(monthDateBean);
+
+                //获取一个月结束的日期和开始日期
+                monthCalendar.setTime(calendar.getTime());
+                monthCalendar.set(Calendar.DAY_OF_MONTH, 1);
+                Date startMonthDay = calendar.getTime();
+
+                monthCalendar.add(Calendar.MONTH, 1);
+                monthCalendar.add(Calendar.DAY_OF_MONTH, -1);
+                Date endMonthDay = monthCalendar.getTime();
+
+                //重置为本月开始
+                monthCalendar.set(Calendar.DAY_OF_MONTH, 1);
+
+                for (; monthCalendar.getTimeInMillis() <= endMonthDay.getTime(); ) {
+                    //生成单个月的日历
+
+                    //处理一个月开始的第一天
+                    if (monthCalendar.get(Calendar.DAY_OF_MONTH) == 1) {
+                        //看某个月第一天是周几
+                        int weekDay = monthCalendar.get(Calendar.DAY_OF_WEEK);
+                        switch (weekDay) {
+                            case 1:
+                                //周日
+                                break;
+                            case 2:
+                                //周一
+                                addDatePlaceholder(dateBeans, 1, monthDateBean.getMonthStr());
+                                break;
+                            case 3:
+                                //周二
+                                addDatePlaceholder(dateBeans, 2, monthDateBean.getMonthStr());
+                                break;
+                            case 4:
+                                //周三
+                                addDatePlaceholder(dateBeans, 3, monthDateBean.getMonthStr());
+                                break;
+                            case 5:
+                                //周四
+                                addDatePlaceholder(dateBeans, 4, monthDateBean.getMonthStr());
+                                break;
+                            case 6:
+                                addDatePlaceholder(dateBeans, 5, monthDateBean.getMonthStr());
+                                //周五
+                                break;
+                            case 7:
+                                addDatePlaceholder(dateBeans, 6, monthDateBean.getMonthStr());
+                                //周六
+                                break;
+                        }
+                    }
+
+                    //生成某一天日期实体 日item
+                    DateBean dateBean = new DateBean();
+                    dateBean.setDate(monthCalendar.getTime());
+                    dateBean.setDay(monthCalendar.get(Calendar.DAY_OF_MONTH) + "");
+                    dateBean.setMonthStr(monthDateBean.getMonthStr());
+                    dateBeans.add(dateBean);
+
+                    //处理一个月的最后一天
+                    if (monthCalendar.getTimeInMillis() == endMonthDay.getTime()) {
+                        //看某个月第一天是周几
+                        int weekDay = monthCalendar.get(Calendar.DAY_OF_WEEK);
+                        switch (weekDay) {
+                            case 1:
+                                //周日
+                                addDatePlaceholder(dateBeans, 6, monthDateBean.getMonthStr());
+                                break;
+                            case 2:
+                                //周一
+                                addDatePlaceholder(dateBeans, 5, monthDateBean.getMonthStr());
+                                break;
+                            case 3:
+                                //周二
+                                addDatePlaceholder(dateBeans, 4, monthDateBean.getMonthStr());
+                                break;
+                            case 4:
+                                //周三
+                                addDatePlaceholder(dateBeans, 3, monthDateBean.getMonthStr());
+                                break;
+                            case 5:
+                                //周四
+                                addDatePlaceholder(dateBeans, 2, monthDateBean.getMonthStr());
+                                break;
+                            case 6:
+                                addDatePlaceholder(dateBeans, 1, monthDateBean.getMonthStr());
+                                //周5
+                                break;
+                        }
+                    }
+
+                    //天数加1
+                    monthCalendar.add(Calendar.DAY_OF_MONTH, 1);
+                }
+
+                //月份加1
+                calendar.add(Calendar.MONTH, 1);
+            }
+
+        } catch (Exception ex) {
+
+        }
+
+        return dateBeans;
+    }
+
+    //添加空的日期占位
+    private void addDatePlaceholder(List<DateBean> dateBeans, int count, String monthStr) {
+        for (int i = 0; i < count; i++) {
+            DateBean dateBean = new DateBean();
+            dateBean.setMonthStr(monthStr);
+            dateBeans.add(dateBean);
+        }
+    }
+
+    private String getWeekStr(String mWay) {
+        if ("1".equals(mWay)) {
+            mWay = "天";
+        } else if ("2".equals(mWay)) {
+            mWay = "一";
+        } else if ("3".equals(mWay)) {
+            mWay = "二";
+        } else if ("4".equals(mWay)) {
+            mWay = "三";
+        } else if ("5".equals(mWay)) {
+            mWay = "四";
+        } else if ("6".equals(mWay)) {
+            mWay = "五";
+        } else if ("7".equals(mWay)) {
+            mWay = "六";
+        }
+        return mWay;
+    }
+
+    public interface OnDateSelected {
+        void selected(String startDate, String endDate);
+    }
+
+    public void setOnDateSelected(OnDateSelected onDateSelected) {
+        this.onDateSelected = onDateSelected;
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/datepicker/MyNumberPicker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/datepicker/MyNumberPicker.java	(date 1576225016618)
+++ app/src/main/java/com/guansu/management/wigdet/datepicker/MyNumberPicker.java	(date 1576225016618)
@@ -0,0 +1,331 @@
+package com.guansu.management.wigdet.datepicker;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+import android.util.SparseArray;
+import android.util.TypedValue;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.EditText;
+import android.widget.NumberPicker;
+
+import java.lang.reflect.Field;
+
+/**
+ * @author: dongyaoyao
+ */
+public class MyNumberPicker  extends NumberPicker {
+    private Context mContext;
+    NumberPicker picker;
+
+    public MyNumberPicker(Context context) {
+        super(context);
+        picker = this;
+        mContext = context;
+    }
+
+    public MyNumberPicker(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        picker = this;
+        mContext = context;
+    }
+
+    public MyNumberPicker(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        picker = this;
+        mContext = context;
+    }
+
+    @Override
+    public void addView(View child) {
+        super.addView(child);
+        updateView(child);
+    }
+
+    @Override
+    public void addView(View child, int index, ViewGroup.LayoutParams params) {
+        super.addView(child, index, params);
+        updateView(child);
+    }
+
+    @Override
+    public void addView(View child, ViewGroup.LayoutParams params) {
+        super.addView(child, params);
+        updateView(child);
+    }
+
+    private void updateView(View view) {
+        if (view instanceof EditText) {
+            ((EditText) view).setTextSize(TypedValue.COMPLEX_UNIT_SP, 20);
+            ((EditText) view).setTextColor(Color.parseColor("#000000"));//进入时滚轴显示颜色
+        }
+    }
+
+    private int mRight, mLeft, mBottom;
+    private int mTopSelectionDividerTop;
+    private int mBottomSelectionDividerBottom;
+    private int[] mSelectorIndices;
+    private int mScrollState;
+    private SparseArray<String> mSelectorIndexToStringCache;
+    private EditText mInputText;
+    private Paint mSelectorWheelPaint;
+    private int mSelectorElementHeight;
+    private int mCurrentScrollOffset;
+    private boolean mHasSelectorWheel;
+    private boolean mHideWheelUntilFocused;
+    private Drawable mSelectionDivider;
+
+    /**
+     * 通过反射获取值
+     */
+    private void getMyValue() {
+        mLeft = super.getLeft();
+        mRight = super.getRight();
+        mBottom = super.getBottom();
+        Field[] pickerFields = NumberPicker.class.getDeclaredFields();
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mSelectorWheelPaint")) {
+                try {
+                    mSelectorWheelPaint = (Paint) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mSelectorElementHeight")) {
+                try {
+                    mSelectorElementHeight = (int) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mCurrentScrollOffset")) {
+                try {
+                    mCurrentScrollOffset = (int) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mInputText")) {
+                try {
+                    mInputText = (EditText) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mSelectorIndexToStringCache")) {
+                try {
+                    mSelectorIndexToStringCache = (SparseArray<String>) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mSelectorIndices")) {
+                try {
+                    mSelectorIndices = (int[]) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mHasSelectorWheel")) {
+                try {
+                    mHasSelectorWheel = (boolean) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mHideWheelUntilFocused")) {
+                try {
+                    mHideWheelUntilFocused = (boolean) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+// for (Field field : pickerFields) {
+//  field.setAccessible(true);
+//  if (field.getName().equals("mDecrementVirtualButtonPressed")) {
+//  try {
+//   mDecrementVirtualButtonPressed = (boolean) field.get(picker);
+//  } catch (IllegalAccessException e) {
+//   e.printStackTrace();
+//  }
+//  break;
+//  }
+// }
+// for (Field field : pickerFields) {
+//  field.setAccessible(true);
+//  if (field.getName().equals("mIncrementVirtualButtonPressed")) {
+//  try {
+//   mIncrementVirtualButtonPressed = (boolean) field.get(picker);
+//  } catch (IllegalAccessException e) {
+//   e.printStackTrace();
+//  }
+//  break;
+//  }
+// }
+// for (Field field : pickerFields) {
+//  field.setAccessible(true);
+//  if (field.getName().equals("mVirtualButtonPressedDrawable")) {
+//  try {
+//   mVirtualButtonPressedDrawable = (Drawable) field.get(picker);
+//  } catch (IllegalAccessException e) {
+//   e.printStackTrace();
+//  }
+//  break;
+//  }
+// }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mScrollState")) {
+                try {
+                    mScrollState = (int) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mTopSelectionDividerTop")) {
+                try {
+                    mTopSelectionDividerTop = (int) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mBottomSelectionDividerBottom")) {
+                try {
+                    mBottomSelectionDividerBottom = (int) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+        for (Field field : pickerFields) {
+            field.setAccessible(true);
+            if (field.getName().equals("mSelectionDivider")) {
+                try {
+                    mSelectionDivider = (Drawable) field.get(picker);
+                } catch (IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
+        }
+
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+// super.onDraw(canvas);
+        getMyValue();
+        mSelectorWheelPaint.setColor(Color.BLUE);
+
+        if (!mHasSelectorWheel) {
+            super.onDraw(canvas);
+            return;
+        }
+        final boolean showSelectorWheel = mHideWheelUntilFocused ? hasFocus() : true;
+        float x = (mRight - mLeft) / 2;
+        float y = mCurrentScrollOffset;
+
+// if (showSelectorWheel && mVirtualButtonPressedDrawable != null
+//  && mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
+//  if (mDecrementVirtualButtonPressed) {
+//  mVirtualButtonPressedDrawable.setState(View.PRESSED_STATE_SET);
+//  mVirtualButtonPressedDrawable.setBounds(0, 0, mRight, mTopSelectionDividerTop);
+//  mVirtualButtonPressedDrawable.draw(canvas);
+//  }
+//  if (mIncrementVirtualButtonPressed) {
+//  mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET);
+//  mVirtualButtonPressedDrawable.setBounds(0, mBottomSelectionDividerBottom, mRight,
+//   mBottom);
+//  mVirtualButtonPressedDrawable.draw(canvas);
+//  }
+// }
+
+        int[] selectorIndices = mSelectorIndices;
+        for (int i = 0; i < selectorIndices.length; i++) {
+            int selectorIndex = selectorIndices[i];
+            String scrollSelectorValue = mSelectorIndexToStringCache.get(selectorIndex);
+            if (i != 1) {
+                mSelectorWheelPaint.setColor(Color.BLACK);
+                mSelectorWheelPaint.setTextSize(sp2px(16));
+            } else {
+                mSelectorWheelPaint.setColor(Color.parseColor("#000000"));//滑动时当前滚轴上的内容颜色
+                mSelectorWheelPaint.setTextSize(sp2px(20));
+            }
+
+            if ((showSelectorWheel && i != 1) ||
+                    (i == 1 && mInputText.getVisibility() != VISIBLE)) {
+                Rect mRect = new Rect();
+                mSelectorWheelPaint.getTextBounds(scrollSelectorValue, 0, scrollSelectorValue.length(), mRect);
+                canvas.drawText(scrollSelectorValue, x, y, mSelectorWheelPaint);
+            }
+            y += mSelectorElementHeight;
+        }
+
+        // draw the selection dividers
+        if (showSelectorWheel && mSelectionDivider != null) {
+            mSelectionDivider = new ColorDrawable(Color.parseColor("#a0c4c4c4"));//滚轴线的颜色
+            // draw the top divider
+            int topOfTopDivider = mTopSelectionDividerTop;
+            int bottomOfTopDivider = topOfTopDivider + 2;
+            mSelectionDivider.setBounds(0, topOfTopDivider, mRight, bottomOfTopDivider);
+            mSelectionDivider.draw(canvas);
+
+            // draw the bottom divider
+            int bottomOfBottomDivider = mBottomSelectionDividerBottom;
+            int topOfBottomDivider = bottomOfBottomDivider - 2;
+            mSelectionDivider.setBounds(0, topOfBottomDivider, mRight, bottomOfBottomDivider);
+            mSelectionDivider.draw(canvas);
+        }
+    }
+
+    private int sp2px(int sp) {
+        float scale = mContext.getResources().getDisplayMetrics().scaledDensity;
+        return (int) (scale * sp + 0.5f);
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/home/adapter/CommentAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/home/adapter/CommentAdapter.java	(date 1577087459357)
+++ app/src/main/java/com/guansu/management/fragment/home/adapter/CommentAdapter.java	(date 1577087459357)
@@ -0,0 +1,143 @@
+package com.guansu.management.fragment.home.adapter;
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+import androidx.recyclerview.widget.StaggeredGridLayoutManager;
+
+import com.bumptech.glide.Glide;
+import com.guansu.management.R;
+import com.guansu.management.bean.ActivityCommentsBeanX;
+import com.guansu.management.bean.ActivityDtoInfo;
+import java.util.ArrayList;
+import java.util.List;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+/**
+ * @author: dongyaoyao
+ */
+public class CommentAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+    private List<ActivityCommentsBeanX> commentsBeans= new ArrayList<ActivityCommentsBeanX>();
+    private Context context;
+    private ItemClickListener mItemClickListener;
+    public interface ItemClickListener {
+        void OnItemClick(ActivityCommentsBeanX comments,int tag);
+    }
+
+    public void setItemClickListener(ItemClickListener mItemClickListener) {
+        this.mItemClickListener = mItemClickListener;
+    }
+    public CommentAdapter(ActivityDtoInfo activityComments, Context context) {
+        this.context = context;
+            for (ActivityCommentsBeanX commentsBeanX : activityComments.getActivityComments()) {
+                ActivityCommentsBeanX commentsBean = new ActivityCommentsBeanX();
+                commentsBean.setType(-1);
+                commentsBean.setId(commentsBeanX.getId());
+                commentsBean.setContent(commentsBeanX.getContent());
+                commentsBean.setNickname(commentsBeanX.getNickname());
+                commentsBean.setCreatedAt(commentsBeanX.getCreatedAt());
+                commentsBean.setObjectId(commentsBeanX.getObjectId());
+                commentsBean.setParentId(commentsBeanX.getParentId());
+                commentsBean.setUserId(commentsBeanX.getUserId());
+                commentsBean.setTargetUserNickname(commentsBeanX.getTargetUserNickname());
+                this.commentsBeans.add(commentsBean);
+                for (ActivityCommentsBeanX commentsBeanX1 : commentsBeanX.getActivityComments()) {
+                    ActivityCommentsBeanX commentsBean1 = new ActivityCommentsBeanX();
+                    commentsBean1.setType(1);
+                    commentsBean1.setId(commentsBeanX1.getId());
+                    commentsBean1.setContent(commentsBeanX1.getContent());
+                    commentsBean1.setNickname(commentsBeanX1.getNickname());
+                    commentsBean1.setCreatedAt(commentsBeanX1.getCreatedAt());
+                    commentsBean1.setParentId(commentsBeanX1.getParentId());
+                    commentsBean1.setUserId(commentsBeanX1.getUserId());
+                    commentsBean1.setObjectId(commentsBeanX1.getObjectId());
+                    commentsBean1.setTargetUserNickname(commentsBeanX1.getTargetUserNickname());
+                    this.commentsBeans.add(commentsBean1);
+                }
+        }
+    }
+    @Override
+    public int getItemViewType(int position) {
+        return commentsBeans.get(position).getType();
+    }
+    @NonNull
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        switch (viewType) {
+            case -1:
+                return new TopViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_comment, parent, false));
+            case 1:
+                return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_comment_reply, parent, false));
+            default:
+                return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_comment_reply, parent, false));
+        }
+    }
+    @Override
+    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, final int position) {
+        ActivityCommentsBeanX commentsBean = commentsBeans.get(position);
+        if (holder instanceof TopViewHolder) {
+            Glide.with(context).load(commentsBean.getProfileImageUrl()).error(R.mipmap.photo).into(((TopViewHolder) holder).textViewPhoto);
+            ((TopViewHolder) holder).textViewName.setText(commentsBean.getNickname() + "");
+            ((TopViewHolder) holder).textViewTime.setText(commentsBean.getCreatedAt());
+            ((TopViewHolder) holder).textViewContent.setText(commentsBean.getContent());
+            holder.itemView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    mItemClickListener.OnItemClick(commentsBean,0);
+                }
+            });
+        } else if (holder instanceof ItemViewHolder) {
+            Glide.with(context).load(commentsBean.getProfileImageUrl()).error(R.mipmap.photo).into(((ItemViewHolder) holder).textViewPhoto);
+            ((ItemViewHolder) holder).textViewName.setText(commentsBean.getNickname() + "");
+            ((ItemViewHolder) holder).textViewTime.setText(commentsBean.getCreatedAt());
+            ((ItemViewHolder) holder).textViewContent.setText(commentsBean.getContent());
+            holder.itemView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    mItemClickListener.OnItemClick(commentsBean,1);
+                }
+            });
+        }
+    }
+    @Override
+    public int getItemCount() {
+        return commentsBeans != null ? commentsBeans.size() : 0;
+    }
+    class TopViewHolder extends RecyclerView.ViewHolder {
+        @BindView(R.id.textViewPhoto)
+        ImageView textViewPhoto;
+        @BindView(R.id.textViewName)
+        TextView textViewName;
+        @BindView(R.id.textViewTime)
+        TextView textViewTime;
+        @BindView(R.id.textViewContent)
+        TextView textViewContent;
+        @BindView(R.id.imageViewReply)
+        ImageView textViewReply;
+        TopViewHolder(View view) {
+            super(view);
+            ButterKnife.bind(this, view);
+        }
+    }
+        class ItemViewHolder extends RecyclerView.ViewHolder {
+            @BindView(R.id.textViewPhoto)
+            ImageView textViewPhoto;
+            @BindView(R.id.textViewName)
+            TextView textViewName;
+            @BindView(R.id.textViewContent)
+            TextView textViewContent;
+            @BindView(R.id.textViewTime)
+            TextView textViewTime;
+            @BindView(R.id.imageViewReply)
+            ImageView textViewReply;
+            ItemViewHolder(View view) {
+                super(view);
+                ButterKnife.bind(this, view);
+            }
+        }
+
+}
Index: app/src/main/java/com/guansu/management/fragment/release/data/DateBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/release/data/DateBean.java	(date 1576137898875)
+++ app/src/main/java/com/guansu/management/fragment/release/data/DateBean.java	(date 1576137898875)
@@ -0,0 +1,80 @@
+package com.guansu.management.fragment.release.data;
+
+import java.util.Date;
+
+/**
+ * Created by yanqi1 on 2016/7/4.
+ */
+public class DateBean {
+    //item类型
+    public static int item_type_day = 1;//日期item
+    public static int item_type_month = 2;//月份item
+    int itemType = 1;//默认是日期item
+
+    //item状态
+    public static int ITEM_STATE_BEGIN_DATE = 1;//开始日期
+    public static int ITEM_STATE_END_DATE = 2;//结束日期
+    public static int ITEM_STATE_SELECTED = 3;//选中状态
+    public static int ITEM_STATE_NORMAL = 4;//正常状态
+    public int itemState = ITEM_STATE_NORMAL;
+
+    Date date;//具体日期
+    String day;//一个月的某天
+    String monthStr;//月份
+
+    public int getItemState() {
+        return itemState;
+    }
+
+    public void setItemState(int itemState) {
+        this.itemState = itemState;
+    }
+
+    public int getItemType() {
+        return itemType;
+    }
+
+    public void setItemType(int itemType) {
+        this.itemType = itemType;
+    }
+
+    public String getMonthStr() {
+        return monthStr;
+    }
+
+    public void setMonthStr(String monthStr) {
+        this.monthStr = monthStr;
+    }
+
+    public static int getItem_type_month() {
+        return item_type_month;
+    }
+
+    public static void setItem_type_month(int item_type_month) {
+        DateBean.item_type_month = item_type_month;
+    }
+
+    public static int getItem_type_day() {
+        return item_type_day;
+    }
+
+    public static void setItem_type_day(int item_type_day) {
+        DateBean.item_type_day = item_type_day;
+    }
+
+    public String getDay() {
+        return day;
+    }
+
+    public void setDay(String day) {
+        this.day = day;
+    }
+
+    public Date getDate() {
+        return date;
+    }
+
+    public void setDate(Date date) {
+        this.date = date;
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/release/data/MyItemD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/release/data/MyItemD.java	(date 1576137898898)
+++ app/src/main/java/com/guansu/management/fragment/release/data/MyItemD.java	(date 1576137898898)
@@ -0,0 +1,83 @@
+package com.guansu.management.fragment.release.data;
+
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.view.View;
+
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+
+/**
+ * @date: $ $
+ * @author: dongyaoyao
+ */
+public class MyItemD extends RecyclerView.ItemDecoration {
+    Paint paint=new Paint();
+    Paint colorPaint=new Paint();
+    Paint linePaint=new Paint();
+
+    public MyItemD(){
+        paint.setColor(Color.parseColor("#ffffff"));
+        paint.setStyle(Paint.Style.FILL);
+        colorPaint.setColor(Color.parseColor("#ff6600"));
+        colorPaint.setAntiAlias(true);
+        linePaint.setAntiAlias(true);
+        linePaint.setColor(Color.parseColor("#dddddd"));
+    }
+
+    @Override
+    public void onDrawOver(@NonNull Canvas c, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
+        super.onDrawOver(c, parent, state);
+        if(parent.getChildCount()<=0){
+            return;
+        }
+
+        //头部的高度
+        int height=50;
+        final float scale = parent.getContext().getResources().getDisplayMetrics().density;
+        height= (int) (height*scale+0.5f);
+
+        //获取第一个可见的view，通过此view获取其对应的月份
+        CalendarList.CalendarAdapter a=(CalendarList.CalendarAdapter) parent.getAdapter();
+        View fistView=parent.getChildAt(0);
+        String text=a.data.get(parent.getChildAdapterPosition(fistView)).getMonthStr();
+
+        String fistMonthStr="";
+        int fistViewTop=0;
+        //查找当前可见的itemView中第一个月份类型的item
+        for(int i=0;i<parent.getChildCount();i++){
+            View v=parent.getChildAt(i);
+            if(2==parent.getChildViewHolder(v).getItemViewType()){
+                fistMonthStr=a.data.get(parent.getChildAdapterPosition(v)).getMonthStr();
+                fistViewTop=v.getTop();
+                break;
+            }
+        }
+
+        //计算偏移量
+        int topOffset=0;
+        if(!fistMonthStr.equals(text)&&fistViewTop<height){
+            //前提是第一个可见的月份item不是当前显示的月份和距离的顶部的距离小于头部的高度
+            topOffset=height-fistViewTop;
+        }
+        int t=0-topOffset;
+
+        //绘制头部区域
+        c.drawRect(parent.getLeft(),t,parent.getRight(),t+height,paint);
+
+        colorPaint.setTextAlign(Paint.Align.CENTER);
+        colorPaint.setTextSize(15*scale+0.5f);
+        //绘制头部月份文字
+        c.drawText(text,parent.getRight()/2,(t+height)/2,colorPaint);
+
+        //绘制分割线
+//        if(fistViewTop!=height) {
+//            linePaint.setStrokeWidth(scale * 0.5f + 0.5f);
+//            c.drawLine(parent.getLeft(), t + height, parent.getRight(), t + height, linePaint);
+//        }
+
+    }
+
+
+}
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(date 1577255763387)
+++ app/src/main/AndroidManifest.xml	(date 1577255763387)
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.guansu.management">
+
+    <application
+        android:name="com.guansu.management.base.MainApplication"
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+        <activity
+            android:name="com.guansu.management.activity.MainActivity"
+            android:label="@string/app_name"
+            android:theme="@style/AppTheme.NoActionBar">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+        <activity
+            android:name="io.github.xudaojie.qrcodelib.CaptureActivity"
+            tools:ignore="WrongManifestParent" />
+        <meta-data android:name="com.amap.api.v2.apikey"
+            android:value="0fcb93722e1e6f15ddb3299249fbf1bb">
+        </meta-data>
+        <service android:name="com.amap.api.location.APSService"></service>
+        <service
+            android:name=".servise.LocationService"
+            android:enabled="true"
+            android:exported="false" />
+    </application>
+
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <uses-feature android:name="android.hardware.camera" />
+    <uses-feature android:name="android.hardware.camera.autofocus" />
+
+    <uses-permission android:name="android.permission.CAMERA" />
+    <uses-permission android:name="android.permission.VIBRATE" />
+    <!-- Normal Permissions 不需要运行时注册 -->
+    <!--获取运营商信息，用于支持提供运营商信息相关的接口-->
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <!--用于访问wifi网络信息，wifi信息会用于进行网络定位-->
+    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
+    <!--这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位-->
+    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
+    <uses-permission android:name="android.permission.CHANGE_CONFIGURATION"
+        tools:ignore="ProtectedPermissions" />
+
+    <!-- 请求网络 -->
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <!-- 不是SDK需要的权限，是示例中的后台唤醒定位需要的权限 -->
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
+
+
+    <!-- 需要运行时注册的权限 -->
+    <!--用于进行网络定位-->
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <!--用于访问GPS定位-->
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
+    <!--用于提高GPS定位速度-->
+    <uses-permission android:name="android.permission.ACCESS_LOCATION_EXTRA_COMMANDS" />
+    <!--写入扩展存储，向扩展卡写入数据，用于写入缓存定位数据-->
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <!--读取缓存数据-->
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+
+    <!--用于读取手机当前的状态-->
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+
+    <!-- 更改设置 -->
+    <uses-permission android:name="android.permission.WRITE_SETTINGS"
+        tools:ignore="ProtectedPermissions" />
+
+    <!-- 3.2.0版本增加 -->
+    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
+    <!-- 3.2.0版本增加-->
+    <uses-permission android:name="android.permission.BLUETOOTH" />
+</manifest>
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/fragment/me/MyDistributionFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/me/MyDistributionFragment.java	(date 1577157366950)
+++ app/src/main/java/com/guansu/management/fragment/me/MyDistributionFragment.java	(date 1577157366950)
@@ -0,0 +1,40 @@
+package com.guansu.management.fragment.me;
+
+import android.os.Bundle;
+import android.view.View;
+
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class MyDistributionFragment extends BaseFragment {
+
+    public static MyDistributionFragment newInstance() {
+        Bundle args = new Bundle();
+        MyDistributionFragment fragment = new MyDistributionFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.item_distribution;
+    }
+
+    @Override
+    public void initView(View view) {
+
+    }
+
+    @Override
+    public void bindEvent() {
+
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+}
Index: app/src/main/java/com/guansu/management/model/HomeModellml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/model/HomeModellml.java	(date 1576839527934)
+++ app/src/main/java/com/guansu/management/model/HomeModellml.java	(date 1576839527934)
@@ -0,0 +1,46 @@
+package com.guansu.management.model;
+
+import com.google.gson.reflect.TypeToken;
+import com.guansu.management.api.ApiWrapper;
+import com.guansu.management.bean.HomeBean;
+import com.lzy.okgo.model.HttpMethod;
+import com.lzy.okgo.model.HttpParams;
+
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import io.reactivex.Observable;
+/**
+ * @date: $ $
+ * @author: dongyaoyao
+ */
+public class HomeModellml {
+     //1.	活动查询接口
+    public static final String QUERYACTIVITYINFOPAGE = "/activity/app/queryActivityInfoPage";
+    //查询圈子
+    public static final String USERIMGANDTEXTSAVE = "/content/queryContentUserImgAndText";
+    //
+    public static final String IMAGEUPLOADLIST = "/system/imageUploadList";
+    ///activity/findActivityDtoInfo
+    public  String HTTP_URL;
+    public Observable<List<HomeBean>> queryactivityinfopage(int status) {
+        HttpParams httpParams=new HttpParams();
+        if (status==0){
+            httpParams.put("type","activity");
+            HTTP_URL=QUERYACTIVITYINFOPAGE;
+        }else if (status==1){
+            httpParams.put("type","activity");
+            HTTP_URL=QUERYACTIVITYINFOPAGE;
+        }else {
+            httpParams.put("type","commet");
+            HTTP_URL=USERIMGANDTEXTSAVE;
+        }
+        httpParams.put("pageSize","8");
+        httpParams.put("page","1");
+        Type type = new TypeToken<List<HomeBean>>() {
+        }.getType();
+        return ApiWrapper.request(HttpMethod.GET, HTTP_URL, type,httpParams);
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/wigdet/datepicker/PickValueView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/datepicker/PickValueView.java	(date 1576225476700)
+++ app/src/main/java/com/guansu/management/wigdet/datepicker/PickValueView.java	(date 1576225476700)
@@ -0,0 +1,485 @@
+package com.guansu.management.wigdet.datepicker;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.NumberPicker;
+import android.widget.TextView;
+
+public class PickValueView extends LinearLayout implements NumberPicker.OnValueChangeListener {
+    private Context mContext;
+    /**
+     * 组件 标题、单位、滚轮
+     */
+    private TextView mTitleLeft, mTitleMiddle, mTitleRight;
+    private TextView mUnitLeft, mUnitMiddle, mUnitRight;
+    private MyNumberPicker mNpLeft, mNpMiddle, mNpRight;
+    /**
+     * 数据个数 1列 or 2列 or 3列
+     */
+    private int mViewCount = 1;
+    /**
+     * 一组数据长度
+     */
+    private final int DATA_SIZE = 3;
+
+    /**
+     * 需要设置的值与默认值
+     */
+    private Object[] mLeftValues;
+    private Object[] mMiddleValues;
+    private Object[] mRightValues;
+    private Object mDefaultLeftValue;
+    private Object mDefaultMiddleValue;
+    private Object mDefaultRightValue;
+    /**
+     * 当前正在显示的值
+     */
+    private Object[] mShowingLeft = new Object[DATA_SIZE];
+    private Object[] mShowingMiddle = new Object[DATA_SIZE];
+    private Object[] mShowingRight = new Object[DATA_SIZE];
+
+    /**
+     * 步长
+     */
+    private int mLeftStep = 5;
+    private int mMiddleStep = 1;
+    private int mRightStep = 1;
+    /**
+     * 回调接口对象
+     */
+    private onSelectedChangeListener mSelectedChangeListener;
+
+    public PickValueView(Context context) {
+        super(context);
+        this.mContext = context;
+        generateView();
+    }
+
+    public PickValueView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        this.mContext = context;
+        generateView();
+    }
+
+    public PickValueView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        this.mContext = context;
+        generateView();
+    }
+
+    /**
+     * 生成视图
+     */
+    private void generateView() {
+        //标题
+        LinearLayout titleLayout = new LinearLayout(mContext);
+        LayoutParams titleParams = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+        titleParams.setMargins(0, 0, 0, dip2px(12));
+        titleLayout.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+        titleLayout.setOrientation(HORIZONTAL);
+        mTitleLeft = new TextView(mContext);
+        mTitleMiddle = new TextView(mContext);
+        mTitleRight = new TextView(mContext);
+
+        LayoutParams params = new LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1);
+        TextView[] titles = new TextView[]{mTitleLeft, mTitleMiddle, mTitleRight};
+        for (int i = 0; i < titles.length; i++) {
+            titles[i].setLayoutParams(params);
+            titles[i].setGravity(Gravity.CENTER);
+            titles[i].setTextColor(Color.parseColor("#000000"));
+            titles[i].setTextSize(12);
+        }
+        titleLayout.addView(mTitleLeft);
+        titleLayout.addView(mTitleMiddle);
+        titleLayout.addView(mTitleRight);
+        //内容
+        LinearLayout contentLayout = new LinearLayout(mContext);
+        contentLayout.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+        contentLayout.setOrientation(HORIZONTAL);
+        contentLayout.setGravity(Gravity.CENTER);
+        mNpLeft = new MyNumberPicker(mContext);
+        mNpMiddle = new MyNumberPicker(mContext);
+        mNpRight = new MyNumberPicker(mContext);
+        mUnitLeft = new TextView(mContext);
+        mUnitMiddle = new TextView(mContext);
+        mUnitRight = new TextView(mContext);
+
+        MyNumberPicker[] nps = new MyNumberPicker[]{mNpLeft, mNpMiddle, mNpRight};
+        for (int i = 0; i < nps.length; i++) {
+            nps[i].setLayoutParams(params);
+            nps[i].setDescendantFocusability(FOCUS_BLOCK_DESCENDANTS);
+            nps[i].setOnValueChangedListener(this);
+        }
+
+        contentLayout.addView(mNpLeft);
+        contentLayout.addView(mUnitLeft);
+        contentLayout.addView(mNpMiddle);
+        contentLayout.addView(mUnitMiddle);
+        contentLayout.addView(mNpRight);
+        contentLayout.addView(mUnitRight);
+
+        this.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+        this.setOrientation(VERTICAL);
+        this.addView(titleLayout);
+        this.addView(contentLayout);
+    }
+
+    /**
+     * 初始化数据和值
+     */
+    private void initViewAndPicker() {
+        if (mViewCount == 1) {
+            this.mNpMiddle.setVisibility(GONE);
+            this.mNpRight.setVisibility(GONE);
+            this.mUnitMiddle.setVisibility(GONE);
+            this.mUnitRight.setVisibility(GONE);
+        } else if (mViewCount == 2) {
+            this.mNpRight.setVisibility(GONE);
+            this.mUnitRight.setVisibility(GONE);
+        }
+
+        //初始化数组值
+        if (mLeftValues != null && mLeftValues.length != 0) {
+            if (mLeftValues.length < DATA_SIZE) {
+                for (int i = 0; i < mLeftValues.length; i++) {
+                    mShowingLeft[i] = mLeftValues[i];
+                }
+                for (int i = mLeftValues.length; i < DATA_SIZE; i++) {
+                    mShowingLeft[i] = -9999;
+                }
+            } else {
+                for (int i = 0; i < DATA_SIZE; i++) {
+                    mShowingLeft[i] = mLeftValues[i];
+                }
+            }
+            mNpLeft.setMinValue(0);
+            mNpLeft.setMaxValue(DATA_SIZE - 1);
+            if (mDefaultLeftValue != null)
+                updateLeftView(mDefaultLeftValue);
+            else
+                updateLeftView(mShowingLeft[0]);
+        }
+        /**
+         * 中间控件
+         */
+        if (mViewCount == 2 || mViewCount == 3) {
+            if (mMiddleValues != null && mMiddleValues.length != 0) {
+                if (mMiddleValues.length < DATA_SIZE) {
+                    for (int i = 0; i < mMiddleValues.length; i++) {
+                        mShowingMiddle[i] = mMiddleValues[i];
+                    }
+                    for (int i = mMiddleValues.length; i < DATA_SIZE; i++) {
+                        mShowingMiddle[i] = -9999;
+                    }
+                } else {
+                    for (int i = 0; i < DATA_SIZE; i++) {
+                        mShowingMiddle[i] = mMiddleValues[i];
+                    }
+                }
+                mNpMiddle.setMinValue(0);
+                mNpMiddle.setMaxValue(DATA_SIZE - 1);
+                if (mDefaultMiddleValue != null)
+                    updateMiddleView(mDefaultMiddleValue);
+                else
+                    updateMiddleView(mShowingMiddle[0]);
+            }
+        }
+
+        /**
+         * 右侧控件
+         */
+        if (mViewCount == 3) {
+            if (mRightValues != null && mRightValues.length != 0) {
+                if (mRightValues.length < DATA_SIZE) {
+                    for (int i = 0; i < mRightValues.length; i++) {
+                        mShowingRight[i] = mRightValues[i];
+                    }
+                    for (int i = mRightValues.length; i < DATA_SIZE; i++) {
+                        mShowingRight[i] = -9999;
+                    }
+                } else {
+                    for (int i = 0; i < DATA_SIZE; i++) {
+                        mShowingRight[i] = mRightValues[i];
+                    }
+                }
+                mNpRight.setMinValue(0);
+                mNpRight.setMaxValue(DATA_SIZE - 1);
+                if (mDefaultRightValue != null)
+                    updateRightView(mDefaultRightValue);
+                else
+                    updateRightView(mShowingRight[0]);
+            }
+        }
+
+
+    }
+
+    private void updateLeftView(Object value) {
+        updateValue(value, 0);
+    }
+
+    private void updateMiddleView(Object value) {
+        updateValue(value, 1);
+    }
+
+    private void updateRightView(Object value) {
+        updateValue(value, 2);
+    }
+
+    /**
+     * 更新滚轮视图
+     *
+     * @param value
+     * @param index
+     */
+    private void updateValue(Object value, int index) {
+        String showStr[] = new String[DATA_SIZE];
+        MyNumberPicker picker;
+        Object[] showingValue;
+        Object[] values;
+        int step;
+        if (index == 0) {
+            picker = mNpLeft;
+            showingValue = mShowingLeft;
+            values = mLeftValues;
+            step = mLeftStep;
+        } else if (index == 1) {
+            picker = mNpMiddle;
+            showingValue = mShowingMiddle;
+            values = mMiddleValues;
+            step = mMiddleStep;
+        } else {
+            picker = mNpRight;
+            showingValue = mShowingRight;
+            values = mRightValues;
+            step = mRightStep;
+        }
+
+        if (values instanceof Integer[]) {
+            for (int i = 0; i < DATA_SIZE; i++) {
+                showingValue[i] = (int) value - step * (DATA_SIZE / 2 - i);
+                int offset = (int) values[values.length - 1] - (int) values[0] + step;
+                if ((int) showingValue[i] < (int) values[0]) {
+                    showingValue[i] = (int) showingValue[i] + offset;
+                }
+                if ((int) showingValue[i] > (int) values[values.length - 1]) {
+                    showingValue[i] = (int) showingValue[i] - offset;
+                }
+                showStr[i] = "" + showingValue[i];
+            }
+        } else {
+            int strIndex = 0;
+            for (int i = 0; i < values.length; i++) {
+                if (values[i].equals(value)) {
+                    strIndex = i;
+                    break;
+                }
+            }
+            for (int i = 0; i < DATA_SIZE; i++) {
+                int temp = strIndex - (DATA_SIZE / 2 - i);
+                if (temp < 0) {
+                    temp += values.length;
+                }
+                if (temp >= values.length) {
+                    temp -= values.length;
+                }
+                showingValue[i] = values[temp];
+                showStr[i] = (String) values[temp];
+            }
+        }
+        picker.setDisplayedValues(showStr);
+        picker.setValue(DATA_SIZE / 2);
+        picker.postInvalidate();
+    }
+
+
+    @Override
+    public void onValueChange(NumberPicker picker, int oldVal, int newVal) {
+        if (picker == mNpLeft) {
+            updateLeftView(mShowingLeft[newVal]);
+        } else if (picker == mNpMiddle) {
+            updateMiddleView(mShowingMiddle[newVal]);
+        } else if (picker == mNpRight) {
+            updateRightView(mShowingRight[newVal]);
+        }
+        if (mSelectedChangeListener != null) {
+            mSelectedChangeListener.onSelected(this, mShowingLeft[DATA_SIZE / 2], mShowingMiddle[DATA_SIZE / 2], mShowingRight[DATA_SIZE / 2]);
+        }
+    }
+
+    /**
+     * 设置数据--单列数据
+     *
+     * @param leftValues
+     * @param mDefaultLeftValue
+     */
+    public void setValueData(Object[] leftValues, Object mDefaultLeftValue) {
+        this.mViewCount = 1;
+        this.mLeftValues = leftValues;
+        this.mDefaultLeftValue = mDefaultLeftValue;
+
+        initViewAndPicker();
+    }
+
+    /**
+     * 设置数据--两列数据
+     *
+     * @param leftValues
+     * @param mDefaultLeftValue
+     * @param middleValues
+     * @param defaultMiddleValue
+     */
+    public void setValueData(Object[] leftValues, Object mDefaultLeftValue, Object[] middleValues, Object defaultMiddleValue) {
+        this.mViewCount = 2;
+        this.mLeftValues = leftValues;
+        this.mDefaultLeftValue = mDefaultLeftValue;
+
+        this.mMiddleValues = middleValues;
+        this.mDefaultMiddleValue = defaultMiddleValue;
+
+        initViewAndPicker();
+    }
+
+    /**
+     * 设置数据--三列数据
+     *
+     * @param leftValues
+     * @param mDefaultLeftValue
+     * @param middleValues
+     * @param defaultMiddleValue
+     * @param rightValues
+     * @param defaultRightValue
+     */
+    public void setValueData(Object[] leftValues, Object mDefaultLeftValue, Object[] middleValues, Object defaultMiddleValue, Object[] rightValues, Object defaultRightValue) {
+        this.mViewCount = 3;
+        this.mLeftValues = leftValues;
+        this.mDefaultLeftValue = mDefaultLeftValue;
+
+        this.mMiddleValues = middleValues;
+        this.mDefaultMiddleValue = defaultMiddleValue;
+
+        this.mRightValues = rightValues;
+        this.mDefaultRightValue = defaultRightValue;
+
+        initViewAndPicker();
+    }
+
+    /**
+     * 设置左边数据步长
+     *
+     * @param step
+     */
+    public void setLeftStep(int step) {
+        this.mLeftStep = step;
+        initViewAndPicker();
+    }
+
+    /**
+     * 设置中间数据步长
+     *
+     * @param step
+     */
+    public void setMiddleStep(int step) {
+        this.mMiddleStep = step;
+        initViewAndPicker();
+    }
+
+    /**
+     * 设置右边数据步长
+     *
+     * @param step
+     */
+    public void setRightStep(int step) {
+        this.mRightStep = step;
+        initViewAndPicker();
+    }
+
+    /**
+     * 设置标题
+     *
+     * @param left
+     * @param middle
+     * @param right
+     */
+    public void setTitle(String left, String middle, String right) {
+        if (left != null) {
+            mTitleLeft.setVisibility(VISIBLE);
+            mTitleLeft.setText(left);
+        } else {
+            mTitleLeft.setVisibility(GONE);
+        }
+        if (middle != null) {
+            mTitleMiddle.setVisibility(VISIBLE);
+            mTitleMiddle.setText(middle);
+        } else {
+            mTitleMiddle.setVisibility(GONE);
+        }
+        if (right != null) {
+            mTitleRight.setVisibility(VISIBLE);
+            mTitleRight.setText(right);
+        } else {
+            mTitleRight.setVisibility(GONE);
+        }
+        this.postInvalidate();
+    }
+
+    public void setUnitLeft(String unitLeft) {
+        setUnit(unitLeft, 0);
+    }
+
+    public void setmUnitMiddle(String unitMiddle) {
+        setUnit(unitMiddle, 1);
+    }
+
+    public void setUnitRight(String unitRight) {
+        setUnit(unitRight, 2);
+    }
+
+    private void setUnit(String unit, int index) {
+        TextView tvUnit;
+        if (index == 0) {
+            tvUnit = mUnitLeft;
+        } else if (index == 1) {
+            tvUnit = mUnitMiddle;
+        } else {
+            tvUnit = mUnitRight;
+        }
+        if (unit != null) {
+            tvUnit.setText(unit);
+        } else {
+            tvUnit.setText(" ");
+        }
+        initViewAndPicker();
+    }
+
+    /**
+     * 设置回调
+     *
+     * @param listener
+     */
+    public void setOnSelectedChangeListener(onSelectedChangeListener listener) {
+        this.mSelectedChangeListener = listener;
+    }
+
+    /**
+     * dp转px
+     *
+     * @param dp
+     * @return
+     */
+    private int dip2px(int dp) {
+        float scale = mContext.getResources().getDisplayMetrics().density;
+        return (int) (scale * dp + 0.5f);
+    }
+
+    /**
+     * 回调接口
+     */
+    public interface onSelectedChangeListener {
+        void onSelected(PickValueView view, Object leftValue, Object middleValue, Object rightValue);
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/fragment/me/QrCodeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/me/QrCodeFragment.java	(date 1577164933308)
+++ app/src/main/java/com/guansu/management/fragment/me/QrCodeFragment.java	(date 1577164933308)
@@ -0,0 +1,74 @@
+package com.guansu.management.fragment.me;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import androidx.annotation.RequiresApi;
+
+import com.bumptech.glide.Glide;
+import com.guansu.management.R;
+import com.guansu.management.api.MyObserve;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.bean.orcode;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.common.UserSharedPreferencesUtils;
+import com.guansu.management.model.MeModellml;
+import com.guansu.management.wigdet.CommonTitleBar;
+
+import butterknife.BindView;
+
+import static com.guansu.management.R.*;
+/**
+ * @author: dongyaoyao
+ */
+public class QrCodeFragment extends BaseFragment {
+    @BindView(id.imageViewQrCode)
+    ImageView imageViewQrCode;
+    UserSharedPreferencesUtils userSharedPreferencesUtils;
+    @BindView(id.textViewCode)
+    TextView textViewCode;
+    public static QrCodeFragment newInstance() {
+        Bundle args = new Bundle();
+        QrCodeFragment fragment = new QrCodeFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+    @Override
+    public int onSetLayoutId() {
+        return layout.fragement_qrcode;
+    }
+    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)
+    @Override
+    public void initView(View view) {
+        mTitlebar.showStatusBar(true);
+        initApi();
+        mTitlebar.setBackgroundResource(drawable.but_release);
+        mTitlebar.setRightType(CommonTitleBar.TYPE_IMAGEBUTTON_SEARCHVIEW);
+        mTitlebar.getRightImageButton().setImageResource(drawable.ic_distribution);
+       mTitlebar.getRightImageButton().setOnClickListener(new OnClickListenerWrapper() {
+           @Override
+           protected void onSingleClick(View v) {
+               start(MyDistributionFragment.newInstance());
+           }
+       });
+        setTitle("我的二维码");
+    }
+    @Override
+    public void bindEvent() {
+        userSharedPreferencesUtils = new UserSharedPreferencesUtils(getContext());
+        new MeModellml().find_activity_byuserid(userSharedPreferencesUtils.getUserid())
+                .safeSubscribe(new MyObserve<orcode>(this) {
+                    @Override
+                    protected void onSuccess(orcode orcode) {
+                        Glide.with(getContext()).load(orcode.getQR_URI()).into(imageViewQrCode);
+                        textViewCode.setText("推荐码："+orcode.getRecommendCode());
+                    }
+                });
+    }
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/me/AdviceFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/me/AdviceFragment.java	(date 1577245695379)
+++ app/src/main/java/com/guansu/management/fragment/me/AdviceFragment.java	(date 1577245695379)
@@ -0,0 +1,72 @@
+package com.guansu.management.fragment.me;
+
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.GridLayout;
+
+import androidx.fragment.app.FragmentActivity;
+
+import com.guansu.management.R;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.wigdet.dialog.PaySuccessDialog;
+
+import butterknife.BindView;
+
+/**
+ * @author: dongyaoyao
+ */
+public class AdviceFragment extends BaseFragment {
+
+    @BindView(R.id.gridLayoutLevel)
+    GridLayout gridLayoutLevel;
+    private Button mButRelease;
+    private static final String[] n = {"系统出错", "信息不正确", "售后服务", "闪退", "不会使用\n某些功能", "改进意见", "其他"};
+
+    public static AdviceFragment newInstance() {
+        Bundle args = new Bundle();
+        AdviceFragment fragment = new AdviceFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_advice;
+    }
+
+    @Override
+    public void initView(View view) {
+        setTitle("意见反馈");
+        mTitlebar.showStatusBar(true);
+        mTitlebar.setBackgroundResource(R.drawable.but_release);
+        mButRelease = view.findViewById(R.id.butRelease);
+    }
+    @Override
+    public void bindEvent() {
+        mButRelease.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                new PaySuccessDialog.Builder((FragmentActivity) getContext()).show();
+            }
+        });
+        for (String b:n) {
+            layoutFilterItem(gridLayoutLevel, b);
+        }
+    }
+
+    private void layoutFilterItem(GridLayout gridLayoutLevel, String n) {
+        View view = LayoutInflater.from(getContext()).inflate(R.layout.item_filter, gridLayoutLevel, false);
+        CheckBox mCheckBoxFilter = view.findViewById(R.id.checkBoxFilter);
+        mCheckBoxFilter.setChecked(false);
+        mCheckBoxFilter.setText(n);
+        gridLayoutLevel.addView(view);
+    }
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+}
Index: app/src/main/java/com/guansu/management/wigdet/dialog/LoginSuccessDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/wigdet/dialog/LoginSuccessDialog.java	(date 1575946213691)
+++ app/src/main/java/com/guansu/management/wigdet/dialog/LoginSuccessDialog.java	(date 1575946213691)
@@ -0,0 +1,41 @@
+package com.guansu.management.wigdet.dialog;
+
+import android.view.Gravity;
+import android.view.View;
+import android.widget.TextView;
+
+import androidx.fragment.app.FragmentActivity;
+
+import com.guansu.management.R;
+
+public final class LoginSuccessDialog {
+
+
+    public static final class Builder extends BaseDialogFragment.Builder<Builder> {
+
+
+        public Builder(FragmentActivity activity) {
+            super(activity);
+            setAnimStyle(BaseDialog.AnimStyle.SCALE);
+            setWidth(WRAP_CONTENT);
+            setContentView(R.layout.dialog_paysuccess);
+            //  setAnimStyle(BaseDialog.AnimStyle.TOAST);
+            setGravity(Gravity.CENTER);
+            setCancelable(true);
+            ((TextView) findViewById(R.id.tv_cofirm)).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    dismiss();
+                }
+            });
+        }
+
+
+        @Override
+        public BaseDialog create() {
+            // 如果内容为空就设置隐藏
+            return super.create();
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/guansu/management/fragment/home/FootprintFragemnt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/home/FootprintFragemnt.java	(date 1577256068498)
+++ app/src/main/java/com/guansu/management/fragment/home/FootprintFragemnt.java	(date 1577256068498)
@@ -0,0 +1,148 @@
+package com.guansu.management.fragment.home;
+
+import android.app.Dialog;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.guansu.management.R;
+import com.guansu.management.activity.CheckPermissionsActivity;
+import com.guansu.management.api.MyObserve;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.common.OnClickListenerWrapper;
+import com.guansu.management.common.UserSharedPreferencesUtils;
+import com.guansu.management.fragment.foot.FootAdapter;
+import com.guansu.management.model.FootModellml;
+import com.guansu.management.model.bean.LoginResult;
+
+import butterknife.BindView;
+
+/**
+ * @author: dongyaoyao
+ */
+public class FootprintFragemnt extends CheckPermissionsActivity {
+    @BindView(R.id.view)
+    View view;
+    @BindView(R.id.recyclerFoot)
+    RecyclerView recyclerFoot;
+    @BindView(R.id.textViewRelease)
+    TextView textViewRelease;
+    @BindView(R.id.view1)
+    View view1;
+    private FootAdapter footAdapter;
+    private Dialog dialog;
+    private ImageView mImageView;
+    private TextView mTextViewTitle;
+    private TextView mTextViewContext;
+    private Button mButCancel;
+    private Button mButDetermine;
+    String longitude,latitude,city,province,district;
+    UserSharedPreferencesUtils userSharedPreferencesUtils;
+    public static FootprintFragemnt newInstance() {
+        Bundle args = new Bundle();
+        FootprintFragemnt fragment = new FootprintFragemnt();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    protected void locationResult(String longitude, String latitude, String address,
+                                  String city, String province, String district) {
+        this.longitude=longitude;
+        this.latitude=latitude;
+        this.province=province;
+        this.city=city;
+        this.district=district;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_footprint;
+    }
+
+    @Override
+    public void initView(View view) {
+        hideTitle();
+        initApi();
+        initDialog();
+        startLocation();
+    }
+    private void initDialog() {
+        dialog = new Dialog(getContext(), R.style.BaseDialogStyle);
+        dialog.setContentView(R.layout.dialog_foot_success);
+        mImageView = dialog.findViewById(R.id.imageView);
+        mTextViewTitle = dialog.findViewById(R.id.textViewTitle);
+        mTextViewContext = dialog.findViewById(R.id.textViewContext);
+        mButCancel = dialog.findViewById(R.id.butCancel);
+        mButDetermine = dialog.findViewById(R.id.butDetermine);
+        mTextViewTitle.setText(province+","+city);
+        dialog.setCanceledOnTouchOutside(true);
+        dialog.getWindow().setGravity(Gravity.CENTER);
+        Window w = dialog.getWindow();
+        WindowManager.LayoutParams lp = w.getAttributes();
+        lp.width = WindowManager.LayoutParams.MATCH_PARENT;
+        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
+        dialog.onWindowAttributesChanged(lp);
+        mButCancel.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                dialog.dismiss();
+        }
+        });
+        mButDetermine.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+            initDialogData(mTextViewContext.getText().toString());
+            }
+        });
+    }
+
+    private void initDialogData(String address) {
+        new FootModellml().getPostVerify(userSharedPreferencesUtils.getUserid(),address,longitude,latitude)
+                .safeSubscribe(new MyObserve(this) {
+                    @Override
+                    protected void onSuccess(Object o) {
+
+                    }
+                });
+    }
+
+    @Override
+    public void bindEvent() {
+        userSharedPreferencesUtils = new UserSharedPreferencesUtils(getContext());
+        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
+        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
+        recyclerFoot.setLayoutManager(layoutManager);
+        textViewRelease.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+                dialog.show();
+            }
+        });
+        new FootModellml().getVerify(userSharedPreferencesUtils.getUserid())
+                .safeSubscribe(new MyObserve(this) {
+            @Override
+            protected void onSuccess(Object o) {
+
+            }
+        });
+    }
+
+    private void Data() {
+        footAdapter = new FootAdapter(getContext(), 10);
+        recyclerFoot.setAdapter(footAdapter);
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+}
Index: app/src/main/java/com/guansu/management/bean/ActivityDtoInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/bean/ActivityDtoInfo.java	(date 1576841000877)
+++ app/src/main/java/com/guansu/management/bean/ActivityDtoInfo.java	(date 1576841000877)
@@ -0,0 +1,196 @@
+package com.guansu.management.bean;
+
+import com.google.gson.annotations.SerializedName;
+
+import java.util.List;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class ActivityDtoInfo {
+    /**
+     * signUpCondition : 90后，有钱，高富帅
+     * visible : 1
+     * activitySignUps : [{"userInfoDto":null,"createdAt":"2019-12-17 11:20","activityId":"1204980186102108160","nickname":"小坤哥","id":"1206776039640928256","userId":"1169501980578549760","profileImageUrl":"https://jm-test.oss-cn-beijing.aliyuncs.com/20180719184241.png","age":null,"status":"HAS_SIGN_UP"}]
+     * distance : 1.21993269E7
+     * maxPeopleNumber : 20
+     * nickName : 18009262998
+     * sex : MALE
+     * profileImage : https://jm-test.oss-cn-beijing.aliyuncs.com/20180719184241.png
+     * signUpPeopleNumber : 1
+     * content : 大吃大喝，胡吹乱片
+     * traficCount : 0
+     * commentCount : 2
+     * startTime : 2019-08-28
+     * id : 1204980186102108160
+     * age : 18
+     * imagesList : [{"createdAt":"2019-12-12 12:23","activityId":"1204980186102108160","image":"http://supcache.airbdata.cn/data/www.gzcts03.com/uploads/1556362395_8333.jpg","id":"1204980186114691072","isCover":true},{"createdAt":"2019-12-12 12:23","activityId":"1204980186102108160","image":"http://supcache.airbdata.cn/data/www.gzcts03.com/uploads/1556362395_8333.jpg","id":"1204980186114691073","isCover":false}]
+     * activityComments : [{"targetUserNickname":"小黑","mobileNumber":"","userId":"1204288329655259136","content":"ccccc","parentId":"1206532672021598208","userInfoDto":null,"createdAt":"2019-12-13 13:52","nickname":"小白","id":"1205364880152989696","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":[{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"aaaa","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-13 13:49","nickname":"小黑","id":"1205364034400948224","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"},{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"bbbbb","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-13 13:52","nickname":"小黑","id":"1205364761051533312","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"},{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"天下无难事1111111","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-17 11:57","nickname":"小黑","id":"1206785549797429248","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"}],"favoriteCount":0,"status":"NORMAL"},{"targetUserNickname":"小黑","mobileNumber":"","userId":"1204288329655259136","content":"ddddd","parentId":"1206532672021598208","userInfoDto":null,"createdAt":"2019-12-13 15:00","nickname":"小白","id":"1205381987171307520","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":[{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"aaaa","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-13 13:49","nickname":"小黑","id":"1205364034400948224","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"},{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"bbbbb","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-13 13:52","nickname":"小黑","id":"1205364761051533312","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"},{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"天下无难事1111111","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-17 11:57","nickname":"小黑","id":"1206785549797429248","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"}],"favoriteCount":0,"status":"NORMAL"},{"targetUserNickname":"小黑","mobileNumber":"","userId":"1204288329655259136","content":"eeeee","parentId":"1206532672021598208","userInfoDto":null,"createdAt":"2019-12-17 11:44","nickname":"小白","id":"1206782124976246784","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":[{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"aaaa","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-13 13:49","nickname":"小黑","id":"1205364034400948224","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"},{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"bbbbb","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-13 13:52","nickname":"小黑","id":"1205364761051533312","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"},{"targetUserNickname":"小白","mobileNumber":"","userId":"1206532672021598208","content":"天下无难事1111111","parentId":"1204288329655259136","userInfoDto":null,"createdAt":"2019-12-17 11:57","nickname":"小黑","id":"1206785549797429248","profileImageUrl":null,"objectId":"1204980186102108160","activityComments":null,"favoriteCount":0,"status":"NORMAL"}],"favoriteCount":0,"status":"NORMAL"}]
+     */
+    private String signUpCondition;
+    private int visible;
+    private double distance;
+    private int maxPeopleNumber;
+    private String nickName;
+    private String sex;
+    private String profileImage;
+    private int signUpPeopleNumber;
+    private String content;
+    private int traficCount;
+    private int commentCount;
+    @SerializedName(value = "startTime", alternate = {"createdAt"})
+    private String startTime;
+    private long id;
+    private int age;
+    private String userId;
+    private List<ActivitySignUpsBean> activitySignUps;
+    @SerializedName(value = "imagesList", alternate = {"images"})
+    private List<ImagesListBean> imagesList;
+    private List<ActivityCommentsBeanX> activityComments;
+
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    public String getSignUpCondition() {
+        return signUpCondition;
+    }
+
+    public void setSignUpCondition(String signUpCondition) {
+        this.signUpCondition = signUpCondition;
+    }
+
+    public int getVisible() {
+        return visible;
+    }
+
+    public void setVisible(int visible) {
+        this.visible = visible;
+    }
+
+    public double getDistance() {
+        return distance;
+    }
+
+    public void setDistance(double distance) {
+        this.distance = distance;
+    }
+
+    public int getMaxPeopleNumber() {
+        return maxPeopleNumber;
+    }
+
+    public void setMaxPeopleNumber(int maxPeopleNumber) {
+        this.maxPeopleNumber = maxPeopleNumber;
+    }
+
+    public String getNickName() {
+        return nickName;
+    }
+
+    public void setNickName(String nickName) {
+        this.nickName = nickName;
+    }
+
+    public String getSex() {
+        return sex;
+    }
+
+    public void setSex(String sex) {
+        this.sex = sex;
+    }
+
+    public String getProfileImage() {
+        return profileImage;
+    }
+
+    public void setProfileImage(String profileImage) {
+        this.profileImage = profileImage;
+    }
+
+    public int getSignUpPeopleNumber() {
+        return signUpPeopleNumber;
+    }
+
+    public void setSignUpPeopleNumber(int signUpPeopleNumber) {
+        this.signUpPeopleNumber = signUpPeopleNumber;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+
+    public int getTraficCount() {
+        return traficCount;
+    }
+
+    public void setTraficCount(int traficCount) {
+        this.traficCount = traficCount;
+    }
+
+    public int getCommentCount() {
+        return commentCount;
+    }
+
+    public void setCommentCount(int commentCount) {
+        this.commentCount = commentCount;
+    }
+
+    public String getStartTime() {
+        return startTime;
+    }
+
+    public void setStartTime(String startTime) {
+        this.startTime = startTime;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public int getAge() {
+        return age;
+    }
+
+    public void setAge(int age) {
+        this.age = age;
+    }
+
+    public List<ActivitySignUpsBean> getActivitySignUps() {
+        return activitySignUps;
+    }
+
+    public void setActivitySignUps(List<ActivitySignUpsBean> activitySignUps) {
+        this.activitySignUps = activitySignUps;
+    }
+
+    public List<ImagesListBean> getImagesList() {
+        return imagesList;
+    }
+
+    public void setImagesList(List<ImagesListBean> imagesList) {
+        this.imagesList = imagesList;
+    }
+
+    public List<ActivityCommentsBeanX> getActivityComments() {
+        return activityComments;
+    }
+
+    public void setActivityComments(List<ActivityCommentsBeanX> activityComments) {
+        this.activityComments = activityComments;
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/home/adapter/SignUpsAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/home/adapter/SignUpsAdapter.java	(date 1577084242653)
+++ app/src/main/java/com/guansu/management/fragment/home/adapter/SignUpsAdapter.java	(date 1577084242653)
@@ -0,0 +1,83 @@
+package com.guansu.management.fragment.home.adapter;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+import com.bumptech.glide.Glide;
+import com.guansu.management.R;
+import com.guansu.management.bean.ActivitySignUpsBean;
+import com.guansu.management.common.OnClickListenerWrapper;
+import java.util.List;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+/**
+ * @author: dongyaoyao
+ */
+public class SignUpsAdapter extends RecyclerView.Adapter<SignUpsAdapter.MyViewHolder> {
+    private Context mcontext;
+    private List<ActivitySignUpsBean> signUpsBeans;
+    public SignUpsAdapter(List<ActivitySignUpsBean> signUpsBeans,Context context) {
+        this.signUpsBeans=signUpsBeans;
+        this.mcontext=context;
+    }
+    @NonNull
+    @Override
+    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_signups, parent, false);
+        MyViewHolder myViewHolder = new MyViewHolder(view);
+        return myViewHolder;
+    }
+    @Override
+    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
+        ActivitySignUpsBean signUpsBean=signUpsBeans.get(position);
+        Glide.with(mcontext).load(signUpsBean.getProfileImageUrl()).error(R.mipmap.photo).into(holder.imageViewPhoto);
+        holder.textViewName.setText(signUpsBean.getNickname());
+        if ("HAS_SIGN_UP".equals(signUpsBean.getStatus())){
+            holder.textViewStatus.setText("申请中");
+        }else if ("HAS_AGREE".equals(signUpsBean.getStatus())){
+            holder.textViewStatus.setText("已加入");
+            holder.textViewRefuse.setVisibility(View.GONE);
+            holder.textViewAgree.setVisibility(View.GONE);
+        }else if ("HAS_REFUND".equals(signUpsBean.getStatus())){
+            holder.textViewStatus.setText("已拒绝");
+            holder.textViewRefuse.setVisibility(View.GONE);
+            holder.textViewAgree.setVisibility(View.GONE);
+        }
+        holder.textViewAgree.setOnClickListener(new OnClickListenerWrapper() {
+            @Override
+            protected void onSingleClick(View v) {
+            }
+        });
+    }
+    @Override
+    public int getItemCount() {
+        return signUpsBeans != null ? signUpsBeans.size() : 0;
+    }
+    public class  MyViewHolder extends RecyclerView.ViewHolder{
+        @BindView(R.id.imageViewPhoto)
+        ImageView imageViewPhoto;
+        @BindView(R.id.textViewName)
+        TextView textViewName;
+        @BindView(R.id.view)
+        View view;
+        @BindView(R.id.textViewAge)
+        TextView textViewAge;
+        @BindView(R.id.textViewRefuse)
+        TextView textViewRefuse;
+        @BindView(R.id.textViewAgree)
+        TextView textViewAgree;
+        @BindView(R.id.textViewStatus)
+        TextView textViewStatus;
+        MyViewHolder(View view) {
+            super(view);
+            ButterKnife.bind(this, view);
+        }
+    }
+}
+
Index: app/src/main/java/com/guansu/management/bean/ImagesListBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/bean/ImagesListBean.java	(date 1576751412077)
+++ app/src/main/java/com/guansu/management/bean/ImagesListBean.java	(date 1576751412077)
@@ -0,0 +1,60 @@
+package com.guansu.management.bean;
+
+/**
+ * @author: dongyaoyao
+ */
+public class ImagesListBean {
+    /**
+     * activityId : 1205040515481866240
+     * createdAt : 2019-12-12 16:23
+     * id : 1205040515838382080
+     * image : http://supcache.airbdata.cn/data/www.gzcts03.com/uploads/1556362395_8333.jpg
+     * isCover : true
+     */
+
+    private String activityId;
+    private String createdAt;
+    private String id;
+    private String image;
+    private boolean isCover;
+
+    public String getActivityId() {
+        return activityId;
+    }
+
+    public void setActivityId(String activityId) {
+        this.activityId = activityId;
+    }
+
+    public String getCreatedAt() {
+        return createdAt;
+    }
+
+    public void setCreatedAt(String createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getImage() {
+        return image;
+    }
+
+    public void setImage(String image) {
+        this.image = image;
+    }
+
+    public boolean isIsCover() {
+        return isCover;
+    }
+
+    public void setIsCover(boolean isCover) {
+        this.isCover = isCover;
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/home/adapter/NewHomeAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/home/adapter/NewHomeAdapter.java	(date 1577246519742)
+++ app/src/main/java/com/guansu/management/fragment/home/adapter/NewHomeAdapter.java	(date 1577246519742)
@@ -0,0 +1,360 @@
+package com.guansu.management.fragment.home.adapter;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.os.Build;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
+import androidx.recyclerview.widget.GridLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.bumptech.glide.Glide;
+import com.guansu.management.R;
+import com.guansu.management.bean.HomeBean;
+import com.guansu.management.bean.ImagesListBean;
+import com.guansu.management.config.Constant;
+import com.guansu.management.fragment.MainFragment;
+import com.guansu.management.fragment.details.DetailsFragment;
+import com.guansu.management.model.bean.HomeBannerBean;
+import com.guansu.management.wigdet.banner.ConvenientBanner;
+import com.guansu.management.wigdet.banner.holder.CBViewHolderCreator;
+import com.guansu.management.wigdet.banner.holder.Holder;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.ListIterator;
+
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class NewHomeAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+    private Context mcontext;
+    private List<HomeBean> homeBeanList = new ArrayList<>();
+    private final int STATUS_UNVERIFIED = 1;
+    private int status = STATUS_UNVERIFIED;
+    private ItemClickListener mItemClickListener;
+    private int tag;
+    private List<HomeBean> list;
+    public interface ItemClickListener {
+        void OnItemClick(String id, int tag);
+    }
+    public void setItemClickListener(ItemClickListener mItemClickListener) {
+        this.mItemClickListener = mItemClickListener;
+    }
+    public NewHomeAdapter(List<HomeBean> homeBeans, Context context, int page, int tag) {
+        this.mcontext = context;
+        this.tag = tag;
+    }
+
+    @Override
+    public int getItemViewType(int position) {
+        return homeBeanList.get(position).getType();
+    }
+
+    @NonNull
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        switch (viewType) {
+            case -1:
+                return new MyViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.fragement_new_home_title, parent, false));
+            case -2:
+                return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.fragement_new_home_two, parent, false));
+            default:
+                return new ContextViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.home_item, parent, false));
+        }
+    }
+
+    @SuppressLint("NewApi")
+    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)
+    @Override
+    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
+        HomeBean homeBean = homeBeanList.get(position);
+        if (holder instanceof MyViewHolder) {
+            ArrayList arrayList = new ArrayList<HomeBannerBean>();
+            arrayList.add(new HomeBannerBean(R.mipmap.banner_1, "《真爱-梁祝》音乐剧场见面会"));
+            arrayList.add(new HomeBannerBean(R.mipmap.banner_2, "《真爱-梁祝》话剧见面会"));
+            arrayList.add(new HomeBannerBean(R.mipmap.banner_3, "肖战，王一博见面会"));
+            ((MyViewHolder) holder).banner.setPages(new CBViewHolderCreator<LocalImageHolderView>() {
+                @Override
+                public LocalImageHolderView createHolder() {
+                    return new LocalImageHolderView();
+                }
+            }, arrayList)
+                    .startTurning(3000)
+                    .setCanLoop(false);
+        } else if (holder instanceof ItemViewHolder) {
+            switch (tag) {
+                case 0:
+                    ((ItemViewHolder) holder).radioGroup.check(((ItemViewHolder) holder).radioNewest.getId());
+                    break;
+                case 1:
+                    ((ItemViewHolder) holder).radioGroup.check(((ItemViewHolder) holder).radioMove.getId());
+                    break;
+                case 2:
+                    ((ItemViewHolder) holder).radioGroup.check(((ItemViewHolder) holder).radioCircle.getId());
+                    break;
+            }
+
+            ((ItemViewHolder) holder).radioMove.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    mItemClickListener.OnItemClick("-1", -1);
+                }
+            });
+            ((ItemViewHolder) holder).radioCircle.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    mItemClickListener.OnItemClick("0", -1);
+                }
+            });
+
+        } else if (holder instanceof ContextViewHolder) {
+            Glide.with(mcontext).load(homeBean.getProfileImage()).into(((ContextViewHolder) holder).imageViewPhoto);
+            ((ContextViewHolder) holder).textViewName.setText(homeBean.getNickName());
+//            ((ContextViewHolder) holder).textViewAddress.setText(homeBean.getDistance());
+            ((ContextViewHolder) holder).textViewTime.setText(homeBean.getStartTime());
+            ((ContextViewHolder) holder).textViewAge.setText(homeBean.getAge() + "岁");
+            ((ContextViewHolder) holder).rButComment.setText(homeBean.getCommentCount() + "");
+            ((ContextViewHolder) holder).rButWatch.setText(homeBean.getTraficCount() + "");
+            ((ContextViewHolder) holder).textViewDistance.setText("距离：" + Math.round(homeBean.getDistance() / 100d) / 10d + "km");
+            ((ContextViewHolder) holder).textViewCondition.setText("参加条件：" + homeBean.getSignUpCondition());
+            switch (tag) {
+                case 0:
+                    break;
+                case 1:
+                    break;
+                case 2:
+                    ((ContextViewHolder) holder).textViewCondition.setVisibility(View.GONE);
+                    ((ContextViewHolder) holder).view1.setVisibility(View.GONE);
+                    ((ContextViewHolder) holder).rButJoin.setVisibility(View.GONE);
+                    ((ContextViewHolder) holder).textViewCondition.setVisibility(View.GONE);
+                    ((ContextViewHolder) holder).rButJoin.setVisibility(View.GONE);
+                    ((ContextViewHolder) holder).view1.setVisibility(View.GONE);
+                    ((ContextViewHolder) holder).textViewSo.setText("来自圈子");
+                    ((ContextViewHolder) holder).textViewSo.setCompoundDrawablesWithIntrinsicBounds(null, null,
+                            mcontext.getResources().getDrawable(R.mipmap.home_circle, null), null);
+                    break;
+            }
+
+            if ("MALE".equals(homeBean.getSex())) {
+                ((ContextViewHolder) holder).view.setBackground(mcontext.getResources().getDrawable(R.drawable.but_item_distance));
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                    ((ContextViewHolder) holder).textViewAge.setCompoundDrawablesWithIntrinsicBounds(mcontext.getResources().getDrawable(R.mipmap.male, null),
+                            null, null, null);
+                }
+            } else {
+                ((ContextViewHolder) holder).view.setBackground(mcontext.getResources().getDrawable(R.drawable.but_item_age));
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                    ((ContextViewHolder) holder).textViewAge.setCompoundDrawablesWithIntrinsicBounds(mcontext.getResources().getDrawable(R.mipmap.female, null),
+                            null, null, null);
+                }
+            }
+            ((ContextViewHolder) holder).textViewContext.setText(homeBean.getContent());
+            List<ImagesListBean> img_list = homeBean.getImagesList();
+            GridLayoutManager gridLayoutManager = new GridLayoutManager(mcontext, 3);
+            ((ContextViewHolder) holder).rvPics.setLayoutManager(gridLayoutManager);
+            ImageAdapter imageAdapter = new ImageAdapter(img_list);
+            ((ContextViewHolder) holder).rvPics.setAdapter(imageAdapter);
+            holder.itemView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    mItemClickListener.OnItemClick(homeBean.getId() + "", tag);
+                }
+            });
+        }
+    }
+
+    @Override
+    public int getItemCount() {
+        return homeBeanList != null ? homeBeanList.size() : 0;
+    }
+
+    public void setmList(List<HomeBean> homeBeans,int page) {
+        if (homeBeans != null && page == 1) {
+            initData(homeBeans);
+        } else {
+        }
+        notifyDataSetChanged();
+    }
+    public void addmList(List<HomeBean> homeBeans, int page) {
+        if (homeBeans != null && page == 1) {
+            initData(homeBeans);
+        } else {
+            homeBeanList.addAll(homeBeans);
+        }
+        notifyDataSetChanged();
+    }
+
+    private void initData(List<HomeBean> homeBeans) {
+        for (int i = 0; i < homeBeans.size() + 2; i++) {
+            HomeBean homeBean = new HomeBean();
+            if (i == 0) {
+                homeBean.setType(-1);
+                homeBean.setId(12);
+                homeBean.setAge(12);
+                homeBean.setCommentCount(12);
+                homeBean.setContent("");
+                homeBean.setDistance(0.1);
+                homeBean.setMaxPeopleNumber(0);
+                homeBean.setNickName("");
+                homeBean.setProfileImage("");
+                homeBean.setSignUpCondition("");
+                homeBean.setSignUpPeopleNumber(1);
+                homeBean.setStartTime("");
+                homeBean.setTraficCount(1);
+                homeBean.setVisible(1);
+                homeBean.setSex("");
+                homeBean.setImagesList(null);
+            } else if (i == 1) {
+                homeBean.setType(-2);
+                homeBean.setId(12);
+                homeBean.setAge(12);
+                homeBean.setCommentCount(12);
+                homeBean.setContent("");
+                homeBean.setDistance(0.1);
+                homeBean.setMaxPeopleNumber(0);
+                homeBean.setNickName("");
+                homeBean.setProfileImage("");
+                homeBean.setSignUpCondition("");
+                homeBean.setSignUpPeopleNumber(1);
+                homeBean.setStartTime("");
+                homeBean.setTraficCount(1);
+                homeBean.setVisible(1);
+                homeBean.setSex("");
+                homeBean.setImagesList(null);
+            } else {
+                homeBean.setType(0);
+                homeBean.setId(homeBeans.get(i - 2).getId());
+                homeBean.setAge(homeBeans.get(i - 2).getAge());
+                homeBean.setCommentCount(homeBeans.get(i - 2).getCommentCount());
+                homeBean.setContent(homeBeans.get(i - 2).getContent());
+                homeBean.setDistance(homeBeans.get(i - 2).getDistance());
+                homeBean.setMaxPeopleNumber(homeBeans.get(i - 2).getMaxPeopleNumber());
+                homeBean.setNickName(homeBeans.get(i - 2).getNickName());
+                homeBean.setProfileImage(homeBeans.get(i - 2).getProfileImage());
+                homeBean.setSignUpCondition(homeBeans.get(i - 2).getSignUpCondition());
+                homeBean.setSignUpPeopleNumber(homeBeans.get(i - 2).getSignUpPeopleNumber());
+                homeBean.setStartTime(homeBeans.get(i - 2).getStartTime());
+                homeBean.setTraficCount(homeBeans.get(i - 2).getTraficCount());
+                homeBean.setVisible(homeBeans.get(i - 2).getVisible());
+                homeBean.setSex(homeBeans.get(i - 2).getSex());
+                homeBean.setImagesList(homeBeans.get(i - 2).getImagesList());
+            }
+            this.homeBeanList.add(homeBean);
+        }
+    }
+
+    class LocalImageHolderView implements Holder<HomeBannerBean> {
+        private View view;
+        private ImageView textViewBg;
+        private TextView textViewTitle;
+
+        @Override
+        public View createView(Context context) {
+            view = LayoutInflater.from(context).inflate(R.layout.home_view_title, null);
+            textViewBg = view.findViewById(R.id.textViewBg);
+            textViewTitle = view.findViewById(R.id.textViewTitle);
+            return view;
+        }
+
+        @Override
+        public void UpdateUI(Context context, int position, HomeBannerBean data) {
+            Glide.with(mcontext).load(data.getBackground()).centerCrop().thumbnail(0.1f).into(textViewBg);
+            textViewTitle.setText(data.getTitle());
+        }
+    }
+
+    public class MyViewHolder extends RecyclerView.ViewHolder {
+        @BindView(R.id.view2)
+        View view2;
+        @BindView(R.id.imageBlack)
+        TextView imageBlack;
+        @BindView(R.id.imagePreservation)
+        ImageButton imagePreservation;
+        @BindView(R.id.banner)
+        ConvenientBanner banner;
+
+        public MyViewHolder(View view) {
+            super(view);
+            ButterKnife.bind(this, view);
+        }
+    }
+
+    public class ItemViewHolder extends RecyclerView.ViewHolder {
+        @BindView(R.id.radioNewest)
+        RadioButton radioNewest;
+        @BindView(R.id.radioMove)
+        RadioButton radioMove;
+        @BindView(R.id.radioCircle)
+        RadioButton radioCircle;
+        @BindView(R.id.radioGroup)
+        RadioGroup radioGroup;
+        @BindView(R.id.view)
+        View view;
+        @BindView(R.id.view1)
+        View view1;
+
+        public ItemViewHolder(View view) {
+            super(view);
+            ButterKnife.bind(this, view);
+        }
+    }
+
+    public class ContextViewHolder extends RecyclerView.ViewHolder {
+        @BindView(R.id.imageViewPhoto)
+        ImageView imageViewPhoto;
+        @BindView(R.id.textViewName)
+        TextView textViewName;
+        @BindView(R.id.textViewAddress)
+        TextView textViewAddress;
+        @BindView(R.id.textViewTime)
+        TextView textViewTime;
+        @BindView(R.id.view)
+        View view;
+        @BindView(R.id.textViewAge)
+        TextView textViewAge;
+        @BindView(R.id.textViewDistance)
+        TextView textViewDistance;
+        @BindView(R.id.rvPics)
+        RecyclerView rvPics;
+        @BindView(R.id.textViewContext)
+        TextView textViewContext;
+        @BindView(R.id.view1)
+        View view1;
+        @BindView(R.id.textViewCondition)
+        TextView textViewCondition;
+        @BindView(R.id.rButComment)
+        RadioButton rButComment;
+        @BindView(R.id.rButWatch)
+        RadioButton rButWatch;
+        @BindView(R.id.rButJoin)
+        RadioButton rButJoin;
+        @BindView(R.id.textViewSo)
+        TextView textViewSo;
+
+        public ContextViewHolder(View view) {
+            super(view);
+
+            ButterKnife.bind(this, view);
+
+        }
+    }
+}
Index: app/src/main/java/com/guansu/management/bean/orcode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/bean/orcode.java	(date 1577096749491)
+++ app/src/main/java/com/guansu/management/bean/orcode.java	(date 1577096749491)
@@ -0,0 +1,32 @@
+package com.guansu.management.bean;
+
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class orcode {
+
+    /**
+     * QR_URI : http://guan-su-oss.oss-cn-beijing.aliyuncs.com/QR_code.jpg
+     * recommendCode : R00000089
+     */
+
+    private String QR_URI;
+    private String recommendCode;
+
+    public String getQR_URI() {
+        return QR_URI;
+    }
+
+    public void setQR_URI(String QR_URI) {
+        this.QR_URI = QR_URI;
+    }
+
+    public String getRecommendCode() {
+        return recommendCode;
+    }
+
+    public void setRecommendCode(String recommendCode) {
+        this.recommendCode = recommendCode;
+    }
+}
Index: app/src/main/java/com/guansu/management/fragment/home/NewHomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/fragment/home/NewHomeFragment.java	(date 1577246982412)
+++ app/src/main/java/com/guansu/management/fragment/home/NewHomeFragment.java	(date 1577246982412)
@@ -0,0 +1,156 @@
+package com.guansu.management.fragment.home;
+
+import android.os.Bundle;
+import android.view.View;
+import android.widget.RadioGroup;
+
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
+
+import com.guansu.management.R;
+import com.guansu.management.api.MyObserve;
+import com.guansu.management.api.ServiceException;
+import com.guansu.management.base.BaseFragment;
+import com.guansu.management.bean.HomeBean;
+import com.guansu.management.config.Constant;
+import com.guansu.management.config.HttpConstants;
+import com.guansu.management.fragment.MainFragment;
+import com.guansu.management.fragment.details.DetailsFragment;
+import com.guansu.management.fragment.home.adapter.NewHomeAdapter;
+import com.guansu.management.model.HomeModellml;
+import com.guansu.management.wigdet.recyclerview.EndLessOnScrollListener;
+
+import java.util.List;
+
+import butterknife.BindView;
+
+/**
+ * Created by dongyaoyao
+ */
+public class NewHomeFragment extends BaseFragment implements NewHomeAdapter.ItemClickListener,
+        SwipeRefreshLayout.OnRefreshListener {
+    @BindView(R.id.rgStatus)
+    RadioGroup rgStatus;
+    @BindView(R.id.rvListMessage)
+    RecyclerView rvListMessage;
+    @BindView(R.id.layout_swipe_refresh)
+    SwipeRefreshLayout layoutSwipeRefresh;
+    private String status = Constant.VIEW_BLEND;
+    NewHomeAdapter newHomeAdapter;
+    private List<HomeBean> homeBeanList;
+    private EndLessOnScrollListener endLessOnScrollListener;
+    int page = 1;
+    int tag;
+
+    public static NewHomeFragment newInstance() {
+        Bundle args = new Bundle();
+        NewHomeFragment fragment = new NewHomeFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public int onSetLayoutId() {
+        return R.layout.fragement_message;
+    }
+
+    @Override
+    public void initView(View view) {
+        initApi();
+        hideTitle();
+        mTitlebar.showStatusBar(true);
+        mTitlebar.setBackgroundResource(R.drawable.but_release);
+    }
+
+    private void inithomeData(String status) {
+        if (status == Constant.VIEW_BLEND) {
+            tag = 0;
+        } else if (status == Constant.VIEW_CONSTRAINTS) {
+            tag = 1;
+        } else if (status == Constant.VIEW_CIRCLE) {
+            tag = 2;
+        }
+        newHomeAdapter = new NewHomeAdapter(homeBeanList, getContext(), page, tag);
+        rvListMessage.setAdapter(newHomeAdapter);
+        ReporteNameData(1, tag);
+    }
+
+    @Override
+    public void bindEvent() {
+        rgStatus.setVisibility(View.GONE);
+        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
+        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
+        rvListMessage.setLayoutManager(layoutManager);
+        endLessOnScrollListener = new EndLessOnScrollListener(layoutManager) {
+            @Override
+            public void onLoadMore(int currentPage) {
+                ReporteNameData(++page, tag);
+            }
+        };
+        rvListMessage.addOnScrollListener(endLessOnScrollListener);
+        layoutSwipeRefresh.setOnRefreshListener(this);
+        setLoadingContentView(layoutSwipeRefresh);
+        inithomeData(status);
+
+    }
+
+    private void ReporteNameData(int currentPage, int tag) {
+        showLoadingPage();
+        new HomeModellml().queryactivityinfopage(tag).subscribe(new MyObserve<List<HomeBean>>(this) {
+            @Override
+            protected void onSuccess(List<HomeBean> homeBeans) {
+                showPage();
+                if (1 == currentPage) {
+                    endLessOnScrollListener.refresh();
+                    newHomeAdapter.setmList(homeBeans, 1);
+                } else {
+                    newHomeAdapter.addmList(homeBeans, 2);
+                }
+                initOnclick();
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                super.onError(e);
+                if (e instanceof ServiceException && ((ServiceException) e).code.equals(HttpConstants.NO_DATA)) {
+                    showNoData();
+                } else {
+                    showError(e);
+                }
+            }
+        });
+    }
+
+    private void initOnclick() {
+        newHomeAdapter.setItemClickListener(this);
+    }
+
+    @Override
+    public boolean canSwipeBack() {
+        return false;
+    }
+
+    @Override
+    public void OnItemClick(String id, int tag) {
+        if ("-1".equals(id)) {
+            status = Constant.VIEW_CONSTRAINTS;
+            inithomeData(status);
+        } else if ("0".equals(id)) {
+            status = Constant.VIEW_CIRCLE;
+            inithomeData(status);
+        } else {
+            if (2 == tag) {
+                ((MainFragment) getParentFragment()).start(DetailsFragment.newInstance(id, Constant.VIEW_CIRCLE));
+            } else {
+                ((MainFragment) getParentFragment()).start(DetailsFragment.newInstance(id, Constant.VIEW_CONSTRAINTS));
+            }
+        }
+    }
+
+    @Override
+    public void onRefresh() {
+        inithomeData(status);
+        layoutSwipeRefresh.setRefreshing(false);
+    }
+}
Index: app/src/main/java/com/guansu/management/servise/LocationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/servise/LocationService.java	(date 1577255540460)
+++ app/src/main/java/com/guansu/management/servise/LocationService.java	(date 1577255540460)
@@ -0,0 +1,52 @@
+package com.guansu.management.servise;
+import android.app.Service;
+import android.content.Intent;
+import android.os.IBinder;
+import androidx.annotation.Nullable;
+import com.amap.api.location.AMapLocationClient;
+import com.amap.api.location.AMapLocationClientOption;
+
+public class LocationService extends Service {
+    private AMapLocationClient locationClient = null;
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        //初始化client
+        locationClient = new AMapLocationClient(this.getApplicationContext());
+        //设置定位参数
+        locationClient.setLocationOption(getDefaultOption());
+        // 设置定位监听
+        locationClient.setLocationListener(LocationManager.getInstance().mLocationListener);
+    }
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        locationClient.startLocation();
+        return Service.START_NOT_STICKY;
+    }
+
+    @Nullable
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+    /**
+     * 默认的定位参数
+     *
+     * @author hongming.wang
+     * @since 2.8.0
+     */
+    private AMapLocationClientOption getDefaultOption() {
+        AMapLocationClientOption mOption = new AMapLocationClientOption();
+        mOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);//可选，设置定位模式，可选的模式有高精度、仅设备、仅网络。默认为高精度模式
+        mOption.setGpsFirst(false);//可选，设置是否gps优先，只在高精度模式下有效。默认关闭
+        mOption.setNeedAddress(true);//可选，设置是否返回逆地理地址信息。默认是true
+        mOption.setOnceLocation(true);//可选，设置是否单次定位。默认是false
+        mOption.setOnceLocationLatest(false);//可选，设置是否等待wifi刷新，默认为false.如果设置为true,会自动变为单次定位，持续定位时不要使用
+        AMapLocationClientOption.setLocationProtocol(AMapLocationClientOption.AMapLocationProtocol.HTTP);//可选， 设置网络请求的协议。可选HTTP或者HTTPS。默认为HTTP
+        mOption.setSensorEnable(false);//可选，设置是否使用传感器。默认是false
+        mOption.setWifiScan(true); //可选，设置是否开启wifi扫描。默认为true，如果设置为false会同时停止主动刷新，停止以后完全依赖于系统刷新，定位位置可能存在误差
+        mOption.setLocationCacheEnable(true); //可选，设置是否使用缓存定位，默认为true
+        return mOption;
+    }
+}
Index: app/src/main/java/com/guansu/management/model/MeModellml.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/model/MeModellml.java	(date 1577247278099)
+++ app/src/main/java/com/guansu/management/model/MeModellml.java	(date 1577247278099)
@@ -0,0 +1,31 @@
+package com.guansu.management.model;
+import com.google.gson.reflect.TypeToken;
+import com.guansu.management.api.ApiWrapper;
+import com.guansu.management.bean.orcode;
+import com.lzy.okgo.model.HttpMethod;
+import com.lzy.okgo.model.HttpParams;
+import java.lang.reflect.Type;
+import io.reactivex.Observable;
+/**
+ * @date:
+ * @author: dongyaoyao
+ */
+public class MeModellml {
+    //我的二维码生成
+    public static final String FIND_ACTIVITY_BYUSERID = "/user/findR_codeByUserId";
+    public static final String FIND_BASEINFO_USERBYID = "/user/app/findBaseInfoUserById";
+    public Observable<orcode> find_activity_byuserid(String userId) {
+        HttpParams httpParams=new HttpParams();
+        httpParams.put("userId",userId);
+        Type type = new TypeToken<orcode>() {
+        }.getType();
+        return ApiWrapper.request(HttpMethod.GET, FIND_ACTIVITY_BYUSERID, type,httpParams);
+    }
+    public Observable<orcode> find_baseinfo_userbyid(String userId) {
+        HttpParams httpParams=new HttpParams();
+        httpParams.put("userId",userId);
+        Type type = new TypeToken<orcode>() {
+        }.getType();
+        return ApiWrapper.request(HttpMethod.GET, FIND_BASEINFO_USERBYID, type,httpParams);
+    }
+}
Index: app/src/main/java/com/guansu/management/bean/FileBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/guansu/management/bean/FileBean.java	(date 1576752655457)
+++ app/src/main/java/com/guansu/management/bean/FileBean.java	(date 1576752655457)
@@ -0,0 +1,117 @@
+package com.guansu.management.bean;
+
+import java.util.List;
+
+public class FileBean {
+
+
+    /**
+     * code : 0000000
+     * data : {"imageList":[{"image":"http://guan-su-oss.oss-cn-beijing.aliyuncs.com/1207114838900215808/d7e6f43743c06b113a8a20a1c31547de_1440×2560.jpg","isCover":true},{"image":"http://guan-su-oss.oss-cn-beijing.aliyuncs.com/1207114838900215808/665a5b1b9f28dec885f453ec821db144_1440×2560.jpg","isCover":false},{"image":"http://guan-su-oss.oss-cn-beijing.aliyuncs.com/1207114838900215808/f20c86460a828c031e40e87e429ac9d4_1440×2560.jpg","isCover":false},{"image":"http://guan-su-oss.oss-cn-beijing.aliyuncs.com/1207114838900215808/d1d59765791039a64afce91cb6295094_1440×2560.jpg","isCover":false}]}
+     * developMsg :
+     * msg : 请求成功
+     * ts : 1576749356797
+     * uri :
+     */
+
+    private String code;
+    private DataBean data;
+    private String developMsg;
+    private String msg;
+    private long ts;
+    private String uri;
+
+    public String getCode() {
+        return code;
+    }
+
+    public void setCode(String code) {
+        this.code = code;
+    }
+
+    public DataBean getData() {
+        return data;
+    }
+
+    public void setData(DataBean data) {
+        this.data = data;
+    }
+
+    public String getDevelopMsg() {
+        return developMsg;
+    }
+
+    public void setDevelopMsg(String developMsg) {
+        this.developMsg = developMsg;
+    }
+
+    public String getMsg() {
+        return msg;
+    }
+
+    public void setMsg(String msg) {
+        this.msg = msg;
+    }
+
+    public long getTs() {
+        return ts;
+    }
+
+    public void setTs(long ts) {
+        this.ts = ts;
+    }
+
+    public String getUri() {
+        return uri;
+    }
+
+    public void setUri(String uri) {
+        this.uri = uri;
+    }
+
+    public static class DataBean {
+        private List<ImageListBean> imageList;
+
+        public List<ImageListBean> getImageList() {
+            return imageList;
+        }
+
+        public void setImageList(List<ImageListBean> imageList) {
+            this.imageList = imageList;
+        }
+
+        public static class ImageListBean {
+            /**
+             * image : http://guan-su-oss.oss-cn-beijing.aliyuncs.com/1207114838900215808/d7e6f43743c06b113a8a20a1c31547de_1440×2560.jpg
+             * isCover : true
+             */
+
+            private String image;
+            private boolean isCover;
+
+            public String getImage() {
+                return image;
+            }
+
+            public void setImage(String image) {
+                this.image = image;
+            }
+
+            public boolean isIsCover() {
+                return isCover;
+            }
+
+            public void setIsCover(boolean isCover) {
+                this.isCover = isCover;
+            }
+
+            @Override
+            public String toString() {
+                return "ImageListBean{" +
+                        "image='" + image + '\'' +
+                        ", isCover=" + isCover +
+                        '}';
+            }
+        }
+    }
+}
